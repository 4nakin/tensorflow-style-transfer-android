node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "transformer/contract/MirrorPad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\004\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/MirrorPad"
  op: "MirrorPad"
  input: "input"
  input: "transformer/contract/MirrorPad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/contract/conv1/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 9
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
        tensor_content: "f`:j\254p|\307\242l\240Hh\256\247`^\177;\220\253~\307\246\206\216\257uve/\"u\2062U\233Hw\223\275o\212nu\232\2156Ms<\202\201y\234\231\201\177\240yuC\000!\\f<^jZex\315v\216QglrC+u?kjbs\221|i\225p]I!4kZ@l\237gx\244\236v\233Hj\231\231ags;\217\235y\255\242~\205\237h|iD.|\205>Q\215Lv\200\271\200\210ns\210\204F\\l>yz}\215\233{x\233p\200O\0273acM\\ddkm\311\205\216RhbkUBo@ll`k\222xi\216jdY2CmVNl\224p}\213\220p\220Jg\224\223cufE\216\232x\235\231y\203\210b\204lQ<\202\204RS\213T|\200\244|\203tq\206\207KpgC{y\201\211\222tt\222p\217T*C`e[\\dprg\262\205\212PfembPlEui_i\223xi\216fngBPuYbv\222z\206\207\177g\220Wa\222\222q\201\\J\230\227|\221\223o\177}g\221wbX\215\214ca\210_\201|\220q\211\201h\203\203`\177]E\205y\207\201\220qq\213t\242`D^jbmafyzi\237\201\222UZflvbjG~kad\223yj\217hzuS]{^pw\217\177\223\221s\\\210`_\235\225v\204TP\223\232x\217\216e|xr\222rig\227\222ue\213_\211\177v]\203\204d\206\213c\206VN\207z\212~\224fl\220z\244^Rksmzgj|\201n~o\217XXmm|deM\210k_g\215pg\215p|uZk\201bnw\221\202\233\222gY\207f\\\234\222v\207RQ\230\235|\224\221\\yrv\215kxl\231\224wf\207c\223\177hV\201\207[\212\205f\203TN\211{\207\200\224Zl\217}\242\\ctvk\177jg\202\214koh\217^Usi\201eZP\204l_h\226ih\223jwtds\201]h\177\224\200\236\232hX|a^\244\226o\207SU\220\243~\231\214Pzl}\213a\204r\231\224sr\213b\223\205hVx\177d\221\216a\200PR\205\177\210\210\225Sn\207\201\235Xmvpm\201ul\207\215kl`\205VYxl\200aWS\201oci\213cn\221nsol}zWf\216\234\206\244\257gezcf\244\241i\210jV\225\253\204\242\204Oxi\230\211g\211x\220\213q}\216d\234\214n\\y~e\233\220]\177eT\214\210\214\220\217Sm\200\214\224]p}hf~\202o\201\225nrb\212Qb~j\200Z`U\177qgq\207gw\222sppn\204pR`\234\250\206\254\306de~]x\246\257d\177\211Z\227\255\200\257\201Gvf\251}s\203\177\213\205n\211\227h\250\224qY|ux\234\235XszT\213\211\212\225\211Qj\177\225\207kg\202`f\200\217v\206\232roY\212G}\200u}QkU\177uou|fu\214sftr\214k[2k\242sx\257\227r\222Ma\233\223^b\177<\223\241~\262\237\205\210\241k{jB\024z~2T\217Pu\211\251uz{x\216\2076NyC\212{~\221\214ty\215syR\030$[bAcj_jr\274\200|VdciJ5tJphdl\207vd\212j]U5;kW.i\224lt\217\222z\221J^\216\204^ksD\213\225y\234\225y\177\221`\200mP\035{\202@X\205Su}\247\205|ur\203{>crK|s|\206\213rv\216r\201Y-5\\ZP`elii\273\225\201Va_c]GnNsc^e\205vk\210hciHGoQ7k\207irx\177u\211H]\204~\\piL\207\220v\203\216r}}^\204kT*\203\177PN\202Qww\216\203yyr|vEsmL{u~x\212nu\203m\225Z4@Z^]Vgtke\240\225\201O^abgMpJsa^b\210ti\177dmpKNrTMp\212mowvu\215TX\204~`\202kR\206\214y|\213kroe\220hdC\214\205h[\206Xqw\206~\200\205ayvY}oPzp\207x\213go\202u\247\\PY_[pYc|kg\224\233\213TYb_zYsP}b\\]\216uj\202iwv``~[bs\204js}df\211]W\211{f\203eX~\217zx\200^odp\223_fO\227\213v`\213[r{gn\200\206^yv]\204nTtq\212x\202_j\201z\254W]gid|Xf\177pls\212\211RUj\\~VrRza\\a\205pk\203lxvbg\201b^t\207kw\200ah\204bV\207ze\200^[|\217~\201}Sgc{\220R}^\235\224uc\214Sw\177`j}\215^~q`\204hRru\215|\177Sf\205\201\254Pnqpf\205Xg\200skf}\214ZSjY\206[hU|a\\b\201gi\214ouupq\177_Xy\204l\202\210[eyd^\214\201a\200X_v\227\200\210xEcf|\215K\204e\235\223lg\211Q\202~bht\204_\204t[\203\\Vkv\222\200|Q^\211~\244Krylh\204he\201zk]p\205T[qZ\202[]Xm`gdydh\220lrqr~zZV\202\217m\217\236_ntgh\223\217^\200o[y\235\210\220xJbg\227\210M\200j\232\217nn\220T\204\206hhp\204j\214\177VzjUp~\226\205}Va\207\215\230Okzoj\204pl\204\213gkq\206Sht`\204R`Vnipfykq\231jqmx\204sVK\212\232u\237\265\\ly]\177\225\245Yy\206\\\177\242\206\236tE^d\260~Ywk\221\210bx\222U\231\220gcvw~\221\213Mo\201Rs\200\224\211yU^\206\221\212[a{cl\201\200k\207\222nh_\213D~ze{MfUtlrkvjq\225pgpl\214rU?r\242\204\200\257\211p\217IX\233\215li|L\234\240|\267\227\202\202\237jw}U%\177wEc\216i\177\214\221fixs\217\201MetW\227y\204\222\201vt\212r{f5=]YQqhvsr\252ruV[ef\\FsY\202ail~{h\205nbmLKjN<o\225{s\213\205t\215DS\213\177jpqM\220\220t\232\213y~\212b}~c.\202uS_\204gy}\227zmsl\201uTooV\211s{\205\202qx\203o\202oHKXPaoe\200oi\253\211rK\\``iTpX\201aZg\177~p\200ib~_]oNCp\214pkvwu\211FR}q`uoR\205\210o\205\204t{vc\201v`5\206uc[\205doz\203totkzoWzoW\202mw}\204pwzn\220iMVWKn`e\207ni\233\215}EWbY|UoZ\202\\Ra\206{rzdj\206b_qSTx\225lZ{tu\220YQzq_z\177]{\204u\177{hsam\206kpH\214\177ue\220_`}\205x\201\204_xn`\206\177\\sn\201{~gqsu\244e_iUS~cl\215dl\225\235\215CScW\204[v_~ZW`\201yrujn\211ll{Z[z\220_N\201dt\221dVxub\203\202]k\207|xq\\g[|\216VrU\232\207|e\217SU~nt\205\210_zkb\213\205\\fn\210xu\\fx|\250Tdpa\\\205bi\206Xnw\237\215FYeX\207Vz`r^W`zpiyot\200oq\204^Y{\221\\T\201_r\210j^wq`\202\202`h\205\204{kM]^\215\215Mza\241\217xh\223PX\201ix\177\214cxja\213\214X\\n\225zqS^}\203\253Rnwle\207]i\206\\lm\227\215McfS\215Vu^p^\\\\qlk\204ou\200ux\177_W\203\207^^\205Us|fhxw_xq`^\220\205~aGSf\214\207F\200i\241\221sk\220M_\203cuw\214m{o^\200{YWs\232zjWS\212\203\243No\200pe\214ch\215dga\211\207MmkS\217Qg[g_a^jko\222loy|\177{\\O\205\212hw\231Ywsdx\201\211^zubf\231\220\212bJPk\233\204T|g\244\221tp\220Tr\205cqn\210r\205u]sxX^y\237\200jZX\220\215\230Uj\177sh\211oh\213sic\177\205HvvS\213Nd[h`sdkst\235njwy\205tWL\221\224w\215\261Vpw_\214\211\236\\t\207ar\240\223\222eGVj\267|bro\233\214gz\220X\212\220ddt~\204\211\205Sf\200Qo}\236\205m[Y\222\227\206e^\204hj\211zl\216\207ken\212C\212w`\210KeXpgvenou\240sh|u\216sWBn\224\206\207\244wf\214OM\235\206nfz[\250\233}\253\227\200t\242mx~f\034}tKX\177k\210\210nYc}n\220\205Vcnj\244{\203\215\210mp\212z\200kMGXUVe`\177xo\217hmXXhhaAji\215dim\204zh\205k_obUnJ=l\204\177t\205um\210HG\205uifka\230\215r\222\212|s\212drwq$}q`Wxj|}sgbri|uYidk\220py\202\202np}l\203kdTRFiZ_\207te\220|nHX\\\\tKhf\214ZXc\200}l}e\\\177sbrG?m\205j_tnq\211HKvp_onb\205\202i\200\177pilj{ft!\203jmK|dkvnimuevmWuii\200gq}\202jjpl\217ad[N=rN`\212ie\206\215y<V_\\|Hhg\205ZOb\204wrwi`\203tapFKq\221VDxmw\222XLomWu\207jp|oys`[Vy\177K}3\213rxW\211UN|yn}|_sjYv\204gljzvzbchv\232LpfIB\201Mi\211Rh\207\243\212:Y^W\205Fxh~XL_\201vlnme\204|mzQIt\2236-\205bx\222_VhnNr\236fZ\200vqaVEP\212\2044l8\225~x[\220=6~mv\204\205eljMs\231hUi\205ujVOg\200\2419flVP\202Jm}=mr\257\221<a`S\2014\202eoWW_tncrpoytlyYDz\2234+\206X}\205li`tPr\244gN|\200tVJ=N\227\2036mM\244\216qc\23031\200h\201}\213jncPr\254fHj\227w_KNv\206\242?`ye`\211Pl~<kk\267\213El_M\2107\210fhW^Zgjfyqnzxt}\\F\205\210?=\213O{qdvb{Mn\224dL\205\206vO?8V\232\177FmZ\247\224mh\2248>\177a\200k\210pnjOl\241\\Fk\224wXIH\201\207\241Oa\177lh\212\\i\205Gid\255}BwfS\207;}_bX_^^gl\214kl\177t}yXC\214\203XZ\226Dyab\206k\207Tq\221g]\215\213zL<:b\253yWf`\242\221nn\221D]\205X{^\207yzrQj\225[Uo\230{YKK\215\216\222aW\177ph\215fh\211`g_\234xH\201kW\215=t^l\\ja_mv\230mi\202v\204sU8\217\202j}\254CkhZ\233q\241Ph\230et\232\222\204U:@k\310me]`\233\220_o\215Nv\213Ukhy\212}\204E]\225Wow\234\177`LO\223\234\200hKyjh\205og\216~j`~z9\222nb\2045qUwaucclx\237t^\204q\204uXCp\216\205\203\250qg\217YB\242\204vmol\246\236}\252\226\206h\247lz}u/\207yUX\200s\203\211iVk\200h\231\203`tcv\236z\214\215\213xk\217u\201icY\\Y^b_\177wl\177krhPifnLhr\214csj\204\203h\204hdnogvL=m\177\177r~oi\215S@\206qnqek\226\214t\224\206~f\213a{r\2034\207ufPtr{zjajxa\205nf}Su\216s}\200\204vn\200g\214hudXJr]X\217qa}\201uVR^Z~V]o\211[cd\205\204q|`h\200\177puJFi~h[rfn\222WG|eethp}\177m\212|s\\pa\177X\203.\212svExdevjgw}_}dh}]wxkx\200\200nfmh\224Z{iT@~J^\217gcu\224\204JT^Q\215M^p\200XTa\177\200qrfk\177\205nvGPq\221I9{ks\225aHlj`x\212w\\{s}odKRr\204@\2118\217r\201O\213PEzxs\207\206\\xaay\202r]i\200}xf[cu\241C\201sP@\213Lk\206Pj\206\260\222GU_K\216FworTVe|\177jlhp\200\213t{RN{\222\'\035\210b|\221l\\amJt\243pD|\202qXZ6K\207\212)w@\230\202\201Z\2235(\202q}\207\221dncQt\244n9j\217wb\\Ig~\2464ovVO\213Rnz3l\177\315\227Ic`N\2104\207k[T_^jubnmwt\177x\200WM\201\231&\030\214Z\202\201sqStIp\300s9x\210qKJ\'A\225\205?kS\251\212|g\232,\035\202p\225\201\223jfeDn\301k/f\234xUU@o\205\244Fb\202cY\220Tpx*iy\341\220Kq\\P\2063\222jNRe^akfuqryxy}ZI\217\227;)\220R\206kp\205Z|Dk\270o;\203\217w=> I\246\177Wfa\246\221ys\2347-\205j\225j\222xmjDj\275c3g\245{JHD\200\210\240`^\210l_\216`m\203;ik\333\177G\205dT\207-\211hTWj\\Sgm\200tq\210z\200xSJ\226\210VM\232DzUf\230^\220Ph\255sU\215\222x;6-O\266xu_c\242\221qu\225CM\210W\204V\212\202xtHb\262aOp\247}PFK\200\233\221}N\204jb\217oh\210Yj^\271q?\214jV\2131\200bgVn_Vjy\216tc\221u\205rPI\226|qu\2479iUV\253f\245Ra\242rw\230\220~G-7^\315n\210Ze\232\211hv\216Tp\215Oj\\t\225~\203EW\245\\mu\237\200ZCP\207\241~\201J}d`\213sh\221ulU\215u/\237n_\204){^}`nd\\a\203\230y^\222u\205\201T@f\222|\177\241vg\222W;\246\177mnm}\242\227n\256\227\221]\247jyh{4\211sS@\177j~\204r[r{b\230~QiX\177\230|r\221\215\203c\212tuUi^]Q^G_{vn~v\177aPjbiBb|\211cem\207\213h\204g^cqe|F6gylp~ok\220Q7\211jala}\212\210b\234\211\211Y\215_vX\210-\207qc<riyunepw]\205kZnN\177\213oh\203\207\177dze\177SxcZDk=Z\204sb}\215\201YM^UwE[z\204[Ub\205\212lya`p\203nvI<f\205V^umq\220SB|dZsl\203o\201`\213|\200Jve}8\210*\204jr/yWisnnwx^\177^Zw[\201kmj\177\200v[lh\216=}kS?z,^\202kev\235\211IT_L\204AaztVPf\201\206msbfj\204oyHEk\2208Cvky\214aModPr\215\211Lym\177gv8Yu\206\"\2072\211u};\214EQx\200\177\203\201[w_Zp\177|Kes}ssUbo\233+~oPD\2052f{Uf\206\303\226FZ[N\214;xy`TSb|\202gsfng\206vzQEx\222\030+\203b\201\216laYs@k\252\211/z\177nSd!G\211\217\032s1\224\200zH\232-4~~\215\211\212hodAm\247}(e\207y[iB]y\250%lnWP\2067nk>l\200\345\224En\\Q{\'\212sLR[^gx[trqe~o\200]B\201\234\032\035\211]\211zqwLu;k\277\204\"u\214p>W\023A\230\212<fA\235\212wZ\240#(\202\201\240|\215shg9i\301u\030d\223zK^<d}\253BZxe[\206Aqq5j\177\377\217J}VR~$\215q@Se]Ylauossut}`?\211\230-+\223T\210]n\217T\2109g\306\1771\202\222u2A\020F\265\200`\\M\242\223mj\244+/\211t\236]\210~mm-a\307o*h\246|BJ?o\214\242iRzld\211Sqt=ls\363uG\215`]{$\217kKRs_Odl\202qs\203otyW>\215\200LM\237DyE_\235P\232>f\270\204T\211\223s48\037L\305x}UT\243\214eh\232<J\210Z\205I~\204n{1[\276kPl\246|FCJ}\222\216|Huo\\\206]jzVl`\302g<\226__{&\212hdVqbOb~\212rj\212p{mN8\225pbp\2504dJQ\267T\264=Y\247}z\223\214vC,3U\323m\204JQ\221\206Zi\216Cj\213MjSn\230t\214-G\255drq\227~W>U|\240\200}=md\\\177eg\200qmV\225o*\252djs\027\203a}\\oa\\`\206\217{_\212iw\204RMl\221\202\177\247ph\221[8\245\202lzo\206\241\230h\262\231\225l\250rzj\204N\211t[J|h~\213vdr\200a\232\200PqZ\205\222\200n\223\224\211o\207qmWmi]PbTdxspwx\212cWjdeJ`~\203c_n\206\215o\203j\\bsr}HEl\202tt\207pm\214W>\222pevd\207\207\213X\240\206\213f\223kx]\217F\213ukHycyx}lt}]\214nYrR~~q_\212\207\213p|kyQysXDpJY\202uh}\212\204]VaVvL^vz_Of\177\206r}e^n~tzKMq\211clynt\213[C\212ifyi\216j\205Z\222w\210V\203p|D\220C\201vx@|Xts\202st\201_\220d^v[\203hmc\207|\204iui\210@|sQF\200Aa\202uey\237\212RXeO\202Ic{mYKf|\207tydcg\203ytNVz\232M\\\204jw\211cT\204n_}\210\226M\203j\206d\204Ks\200\202<\215J\177|\204H\222Obx\224\202}\202^\216g^s\204\203Dnl\203o\210cqt\223;~\177OJ\216Ag\200il\217\271\222OefS\216Gw\177[VSfs\210nyjil\206~{[T\202\232@J\204i}\201nnpzNx\245\2233\200\177zKy9b\230\2078|F\215\207~Q\235@T}\217\212~\207o\202jPq\243\202-l\202}\\zZk\200\235;rvVV\214Glx_i\210\325\224KvdV\2025\210tIY^b^\204ivtom|v|cP\213\237>E\217f\204nt\204f\211Iu\270\230*\177\212x4l&V\253\211ZkL\222\216v]\251>J\204\223\230o\214y{rCm\300|#i\225{HnOs\210\235[_{dc\212QpxWk\213\344\204R\212^Y\2012\220tAZm`Owl\200vswsx\177eH\226\227MN\236b\203Qm\225c\233Eq\274\2147\212\232|$T)\\\306\200w`R\233\230nl\250BN\213\207\222W\211\201y\2008h\305u1o\245\202?YT\177\223\234uSwli\207aq{^n\210\333rN\227c_y1\221nHY|cJpv\210xw\203nvu^C\233\207bg\245Ou=b\251[\262Hg\254\222W\224\236{/C9\\\327x\213WX\224\222dr\236J`\214t\203D|\211}\2129Y\273pTt\251\203DOe\206\235\213\204Guoh\202fl~oqv\266a?\235jdz,\211mbZ~cJh\211\217zk\211myoUD\231lo\204\246Bd?W\276_\307H]\234\226{\234\224zB2D^\345p\215MW\214\211Xq\222Ix\221`gIn\231}\233+E\250ot{\240\202YGi\201\257{\204;ned\177me\204~mg\211g3\253iqr\033\204i{fud[b\222\225\200_\203hv\201V\\r\217\207\206\270ii\217g;\247\213v\203l\215\231\232g\276\227\233~\245u~o\216]\206naQ\201b\200\222oaq\207`\233\213Np]\207\207\177l\231\220\222}\207woVtm^K_ccsxzsk\213lVoe]Pb\201{g\\s\207\216y\203m]Xvq}MSx\203y\177\232km\205]D\225|f\200i\222\202\216X\253\205\221u\225su]\216S\201ldMz\\\201\200uho~`\221wUpU\201tw\\\220\205\215t\200ntHtqTDkY^v{mx\177\207\\\\gYjNa{u]Hk\200\215x|h[\\vyuMTy\207o\201\215iq}`K\214yg\203k\232n\210V\243r\214b\200\200yQ\225U}urF~[\200{zqp\202b\220o]uY\210cq[\217y\207rsr{A~vNAzL_{\204ht\213\202[d_TxJ_\200m\\Bhx\210wwg[`~ytP^~\217l\200\213cvwf^\204}h\203{\244P\203`\216d\211Wk\222|L\222V{u}O\212U\200z\204}o\202i\217oaps\210Ko_\204n\213hlz\205=\202\177HC\206Le\201\203h\204\235\207XteX\201Iq\203`ZHfr\207rvmbi\205|tXV\207\214ay\213Zujisq\213\\|\213\240E\205p~M}B_\243\200Q\205O\200\202wT\221Px|\177~l\201s\204sRl\211\201@ov\202[|Tc\203\214DxsMP\201Nfz\177ix\250\202R\177]\\\2005wzU[Wba\200jwwfn|rxdQ\216\215`w\222ZsXm\211l\230Ux\230\237E\211\204{;m1L\264\177duM\212\211q]\233Kv\201\202\207b\202|~|Gc\233~<o\200~IsJc\207\217XiqZ]\177Wfz|h\201\253sS\225][|5\205qR]aaU|eyvlustveK\227\211gx\235TsBb\240k\257Nr\227\232S\216\217\177.W0I\316wxlP\220\220dg\236Lu\210~\206Jz\204\205\206:[\250zKu\224\204C_Pm\225\211d[ldg\177el||o~\250cH\242ggw/\211sZ`pcOps\201|hyqqr\\F\232si\205\244@l7`\253^\277Hi\213\235h\226\222z3J:J\330o~_P\215\212Zl\225H~\214brAs\212}\217.P\235zcz\227\202LQZt\241}mKdea|khy\212nh\222ZA\244hfn1\201vkdweOh\177\210z^zkrmS=\230dl\233\2555]7R\300_\323D`\210\241\205\241\215~F??G\335e}ZP\210\205Kn\212?\210\221V]Hg\231\202\237\035D\224w{\201\215\205[O^k\250piA\\_[rngv\216s`r\\5\261ktg\037\177p~jof`f\212\205\201Wrhm\211]i~\227\210\217\317j_\207q@\265\230v\220m\223\217\242s\315\234\236\221\243z\204s\217n\206ya`\207_\213\236vXq\215d\251\231K\177]\212y\210s\250\220\231\210\215{tPuti[`}ii{\177nY\211wXrnXcc\205qmf{\211\222\210\211maRov\203RY\177\210|\220\262de\200iG\244\216l\217d\226|\230c\302\205\227\204\215y}j\215g\206t`^~T\206\212s`j\205f\241\211I~\\\206m}d\240\202\227\207\205vwGquaPeuco\177vki\203pcne]bb}fh[s}\224\205\200n_Wry{M^\202\206x\222\244bgyhX\236\217m\222c\240r\231`\270y\223|}\201\201b\222d|shV\201W\214\205wch\205k\237\202TzV\211a}`\237y\220~qt{BwyZLqlfs\210kks\200engaoZ^\177icStx\220\203uh`^v|tPe\207\211w\227\240[jhqn\231\226t\225r\253c\221g\245i\213kd\230\202d\220k|zrY\216Z\216\204zjc\212q\244\202\\wf\217Uxa\230m\217ug\201\200F|{QI\200ki}\217on\202~j~ib~\\h\201cfVoq\213|npbk~\201uX_\221\212t\230\244Rd^l\203\212\245k\214s\252_\224q\225X\200ZS\262\201g\213`x}q^\225R\222\210ueY\205|\230\215Wrs\205Qzr\217[\200a^\214\205KzqOR\177dj{\217od\203v_\212eb|Hqx_e\\kg\205rpydl|zw_[\226\207u\232\246NdPm\234\201\264g\204w\246c\225\200\217GpJ?\302\200s\204a\201\206gi\231R\224\212pgU\201\207\216\220Kk\201\205S{y\215WwWY\223\205Ysv^]\177ol|\223oj\204h_\232ajyHxu]geha\177mo|gmzwr`U\234~v\240\255EcBb\256\203\307Xy}\240n\236\212\215>^E8\323v{}Z\204\214`r\233O\223\216mjHw\217\233\232;_\213}_\201\211\220MdTY\240\204Yil`e{zmz\223oj\203\\T\246lrt?~tblmi\\qpt~jmxtr\\P\240us\251\2616_<c\276s\335Pw}\243~\244\214\215@OJ8\357o{r\\\204\211Vv\224F\233\223\\`Bp\223\220\243*W\213zt\210\213\221XZ__\261v[Wegdu\202jw\232u]sWO\251pvk=\177trmpjXi\201v\202^iuvpRH\242kr\264\271.R9W\317n\354Ho\177\255\212\256\205\216KDP7\360f|f\\\205\204G|\221@\235\231OQKd\243\215\264\021M\217\203\177\215\206\220aRb^\271dWG_b]p\206kp\235|U^[D\265u\200^.\202xyvlncf\205y\206Qbir"
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.695031344891
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.897573590279
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/convolution_eightbit_reshape_transformer/contract/MirrorPad"
  op: "Reshape"
  input: "transformer/contract/MirrorPad"
  input: "transformer/contract/conv1/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/convolution_eightbit_min_transformer/contract/MirrorPad"
  op: "Min"
  input: "transformer/contract/conv1/convolution_eightbit_reshape_transformer/contract/MirrorPad"
  input: "transformer/contract/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv1/convolution_eightbit_max_transformer/contract/MirrorPad"
  op: "Max"
  input: "transformer/contract/conv1/convolution_eightbit_reshape_transformer/contract/MirrorPad"
  input: "transformer/contract/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv1/convolution_eightbit_quantize_transformer/contract/MirrorPad"
  op: "QuantizeV2"
  input: "transformer/contract/MirrorPad"
  input: "transformer/contract/conv1/convolution_eightbit_min_transformer/contract/MirrorPad"
  input: "transformer/contract/conv1/convolution_eightbit_max_transformer/contract/MirrorPad"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv1/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/contract/conv1/convolution_eightbit_quantize_transformer/contract/MirrorPad"
  input: "transformer/contract/conv1/weights_quint8_const"
  input: "transformer/contract/conv1/convolution_eightbit_quantize_transformer/contract/MirrorPad:1"
  input: "transformer/contract/conv1/convolution_eightbit_quantize_transformer/contract/MirrorPad:2"
  input: "transformer/contract/conv1/weights_min"
  input: "transformer/contract/conv1/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/contract/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/contract/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/contract/conv1/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/contract/conv1/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/contract/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/contract/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/contract/conv1/convolution_eightbit_quantized_conv:2"
  input: "transformer/contract/conv1/convolution_eightbit_requant_range:0"
  input: "transformer/contract/conv1/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/contract/conv1/convolution"
  op: "Dequantize"
  input: "transformer/contract/conv1/convolution_eightbit_requantize"
  input: "transformer/contract/conv1/convolution_eightbit_requantize:1"
  input: "transformer/contract/conv1/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/contract/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/contract/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/contract/conv1/convolution"
  input: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/contract/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/contract/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/contract/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/contract/conv1/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/contract/conv1/InstanceNorm/moments/normalize/Mul"
  input: "transformer/contract/conv1/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/contract/conv1/InstanceNorm/moments/normalize/variance"
  input: "transformer/contract/conv1/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/contract/conv1/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "style_num"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 26
        }
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1/shape"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "MQ\265>\\\234\026?\013\321_?)\352o?\0238a?\202\203\243?\360M\257?\210\323A?\024!y?\255\234\250?n\036_?\031\201k?\352\264]?`\363,?\375\263\215?\306({?!{\004?\\\"\202?\201o\023?\220\252\237?\262l\224?\264\370\032?\\\253w?Zh`?\304\337\030?\256c\036?a\257\021?\256v\007?\341\026\204>s]\216?\317B\031?\2049a?\034\301\026?>dT?c\345\224?\346\327D?CT\234?\254\231X?\312\010\227?\332;\273?\344l\202?m\275\002?\221}D?H\177+?\374l\206?\005\360\214?M&\312?e\204\204?S\016\020?\034\030~?\004\351\202?J=\246?B{\227?NUM?&l\276?\021\305\214?\354\352e?\260&\202?Ho\006?\354\236\310?\001\0064?\007\224N?\364 \234>\223\324`?\363\001\020?\035\2271?HzQ?$HM?\364m\211?-\212\211?*\224\257?\021\235(?\221\002\227?\330\370\262?]Q:?\340\\}?9\352q?s\273J?\023\247]?\032d\261?\332\331P?Rb\227?\200\207\242> \\\275?Z~|?Fy\005?\036\317R?e\226v?7h\003?\367\0256?\221 \265>\377\3610?\300U\023?\375C\253?\342\2228?\'\2364?\257\203X?\375\355\237?%\0014?\t\016Y?D\323Q?#\275$?\207\320\177?\363\256S?\364\037T?\376\367??\2352[?\264{\200?AF\260?\306\261-?\"\220W?\\\323C?\007\267r?fQG?\262\030<?:e\200?e\220P?\301\225\032?8\365P?\341\256\211?\r\320\216?\301(3?\252o1?\177>Y?n\232O?%\301\"?h\361\026?\336\022J?\331\234,?TJ\354>N*\233?rUR?\213\206h?o\257\253?\355\267\244?h[`?b/\217?\220\360\252?\214\316.?\214\245\024?U\217x?\3166U?\260\274\223?J%\331?\274\3158?\242\232\226?)\233\023?\365\337s?G1\200?\333\366 ?\210\306:?>T_?\361\374\007?\233Zq?\200\336\304>ru\206?\251\326\036?HE\267?hBL?}\016g?\034\320\256>\237\224K?\004\215F?`Et?\252Mf?#x\207?\302\315\245?\304Sx?\206\300W?\220\236\217?\271 .?\270\255U?-\030\234?\220\310[?w\317\214?G\320\200?\365\274\332>\304_\205?\202D\022?/\004\223?\306\267\220?B\212*?s\343\\?\306\245\200?W\"\035?\221k%?AP\232>\311\266Y?\231c\322>\256^\202?\306\235\026?f\3148?N\207\274>c\364\335>p]\340>\222\354\014?\365\2247?\364\336:?\254a\326?\243I\251>_\020{?[\356\"?s\003\022?b\013G?\024\261\254?\365\252\326>\032\2173?\363j\365>\233y-?\323\213\264?\207@F?\316\211\231?|\001\321<\362\264\256>^\377\300>\301\021\205?\324=\356>\241\243R?Ue\230>\026m\231>_\021_>%x\241?\204\353\205>1\265\346>\271\021\343>Gw\353>\315\363\233?\213\353??}\207\275?\224sU?o\"\236?\004\224\306?\017>j?cD:?\026\201*?/\372D?\034\031W?\022\226\236?,\034\261?\277\024\246?\013\2065?\245\344\207?\003\0011?\233al?88\212?\362B\016?{]\342?>\262W?\265#w?\373*\205?w\0133?\362\320\230?\366C\024?t\331a?B\256=?\177\224T?Q\360)?Y\301\013?\n\221d?\215\314a?\032\343l?\'\333g?>\324\301?\212\304]?\251\270\214?\032\036\244?\272\021f?\256L\236>\360y\221?!\264L?\204\224e?\2001\251?\342d:?^@\217?\014\206M?_\004\244?\372(\244?\234~\036?\373\005P?\'\017\201?\301\255\033?\264\323N?J \035?e\326=?\231_2?b\010b?\235\322\026?\230\375\010?\232OB?\252\271 ?\033W)?\272]k?\016\206e?\257\333U?\262\374\333?*\366w?\256Wi?\326\275\241?G\210\022?\226x,?\020h\243?Y/\216?\004\3001?\232\372\223>\277\360\252>xA4?\263l\330>\305.\'?\260>\257?k\320\001?\313\317\211?\007s\213?\001R\n?\344H\006?Q\333\357><@\021?\r5%>J\253&?\020}\230>\311\253\016?Q\337\351>\341\237\001?\320\241y?!P|?I\263e?|\225\275?\350\346\301?\335ub?$p[?\014Jv?\304\304\034?\365:B?\2335r?3|\010?l\362N?\244\273L?\341=\245>>\311\245?\315\345W?d\027\220?z]\224?.\033\335>1\247O?\217-\215?%\326\r?2m\367>1\020\233>\370GO?\331^c=Pt\233?Mf[>Z\212[?q\253\310>\341v\017?\356\314\313>\364\237\234?\020\271\247?I.>?B\272\375?I\211@?\3441h?\036\221\234?:\013y?,\2736?\263mc?T@U?\341\355o?\243w\010?\226\266\024?\267\373\226?\\\331Y?W\274\257?\"R\223?[\355\014?\246KT?\241Qh?\013\214\367>l\343<?\3343\362>>\300_?f1h=\203\255^?Q+\r?;f\004?\333\317\266=\tGF?\373\003\\?\300\306\215?M\217??T\340\272?Um\253?\333\261\017?\332\331d?x\320\253?\237\2662?\372\014o?Z.\212?\020%\n?P\322p?\273\315W?\324=\003?\364~{?\357;\022?\277\341\221?&\371\220?\367\2348?\034\244_?\313\003K?\337\2031?3\006\325>\336\036\203>a\020\213>gK\010>\210\021\222?\'^#?\213bI?\324\025\261>\375\324r?\3774U?\341\rk?c\221\256?\221\016W?\002i\267?-\314\247?\362Kb?\037P.?\246\265\200?\007]Y?\225\'\232?\t/\211?a\211\231?\270][?\262r\031?\023!\217?z\024\213?R\367\240?\232\321Z?t\222\366>\316\227\206?\026\225i?\200\310z?X\342N?8v\270>a\265\244?\243\354\357>o\010_?\333\235_?\353\206z?\356C\244>\377\354)?i$x?\021\255Y?\3216a?\234Fo?\024\365\340?*\351\023?\216\346h?y\345\200?\3408>?\177\036V?\027\344K?\227\261\243>w-C?\353s\004?O\365C?b\272\261?\325\303P?\232\232\252?\301\216\224?n\255\007?\251\275\376>oMw?\376\014\257>\343\2678?\rK\200>\347I\002?{\263\376=\255.O?\025g\306>\272\026\037?\026\3042?\346Z\020?\013\\\021?\257R)?\341\236y?\034\323(?\177\325\307?|+\230?3*\231?\267\271:?\301P\363>\300-<?g\360\254?(5b?\215M\202?mVE?\007)@?\213\221\224?EA\204?\351\236\271?\212\3657?\240\035\024?\215\022\211?\242^.?\027\341D?\344\202d?\326\217O?\303\254\244?\034\352*?9\237O?\337\341\032?\335\330q?}-\006?\300\272\017?i\360T?d\250c?\203\366\206?M\224\220?\253\312\323?_\274i? .b?EN\212?\t\322)?\212\232U?\2514\205?d\261\204?\206\340\207?\331\344o?\315\237\004?\206\023\205?\316\204\037?\375}r?K\002\261?\356\371\362>L\032b?\355\357U?N\202,?\373\030H?\357\371\024?L\353R?Q\247\247>C\266E?\307j\315>\241/3?3DA?\354\007v?\271\207\205?a\214\204?\351\301O?\034St?\336h\200?[|\027?/\270\207?\304\355??\330xQ?6\352%?\334\365\264?\360kY?a\301\026?\247\274[?|\327C?\220\000&?f\265\234?\322Ns?\036\375J?\273\2717?\205nB?T\341\210?\276\337\234?Tg\232?\000\373\201?\223GK?\213wB?f_\\?;v\260?\231K\213?\216!\316>tc\037?\t\332V=\375Y.?\335\254N?\274\254\020?\266\021\270?\252\223\002?\352\311\212?\n\320+?\362\251\205?\020kS?\275$\262?\032\261R?\300\241#?\220(\316>M\035&?.4\264?\216\241\203?\266\351\342?\300\236\204=\365a/?\004\337\271>Xv\207?\004\232\352>f\n\022?\334\006\366>C\tG?)\315\207>\221p\244?_\375\345>\221\216\310>\264L<?P\016\310>\224J\\?w\372o?.\'\234?\010\203Q?G\300\253?jF\217?-Zm?^\250\231?\247\374`?\304\341\202?\024\334\213?i\355k?u\300\224?\227\017z?#\216U?/\333v?+BJ?\3029\200?\034\201\214?\000{\313>!\r\212?ixp?V\343\'?\255\262H?[\252\347>U\330G?\376\030\275>\205\341\206?b]Q?9\247\002?\222t\322>\225\327\377>\274\243k?P\206\213?\3319y?\204\233\212?\354\374\264?\271\212\252?~\253H?\2709U?\014;L?\360\325\366>nF\232?\307!z?\206\377\214?&}!?,\177\202>=\033}?r\3446?kD\216?\300\346\202?~\267\004?n\210j?V]\232?\324\3248?X/!?\037\342\320>\n\214\221?\262v\303>4\236n?\037\331\327>Gx;?>\257\020?\323)\377>\354\314l?t_!?\362\002\201?<\365y?\3327\300?\321\227\233?\271\317\212?\341\001\217?\372\315>?z\314\017?\347\265\212?\373\345w?W\210\260?Q\244\212?\274\364\"?\371\307v?A\221j?\313\232\265?\251\225\275?\023\352I>\327\r[?\307,<?\337\324[?\376\364*?\255f\004?\276\247\235?\235(\033?\374DP?\004\241Z?\260\246/?\335\367\001>\3571\312>\320C[?\333+X?\033\214\202?\367\2147?\321\"\271?-[\223?\236\354\202?\330;K?\000\005s?\257\2037?\004\261\230?\351\266d?\257\354\222?{4\264?M\316r?\246Ht?\013\354\005?\350 \253?u\362+?\340\273\014>\203n\177?\243\331\224?2fn?\341\006=?\365\370\304>\375\035x?\306\325\367>\216\204Z?A\231??a\301\037?\207\202!=\221W\005?w\353\212?\216\231N?\312\275\251?\357\1771?|\020\230?\276\233w?\225\350\216?\372\020\222?\305Qf?\035=\236>\033\006D?\340\247&?\321PF?\237\374\254?\360\3457?ls\333?\311\343\251>\0252i?\370\300q?C.j>\320\262<?Z\201\366>l\330\003?\200\003\023?C\360\350>\237\201,?p\2707=\007i\205?\033\346E?dD\344>\331V\010?5W\326>m)K?\377\2171?\303\334`?\025\201\241?\0224\362?\222\0133?\371\217U?$\253\340>\352Ve?\273\325\014?t00?1\r\024?G\325\375>\2770o?\016\201\n?\227\261\267?\313o4?x\245v?\3201#<\213\243\373>\341\300\220>\016\371Y?\350_\340>\211\354 ?5\266\226>\360i\233?\216\214\035?\314)\201?\305`P?VE\217?\006\025\312>\261\r\030?\003\234\001?\331\224\222?\233\374H?\215\021{?a\373\354?\322\267U?\221my?4\367\252?\2246]?\327\2778?\203%\205?fR0?\316\304e?-i\313>>&\037?\340\274\211?{\365J?\205\230\200?}\340\213?\351\r/?\240 \'?\322+i?\2563\007?\375\251\016?\214\237@>\363\357\000?pA:>\371\255m?s\234\025?\275G\020?"
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_1"
  input: "transformer/contract/conv1/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/contract/conv1/InstanceNorm/mul_1"
  input: "transformer/contract/conv1/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/contract/conv1/InstanceNorm/Sum_1"
  input: "transformer/contract/conv1/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/contract/conv1/InstanceNorm/ExpandDims_2"
  input: "transformer/contract/conv1/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/contract/conv1/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/contract/conv1/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/contract/conv1/convolution"
  input: "transformer/contract/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/contract/conv1/InstanceNorm/Reshape/shape"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/contract/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "*8\224\276\346\264\013\276\340\274/\276\360\023\026\276c\'\333>\356\277\006\2759\306e?u*\335>Km\327\275R\302m>\003Z\270\276X\020\246\274\243\273%?\264\325B>\261\021\261>#\271\315\275CO\225\276\270\354Z>t{\353\274\360\027\277>\010\331\273>m\272\330\276\223\234\254>\3209\247=%U\316\275\003c.\276\357D\250\276J\251n=\234\014\351\276\2640\203\276\346\343,\275\365\255\317\276\231P\265\276\010\373\211\276\270De\274\345\331\022\276#k[=Y\235\005<\254G\224>\022\247G=\036K\017\276\373 \373\276B\360o\276*\307\306\276\261\332d>x\007,\276\341\344\035>\\\020\007>\023jr\276\013\220\021\276\0228%=\254\354->\027\370\"\276\025)\330\275\003\300\003>\032\305\033>gu\330\275\224\321}\276L\236\230\275\"\353k=\310|\010\276\250s\360<\245\210\235\276\223\360\237\275\213\347\256\276\000\320\262\276\344\216\001\276\271<(\276\203\031\254=\205K\004\276gO;?\010AL\275%Y_=z\362\r=qw\224\276\360\264\223\276\376Y\'?[\264v\275\026\277\217\275\327\010\230=\3140\220\276\213M\242<\004\253B\276\347;\000>\003\t\225=\222S\020\277\317y\305<\360\245_\275\211~\345\2757\304\214\276\334\350\373\276\260\312\342\275\226\356?\276C\003!=N\264\310:\006}\200\276OaU>z\273\240>\347u:\276w+\303\276\331\371\357\276P\257`\276\243k\216>x\256\005\277\301\356\314\276R3\357\2756\0232\2769x\232>\274\246\272>\036H\004\277\322\317\246\276\273gW\276\246vr=\212V\261\276\033W\305\276\370\256=\276\307\240\002\277\027\344q\275<\331\021\277\252\364\202>\272q\216\276~8\232\276\374\254\331>\210\325\245\276\357k\230\276\250\217b\276\244a\003\277]\032\316=\356\330\225\276\354\323+\277]\017\351=\264\006\234\276\016zs=\200\304\201=5\026\357>\225I\345<}^.=}\257e\271\200\231\377\276\340x\266\276K/\226>\210\375\000\276\302\265\336\275U\226\245>c\030\360\276\311\005\346\275jO\t\276rO\030>\346\000y=\236D\344\276\271fH=<\201\331=\325\366\260\276\304\300\207\276\266N\316\276\257|\325\275\201\326\271\276\033\247\202>\341\277Q\276DRU\275\361\250\t\277E\0014\276q%\217>\362n\307\275\317\253\223\276X\217I>fEF?M\356H\276\003\265\240\275o\032\034=y\224\372\276\256\357\311\275\246\351\022?t\023l\275\001\216~\276\254\362\222>=:W\276\3310\005\276i9W\276\245q\234>\002\351\016\276\262\367\311\276\355\327K\276\013\362\245>\272#\256\276\272\225\273\274\327\3247\277\177\272{\276\216\021\205\276\251\177\221>*`\235>]\035\270=$\323\230\276\371\030\032\277fl\334\276\2109\376\276\333\230\227>\235\331\337\276*\'\225?\213}\251\275 \'\335=Y`\022\276\337T\236\276\243;\354<\244\347#?A\370\301\276\231\325.\276C|=\2763\2413\276L\353\212>\226\035\316<\031\\)?$X\271\276\304\316\324\276O\023f\276\261\366\314>p\236\240\276#@\335=\340\255,\277?\273\210\2762a\377\274b\247\013?7\315s>M\202\374\276\000\237\200\276\244\2342\277k2\224>\2033\272\27642\263\275I\345U\274\354!\034?m\023\203=\344\007\006\276Fm\327\276Tq\244\276\341\363\215\276@\321\311>@\001\275\275i\'\304\273\243l\234>-\247\361\274/\021\375\275?}\264=\362uH>\2107\371<F\257\235\276\302\177\366=\227\303\026>\215\307\274\274M<\016>?\3377\276\0228}\276\377gO\276\310*\343=\000+\233\275#\200C>Qc\311\276q\025\324\276a\301(=TrA\276\001\035\307\2750\003\250\275\006\357\275>\214\375)\276g\365\260\275\204\315\360\275\311\370\226\276\367\0133\277a?\360>\335\256R\276\363\377\317\275\315\013\024>\330\032\004\277\233\367@\274\036\363\001\275\242 \266=\212%`\276\207\226\330\276trd\276\271\223\236>\202\346\252\276\353\227\260\276\267$\306\276K\343\316\275\263\335\264\276\302`M\274\365\375\247\276s\356y\276\324\340\265\275\234/\366\276\231-\236>W\333\346=O\230N\276d6H>f!:?\014\325/>\232\004\264\276\361/]\276\266&\315\276H]\000>0`\"?\234\024\036\275\376\240\202\276Ne\033\276\027=P\276\017\231\003\277\211\313?\276\217+\315>\206&\020>@\306\321\276\230\251\213>\207vz\273\206\030\236\276\017\246\342\276vp\253\276\025\334\265\276\007q\307\276\264\360\275=\220s1>j\321Z\2768\343^\276q\177\010\2778P\234<T#|\275\227n\026?\365\014\267;~\224W?\222\330P\274\010W|\276\033$\200\274W\211\243\276\377p}\275\010\336v?\342\004?\276\350h8\274]l\307=\241\317s\276!\035\362=\205><\276\230\247\312>\264\311\212:2\203\004\277\375\332d>\247\230V>\323\363X\275\216n6\276=\355)\277t\026^\276\322\271\324\276\322\365r==\322!>\352Bv\276*\256\264\276A\262\353\276\276?\201=L\320\303>n\010\020=f;\312\275\222\202.?\017\361\256=gb\204\276\213\326L\275\205#\242\275TbZ\276\326\372\213>\023\302\000\276m\301\'\275V*l>T\353\315=\204\221\202\276\230\272U=\202\327\311>=)\221>!\332\256\276\330%+\276:% ?V\034\332\2766\215i\276\036s\n\277\322\342\372\275\327\364q\276\262\220\221=\007eY>9\260\342\275\032;\007\277D.r=<K\017\275\316\210\223\276\224\032>?\324VI>\261\237b?\021\335\326>\360>\254\275\007\326\363>p\005\206\276\223\177\270>\350\364F?\233\0330:\346\236\204\276v[\177\274\340\226N\275\311.X>\352gZ\276\0024\204>\342\025I>\177\313+\276=\214\013?%\222\326=\r\3730>\017\020\004\277w\245\005\277\244\356\345\2760\213\366\276\220\262\231\275\000\006/\275\362\233\244\276r\037M\276|m,\275\357;d\275\241\364f\276\375\213#> ]\275\267\303!!?\002\211\212>\230\242p\276O\352/\276=rb\276\343\316\313=JM\335>\017\220\355\275\256\"\035>\262w\204=\203\315K\276\267h*=.\004g>x\322S>\254\262\377<\027\177\341\276\236k~>\023\255\326>\325\007\036\276\210Nk\276X\242\214\276H\263\201<\'\335\227\276\324\244\002=\264\021p=,\277\037\276gA\332\276\256Z\005\277y\221n\275N\222\301\276\037\242d?\377\376\207\275K\250d?(\234\022?a\227\213=.\255\252>,M\264\276K\264\274\276\212T\177?@Bt\276\217\357\016\277]Q\324\276\263\366\243\275\271+\256=\341gM\275Q|\022?\311#\237=y\351\006\277$S\306>1\247j?\001!I<ZV\240=\213\027)\277\225\335B\276\310^\362\276sz\027>\326\204M>GaW\276\010\337\313\276R\303\330\276\221t\241\276oL\267\276\313\022\303\276\nkD\276\032\377\313>[]:\276\3003`\275\214\267\226\276F\2450\276y\236\316\276\366\323\374>nY\010\276\230\317\213=\033\302W\276GRs\276\315\032\000\275\377<\022\276\000\260\330=C\035\"\276>2\017\277\255\035\200\276)\336Q\276jl|\276\257\242c=\020d\001\275\216\200d=*\315\213\276=,\235\276\233\341c\276\027\"\222\276h\256\231\276\220\002\246\276\315\031\257\275\017\315\307\275\030\260\363<g\366v\275\026\365\"?\360}\007\276\247\243\361\275\254\020\027=\206\316\371\275\330\227e\276;\374(?\224\304\000\276(%\250\276\000\315\330\274F\023\203\276\325\017\245=O\"\177\276\t\033n=\323\275\320\275\211\304\004\277A\251\200\276@6\026>\t\032\205\276]\337{\275\224\335\201\276\361K\305\276\025\253\351\276\346Fp\275\350Q\231\276-~q\2751\2722\276`\345\305<\263\357\223\276I0\276=\225`~\276\030Q*\276>\037\220\275\217o\264\276)]\000>\013\016\'\276\214\2433\276\373\276\006\277(\t\212>M\371\362\275p\220\227\276@L\225\276\204\235\326\276\260e\243\276\204\r\204=\234|\017>\205\306\273\276=\003\247\274\266\306L\276\365\021\334>p;\206\275&2\340<;\357Y=D\356\362\275\347-}\276\0261P\276\026\271\240<^Nf\276q\223\345\276Tm\275\276\242\207\340=:\245\276\276\"$V>\206^#=\327nO?\354\377\236\275\377\264\220>Kw\376\276\337\3672\276\225R]\276\243\205\004?v\317L\276\n\010\363\275f^\322>\254P\036\276\344\024G\276\354\2441\276V\274\336>+\224\t\277\363\360v\276\224c\341\273\032\366\300>\305y\254\275\036\303D\276\342E\000\277\'q\204\276\324\310\222\275\363\255\344>\363\230\320=D\256\252\276\302<\271\275\266\021\035\277\271N\370>v\303\237\276\277\273\316\275\243\234\312>\251c*?\345\265\352\275K}w\276\323\336d>\301\325l\275\355\376\234=\025\322\241>\031 \235\276\n\2171\276\244e\276>O*]>2\301\365\274\306\237\373<\257\320\225>\337\377\204\276\312\200\324\276U&\212\276\342\326)\275\230\374\326\276\317iK\276\301\304\207\276\267u\030\276\362\271\200\273\216/t>M\320\267>\030*\200\276<\006\023\276f\276\234\276C!\002>#\353\227\275RD\027\276z\240^\2756\226Y?R\303B\275\355\311\263\276\227:\240\276\313\252\202\275L\226\317\274V\017D?\216\023\030\276d\223\200=4)\210\275\024\025\252\276[\013\034\276\034\021\374\275x\217f>\302d\207\275m\347\254\276wU\356\275?W{>S\213\033\276\221:\271\276\'\276\230\276C)v\275\325\\\246\276\316^(=\340g\235\276\312\352\213\276eN\210\276,\320>\276\256\242z\274\365k\t\277\330\325\267=X\264\n\276\221d\262>\200>\257=\242\241]\274UM\307\275}\246d\276R\331\010\277YK\277>\301\317C\276 G\270\274>\210 \275\026\333\234\276k\342\'>\245\n6<\221\242\347<#\225\246;9`\031\277\274\256\'=\314:\264=\006h\245\274lw\366\276D\2579\276=\250\277\274rK*\276!\217\322\274\334m\241\275r\215\212\276{\201\033\277u\006\357\276\273\202\017=\307(\235\276\365+R</\006\337\276\201\335??_H+\275\004\277\204>j\332\255\273\266\223\373\275_\264\224\276M\316*?o\002\030\276\023\"\223\275\331y\244\272\367B\270\276<\021\277<\324&B\274\21158>\220#\253\276m\2450\277\355\273\233\275\202!\300>\274\341G\274\021H\314\275\177Y\367\2760\032\351\275\327p\365\276\31773>\251\231\230\276\226\305y\276q:\304\276.\214\024\277_\356L?3\027\326\276\241\316,\275)\253\341>\264\315(?\033\214\200\276^\346\261>\263_\212\276S\213\025\276+\211\305\275\332$&?v\251\013\277$\327[\2779\246\214?\355\007j<\260z\352=\330J\251\276\266\251\334>\310\321\336\276\247\227\005\276\326x\\\276\357|\213=\020\212\360\276\221\251l=A\367\201\277Sz\036\277A\274\232=\236\201a?\010\272??\034N\224>\006\231\213\276\210U\"\277?\357\232\276i\206\320\276\356L\241\274Q\021:\276\200\315Z?\277\322\304=\326\215\205\276\342\250\010\277\210R\313\276\304\272\330\276\205iO?%\351#\275\214r\356>\007\030\336\275\340\367\215\2762?\030=G\024D\276\005]\207>\020T\312>6&\354\276\371\023\262;L1\324\274\223j/\276\317\031\026\276\231\235@\277\210\367[>\0274\026\274Y\335\316\275]\002\362>\252=\252\2767\r\227\276\243\274\031\277\352\344\033>h\030\326\275\253E\254\275\034\261+\274\340\007\221?\301\262\222\274\205\3215\276.\327\215=f\323z\276\330\375G\274Ye9?\214 \315\275k\307\032\275\026\202o>\277\211{\276\326\243!\276H\275\260>p\324\303>\202\250\037\274\017\211\213\276\377\324[\274\260\3172>S\346\000\276.D\223\275\204j7\277\257`\314\2765\366\331\276\340\267B>E|\350=w5\274\275"
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/contract/conv1/InstanceNorm/Reshape"
  input: "transformer/contract/conv1/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/contract/conv1/InstanceNorm/mul"
  input: "transformer/contract/conv1/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/contract/conv1/InstanceNorm/Sum"
  input: "transformer/contract/conv1/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/contract/conv1/InstanceNorm/ExpandDims"
  input: "transformer/contract/conv1/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/contract/conv1/InstanceNorm/moments/normalize/mean"
  input: "transformer/contract/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/contract/conv1/InstanceNorm/ExpandDims_1"
  input: "transformer/contract/conv1/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/contract/conv1/InstanceNorm/batchnorm/mul_1"
  input: "transformer/contract/conv1/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/Relu_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/Relu_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv1/Relu_eightbit_reshape_transformer/contract/conv1/InstanceNorm/batchnorm/add_1"
  op: "Reshape"
  input: "transformer/contract/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv1/Relu_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv1/Relu_eightbit_min_transformer/contract/conv1/InstanceNorm/batchnorm/add_1"
  op: "Min"
  input: "transformer/contract/conv1/Relu_eightbit_reshape_transformer/contract/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv1/Relu_eightbit_max_transformer/contract/conv1/InstanceNorm/batchnorm/add_1"
  op: "Max"
  input: "transformer/contract/conv1/Relu_eightbit_reshape_transformer/contract/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv1/Relu_eightbit_quantize_transformer/contract/conv1/InstanceNorm/batchnorm/add_1"
  op: "QuantizeV2"
  input: "transformer/contract/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv1/Relu_eightbit_min_transformer/contract/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv1/Relu_eightbit_max_transformer/contract/conv1/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv1/Relu_eightbit_quantized"
  op: "QuantizedRelu"
  input: "transformer/contract/conv1/Relu_eightbit_quantize_transformer/contract/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv1/Relu_eightbit_quantize_transformer/contract/conv1/InstanceNorm/batchnorm/add_1:1"
  input: "transformer/contract/conv1/Relu_eightbit_quantize_transformer/contract/conv1/InstanceNorm/batchnorm/add_1:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/contract/conv1/Relu"
  op: "Dequantize"
  input: "transformer/contract/conv1/Relu_eightbit_quantized"
  input: "transformer/contract/conv1/Relu_eightbit_quantized:1"
  input: "transformer/contract/conv1/Relu_eightbit_quantized:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/MirrorPad_1/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/MirrorPad_1"
  op: "MirrorPad"
  input: "transformer/contract/conv1/Relu"
  input: "transformer/contract/MirrorPad_1/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/contract/conv2/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\246\260\245\247\250\240\240\253\244\244\246\234\233\236\245\252\235\306\237\243\231\244\250\254\247\243\255\251\242\303\233\261\240\306\236\237\273\245\243\244\244\256\243\240\221\223\261\236\216\303\213\256\243\241\241\251\300\257\225\250\227\277\240\237\227\315\233\242\313\264\231\235\250\244\244\242\234\241\240\237\245\311\231\257\260\243\243\304\206\247\236\224\254\306\255\226\240\262\242\247\267\252\247\241\204\236\247\256\244\237\232\244\264\277\221\232\250\235\252\265\272\260\244\245\240\303\261\214\262\244\273\242\244\225\235\301\223\241\244\252\235\225\225\301\223\242\241\235\340r\265\242\233\274\265\234\226\232\306\234\235\310\236\266\334\301\201\235\242\250\262\224\252\240\223\234\233\270\217\241\261\244\252\301\221\245\237\260\240\273\260\243\177\263\231\307\267\312\302\206\202\334\272\273\276\241\240\211\270\265\210\332\216\317g\264\227\231\236\262\226\276\233\201\252\247\300\243\242\221\222\322\217\240\234\266\236\227\230\331\240\246\245\233\341\202\254\245\240\320\313\230\221\235\330\236\271\242\257\261\244\253\220\240\234\246\245\227\212\205\242\262\220\251\244\245\265\220\257\226\251\262\232\206\214\235\262\232\276\253\245\245\253\251\257\227\236\263\241\231\236\231\256\254\231\246\273\240\240\211\267\236\205\246\205\223\237\240\255\236\246\216\244\246\227\250\232\245\205\231\235\236\254\242\220\256\213\246\243\230\242\231\240\235\225\256\261\263\230\250\264\266\234\252\244\247\273\252\231\237\252\255\247\231\205\212\234\233\216\305\221\261\252\230\235\264\274\257\232\224\243\275\233\237\216\235\305\253\241\231\313\305\236\274\315\310\253\277\310\272\255\215\274\236\231\245\254\207\242\275\211|\305\222\217\244\263\241\250\234\241\227\230\257\241\242\235\254\235\226\222\264\227\242\235\230\324\217\251\236\235\252\276\226\232\231\300\233\247\245\301\246\245\217\232\276\245\242\244\320\232\232\226\273\243\253\237\234\302\221\255\257\234\304\305\256\231\244\273\242\221\311\231\251\314\266\225\232\236\254\250\225\243\242\223\232\227\313\223\251\251\240\241\307\216\242\232\253\252\316\257\230\236\255\246\247\254\253\241\244\237\241\241\237\233\233\233\244\236\321\230\252\242\237\240\265\261\255\246\265\242\324\246\246\264\247\277\254\251\241\254\264\234\247\246\246\235\234\244\312\224\247\262\237\271\177\270\245\235\272\230\261\231\243\277\226\234\225\241\243\245\263\255\244\231\262\227\245\255\260\237\240\276\257\255\311\235\243\242\256\250\263\231\222\264\254\230\222\214\261\236\263\255\260\207\242\206\265\247\260\252\205\237\232\206\244\221\212\237\260}z\261\260\224\265\247\257\231\244\257\230\245\244\244\237\235\242\250\246\252\242\240\232\234\241\230\260\220\267\234\244\257\217\240\240\245\236\247\241\244\275\252\252\223\307\224\267\315\254\224\234\255\257\271\242\242\251\232\225\236\301\223\230\250\247\247\263\206\243\244\233\253\300\253\235\217\266\226\225\307\312\260\235\236\231\230\257\262\255\234\231\260\274\256\273\246\235\240\321\222\227\246\243\261\305\247\221\240\315\240\237\320\271\244\247\253\241\256\235\236\235\252\234\237\307\224\261\260\245\245\306\234\252\241\224\253\303\255\230\247\255\245\241\250\237\237\250\241\243\246\232\234\240\245\252\235\305\240\243\232\244\246\247\246\244\254\253\246\305\234\261\242\304\231\233\270\244\240\240\247\260\245\235\213\221\260\233\216\301\213\251\245\242\240\252\273\255\227\256\226\273\244\235\234\310\234\243\313\262\225\234\254\246\237\241\232\240\232\236\244\300\231\256\256\245\245\300\200\246\237\225\247\273\260\217\241\260\237\254\264\250\250\242\202\243\254\256\241\244\232\245\264\272\224\233\247\235\244\260\275\257\244\254\242\302\261\220\255\243\276\246\246\226\241\304\227\245\246\260\234\230\235\306\224\246\244\234\346p\261\254\237\277\263\237\233\235\302\243\231\313\241\257\337\303\177\235\242\246\250\225\250\237\213\236\237\266\220\244\256\245\254\303\220\246\236\300\232\271\257\240\212\263\226\230\262\277\275\206\206\332\232\270\276\234\225\210\270\261\204\321\207\305z\261\221\223\234\274\224\275\222\204\250\247\302\243\250\220\230\327\217\237\241\266\236\233\234\334\242\251\253\235\344\204\246\252\237\325\312\231\232\237\322\243\271\245\260\260\247\255\227\237\242\251\252\231\214\206\242\264\224\254\253\246\263\216\254\234\246\263\224\211\220\241\254\236\272\252\253\244\256\253\264\231\242\265\241\236\235\233\256\257\231\250\277\241\236\215\263\243\204\251\207\241\237\237\253\236\250\214\242\255\227\251\232\245\213\230\236\235\255\240\225\255\213\243\245\243\243\232\251\241\232\257\260\242\233\245\256\262\232\250\246\252\271\247\227\234\253\257\253\227\204\212\231\231\215\301\224\261\247\226\237\262\270\254\232\230\244\270\233\232y}\254\261\272\235\234\264\253\235\221\240\273\223\243\255\314\247\231\237\273\237\251\232\241\275\221\233\245\266\305\314\226\234\250\271\255\237\254\253\250\253\237\257\243\247\242\243\225\234\235\244\255\234\262\244\231\246\237\237\244\252\240\247\253\246\256\252\245\246\242\300\234\243\215\221\307\223\242\242\266\235\227\222\276\230\244\240\244\343\201\250\246\244\273\305\217\237\234\276\233\253\246\245\216\253\264\213\234\217\224{\252\236\210\233\241\210\245\245\243\253\250\223\243\233\265\267\267~z\247\240\232\242\265\261\210\235\253\235\254\262\244\251\241~\245\254\261\241\247\230\245\267\272\226\232\244\235\242\254\271\257\247\261\247\274\261\221\246\245\304\247\247\230\246\315\226\245\254\266\237\234\236\312\226\245\247\234\355u\255\256\235\303\265\243\240\236\300\251\233\311\242\255\341\305\177\235\246\243\237\225\251\240\206\237\243\270\224\245\256\243\255\314\215\245\236\305\226\271\254\235\240\263\223\211\266\270\267\177\232\315\204\270\276\233\211\210\274\264\211\301\177\270\251\261\214\227\233\267\216\276\212\206\237\250\312\245\252\225\233\333\216\235\247\272\245\242\236\341\246\250\255\234\350\205\240\255\236\332\315\232\241\242\323\250\263\251\261\257\252\256\236\241\241\254\251\240\213\211\247\270\225\255\263\247\270\216\246\241\244\264\223\222\222\241\246\242\265\247\254\236\261\255\266\234\246\263\235\244\236\236\254\262\227\250\302\241\236\222\254\245\201\253\207\250\241\241\257\234\251\210\243\262\232\254\234\244\220\233\241\236\253\240\234\256\213\241\254\253\236\232\251\251\237\262\253\222\231\242\250\257\232\244\244\250\263\251\226\231\252\262\254\230\203\210\227\233\214\273\226\261\244\223\235\261\264\253\225\236\242\266\230\231m\261\273\227\264\240\320\274\177\342\310\302\276\330\276\257\251\234\316\224\221\256j\214\220\273\213\243\322\240\213\272\257\243\253\244\253\234\244\261\240\243\246\253\240\236\224\265\232\250\242\232\323\204\250\252\236\252\257\235\237\235\264\237\224\235\311\255\242\213\236\307\231\241\271\325\245\252\235\302\244\252\247\226\321\217\224\256\241\313\320\236\260\244\271\273\227\304\235\247\316\271\214\232\243\256\232\227\236\237\207\234\232\306\225\260\250\241\247\315\204\243\232\261\241\304\257\217\234\243\244\252\253\252\231\237\241\243\236\241\233\230\231\244\236\303\234\254\240\240\240\257\257\253\241\270\233\306\246\242\250\243\321\262\251\242\256\276\231\253\256\262\236\244\253\323\225\250\263\235\302\216\251\253\237\306\242\256\246\236\301\243\222\231\250\257\246\261\252\250\231\270\242\247\262\267\236\244\303\262\264\300\235\237\233\257\243\275\234\225\272\256\225\225\237\245\226\216\245\262\210\240\212\224s\243\256\203\226\237\221\241\242\247\232\246\241\257\210\251\257\304x\250\243\301\231\240\265\255\240\225\241\275\221\236\261\310\251\231\242\277\234\253\233\245\272\212\231\246\266\307\312\227\244\252\262\261\235\250\252\252\253\236\260\244\244\246\244\232\232\242\243\257\235\253\247\230\250\240\240\243\247\241\253\254\247\253\253\250\243\246\304\236\246\220\233\311\223\237\250\265\240\231\224\301\233\250\243\247\341|\246\252\241\275\274\223\247\240\270\241\264\237\241\231\246\264\216\233\226\215|o\263\246\235\270\255\241\231\235\303\225\225\313\242\254\323\276\177\237\242\251\252\223\255\237\220\234\230\267\221\237\260\245\247\274\220\250\236\301\236\267\255\250l\260\232\201\255\312\271\211\201\331\246\273\313\247\205\213\265\256\215\340\216\3265\256\206\236\233\271\224\272\225\222\252\246\277\243\241\222\221\314\216\240\234\260\231\227\227\322\247\247\244\242\331\202\253\246\241\314\304\232\225\236\327\230\274\244\255\246\246\254\224\236\235\246\241\225\221\211\235\257\232\251\243\255\262\220\255\227\250\261\231\210\222\236\260\222\275\250\247\242\254\254\255\225\236\267\242\225\232\234\261\253\236\247\271\245\240\213\271\236\205\250\200\236\240\240\256\224\247\216\241\247\233\254\234\243\212\235\234\232\253\241\222\252\214\245\250\233\241\231\244\240\231\256\260\264\232\246\266\260\234\254\241\251\266\245\233\236\250\255\250\231\206\214\232\234\212\304\220\256\246\230\240\262\277\257\231\224\243\275\234\242\207\234\304\251\235\230\315\303\205\310\312\307\270\312\301\265\253\217\277\241\230\241\227}\233\272\220}\306\225\216\253\256\237\246\230\237\225\233\255\235\236\233\252\241\233\212\261\237\237\236\237\316\215\241\237\233\254\274\223\235\231\301\227\243\241\277\236\243\222\232\263\240\242\247\306\235\235\221\264\262\251\241\243\264\215\250\257\232\277\276\255\232\247\272\246\216\307\233\253\303\262\226\234\237\257\246\231\244\242\222\232\225\306\226\243\251\237\242\301\207\242\233\261\252\311\256\236\241\252\244\245\254\251\235\242\240\240\237\240\231\233\234\242\233\312\230\247\244\237\241\262\264\253\243\267\237\320\246\244\263\245\303\253\247\240\252\262\227\255\247\240\233\240\242\306\236\246\264\244\261\177\265\246\236\270\222\266\241\244\276\221\231\221\234\230\237\264\251\246\223\254\217\243\257\253\231\236\276\245\245\312\243\246\244\251\247\267\235\214\261\251\244\212\220\253\234\251\240\251\205\241\217\271\260\253\252\207\250\226\202\232\243\202\231\266\177\234\217\247\251\317}\234\260\276\243\233\257\246\236\224\231\266\223\242\246\307\245\221\232\264\240\251\233\243\271\227\236\244\270\307\317\233\223\246\275\247\243\260\254\254\247\234\257\244\254\243\244\224\233\227\247\260\233\264\244\224\244\236\242\244\256\234\245\247\241\257\244\242\246\241\300\226\235\214\211\306\220\241\233\263\231\224\207\275\234\241\231\247\335\205\244\240\250\274\314\214\232\233\300\224\250\240\246\226\241\256\216\236\223\246\214\257\236\212\244\233\204\237\256\230\252\253\207\230\237\271\266\270}\225\260\270\252\261\232\234\256\277\223\241\237\253\214\234\212\236\215\234\256\243\254\254\253\227\236\260\226\221\263\250\206\246\301\217\247\303\247\236\267\244\244\247\251\256\237\257\233\240\235\252\246\264\231\220\255\235\257\257\236\250\255\265\225\262\260\227\237\261\262\240\274\242\235\253\243\241\241\233\216\244\245\251\230\236\234\227\243\230\243\245\242\254\262\256\237\221\254\246\243\242\276\242\250\235\251\273\240\252\235\255\237\230\225\306\231\254\247\243\257to\257\251\240\273\254\244\241\237\302\233\227\315\245\247\331\304\177\240\243\244\237\226\253\240\215\235\233\264\223\241\255\250\246\305\222\250\235\322\231\267\254\246z\254\2251\252\305\263\210\202\301n\266\313\235x\215\263\252\207\364\212\314Q\255\207\227\235\304\222\267\215\220\245\247\303\241\247\223\226\323\214\241\243\261\235\234\231\324\252\247\252\242\327\201\246\253\241\321\301\231\235\241\326\235\270\245\254\244\246\255\231\235\242\251\246\226\217\213\240\260\234\254\253\256\260\213\253\232\243\257\221\214\226\237\251\230\273\252\253\247\255\252\264\233\243\271\242\236\232\236\257\256\240\250\276\242\235\215\265\243\207\246\201\254\241\242\252\225\253\214\240\255\232\254\235\243\216\227\234\231\251\237\232\253\215\244\251\244\240\232\255\247\237\262\253\242\234\242\263\252\234\247\243\253\271\246\231\234\251\256\253\231\206\213\232\234\216\302\221\255\246\230\235\262\273\255\230\231\240\274\232\240p\247\301\251\246\231\316\302s\356\324\310\274\317\275\266\245\223\307\231\224\247q~\231\272\220\222\313\235\214\273\256\237\246\233\245\231\243\253\237\235\236\246\243\241\213\261\245\242\242\241\310\207\242\241\233\250\260\227\243\230\271\231\227\235\301\242\241\214\236\271\235\243\257\311\240\245\224\271\261\250\246\241\274\211\231\256\237\302\301\241\244\242\267\264\220\307\234\252\307\270\220\232\241\255\240\227\241\240\213\236\227\303\230\250\250\240\243\303\206\243\231\266\243\303\255\230\235\251\244\250\254\252\233\243\237\242\235\241\232\227\232\243\234\304\232\251\241\240\242\260\264\254\244\271\234\312\246\243\254\244\317\270\250\242\255\272\225\261\260\246\233\241\247\316\235\250\265\240\267\177\254\250\243\277\227\264\245\243\276\230\225\216\242\240\236\263\246\251\221\255\222\247\257\254\232\243\274\250\245\306\243\245\237\251\245\273\237\217\262\250\240\216\234\243\225~\232\251\205\237\217\246\202\242\250\205\233\225\205\226\246\227\226\256\224\236\212\253\252\310z\231\254\302\237\234\260\244\237\231\237\270\221\235\250\301\246\226\231\270\242\252\235\251\270\223\233\247\266\306\310\227\232\251\265\253\237\252\252\250\246\233\260\243\251\246\244\226\233\235\244\257\234\256\246\222\243\241\237\243\254\234\253\252\250\254\250\246\244\245\277\227\242\217\221\303\220\237\236\257\233\227\214\273\243\243\234\254\332|\245\250\245\270\303\220\240\234\273\227\263\232\240\205\240\256\214\232\231\223{\251\233\210\236\233\212\235\255\244\250\254\232\236\236\272\264\252y\222\252\264\253\256\235\236\250\274\226\242\246\246\212\235\217\236\213\237\262\247\266\265\251\230\243\265\224\222\261\246\210\245\272\225\244\277\253\236\272\250\246\247\246\255\233\263\235\237\233\254\251\262\241\224\253\237\255\265\235\250\255\273\227\256\257\226\243\260\262\237\275\242\232\252\246\240\234\230\215\243\242\255\231\230\232\230\242\224\250\246\242\256\261\261\234\215\255\244\234\237\306\247\253\235\253\277\232\253\243\261\237\240\231\315\233\254\255\237\266w\242\261\231\271\251\247\244\242\262\237\251\246\246\236\241\242\247\250\252\242\240\231\234\237\232\260\222\265\236\240\255\215\244\241\240\237\244\251\246\274\254\252\221\310\231\254\305\247\221\235\254\262\261\242\242\245\221\226\233\270\230\226\250\250\247\255\206\244\245\271\244\272\252\242\226\255\230\240\275\305\253\240\236\232\226\264\260\253\231\232\253\255\253\264\252\242\250\305\227\234\251\236\251\272\257\213\245\310\242\235\315\260\240\244\252\245\252\235\231\233\250\232\226\273\222\251\261\250\253\272\235\254\243\235\245\270\262\220\245\256\244\235\253\235\236\246\243\251\246\232\232\245\245\251\231\302\241\235\232\245\242\246\247\240\254\254\246\302\236\262\245\276\232\234\261\240\243\236\247\265\243\236\206\220\261\234\216\274\213\243\243\244\237\244\273\256\233\257\226\266\246\242\235\313\235\241\314\260\224\233\253\255\230\237\227\235\224\237\237\270\225\247\255\247\250\270}\251\241\240\232\266\262\216\233\247\237\255\254\242\250\243\177\251\257\261\243\250\232\245\267\266\232\230\242\235\234\251\272\260\250\266\250\270\260\230\244\246\310\250\244\226\245\313\222\247\257\256\235\237\235\305\242\247\252\235\337o\247\255\241\277\256\247\243\241\300\242\232\313\246\245\334\312~\236\246\240\226\231\254\242\207\237\241\267\227\250\254\246\246\320\216\246\240\326\223\266\254\242\225\246\215\030\250\301\255\205\225\250H\263\314\225q\211\263\251\212\371\177\273\213\260\212\231\234\270\215\267\201\222\236\250\312\243\247\224\233\326\212\237\251\262\236\244\233\333\256\251\256\237\332\177\237\253\236\325\302\235\245\243\324\245\265\252\257\247\250\255\237\242\243\255\250\235\221\217\241\267\236\260\263\255\257\211\245\241\242\262\220\230\230\243\246\235\264\247\260\243\257\255\266\234\244\273\243\242\232\240\257\263\237\250\300\241\237\220\256\247\205\252\204\262\243\236\254\225\256\212\245\265\234\256\236\243\223\236\243\235\251\240\237\256\213\240\255\254\233\234\261\254\242\270\250\223\235\244\255\246\233\246\245\253\264\250\231\232\246\262\253\232\202\212\230\232\213\274\225\257\245\227\235\257\270\254\226\242\242\267\233\237c\262\266\226\254\234\323\272i\354\276\276\312\334\266\257\252\236\321\222\217\251W\204\221\265\217\242\321\243\212\305\251\241\255\240\252\233\246\256\236\237\237\251\246\243\216\262\243\247\243\243\312\205\241\250\231\252\255\236\247\235\264\236\220\234\303\243\234\213\234\300\226\232\266\316\250\256\230\277\260\246\247\234\306\210\217\253\236\306\313\227\260\243\265\275\225\303\237\247\314\273\215\233\244\257\231\232\240\240\207\235\226\302\227\254\244\243\245\310\205\243\233\271\236\301\256\224\235\245\246\253\254\254\230\241\236\245\235\242\231\226\231\242\231\302\235\252\240\240\237\256\265\254\242\274\233\307\247\244\244\243\326\272\250\242\254\300\225\262\267\257\236\250\254\323\237\247\270\237\273\207\244\251\244\306\235\256\246\240\276\240\220\220\243\244\240\262\243\247\220\263\225\253\262\261\230\243\277\252\251\304\245\243\234\253\241\275\240\216\263\250\236\222\251\230\217s\227\254\205\234\224\213k\233\251\200\227\226\213\223\260\253\227\252\250\246\213\254\252\261v\222\237\300\233\241\261\245\244\234\237\270\220\231\253\304\245\230\234\276\242\256\235\254\266\213\232\254\267\305\307\230\236\253\261\254\240\247\254\250\247\233\256\245\245\252\244\231\235\241\243\260\231\252\250\222\250\240\236\237\252\240\253\256\250\247\251\252\240\247\303\232\246\217\231\304\216\235\244\261\237\233\220\300\245\250\243\254\330w\244\254\242\272\272\226\247\240\266\235\274\224\240\214\240\257\216\227\242\211|\245\231\203\251\232\214\235\262\264\246\257\252\245\244\273\262\230}\221\244\263\256\253\242\242\254\277\231\244\247\247\213\234\224\235\224\245\262\256\275\277\246\232\242\273\232\227\261\242\205\244\264\227\240\271\257\241\274\253\244\246\247\255\224\267\237\242\227\256\251\263\250\235\247\242\255\276\235\253\255\267\224\254\256\232\246\256\261\235\277\246\232\253\252\235\232\231\217\242\237\255\234\232\235\235\246\230\253\247\242\260\261\262\234\213\251\243\225\232\315\255\250\233\247\307\225\253\250\270\244\246\235\321\232\253\254\234\274~r\257\242\236\274\262\243\235\236\307\213\222\316\244\260\313\270\203\241\245\251\252\227\261\241\224\235\230\266\231\230\254\246\243\276\213\254\236\306\234\267\253\257`\272\234u\261\311\256\226\215\302\240\271\301\250s\224\260\255\231\264\205\311/\261\211\243\234\260\227\267\222\232\247\246\304\242\241\223\215\322\211\240\232\257\226\227\224\322\262\246\245\246\333\177\253\247\244\321\303\234\227\241\333\214\272\243\251\234\243\254\224\237\234\245\232\225\216\211\230\262\240\247\240\263\261\223\250\230\246\262\233\210\224\234\263\212\273\246\244\235\251\252\262\225\236\271\236\230\234\237\251\254\246\246\267\253\234\214\265\235\204\251\200\247\246\240\252\215\254\216\240\251\233\252\237\242\217\233\236\230\245\242\226\251\222\244\253\241\241\233\251\247\234\261\257\257\237\243\273\243\237\252\242\251\262\241\231\235\251\256\251\232\203\214\233\232\211\301\222\250\246\231\241\257\277\254\230\224\241\275\234\245x\241\310\250\230\231\313\304p\310\307\307\275\316\266\266\254\216\300\240\226\235\202y\225\266\230\211\305\225\214\264\250\240\246\231\237\226\231\262\232\230\223\247\237\232\205\265\246\237\237\242\314\213\235\234\233\265\303\220\243\232\302\217\233\245\303\237\243\225\226\277\230\231\243\305\232\236\212\274\267\253\236\246\267\211\241\255\237\303\305\256\236\250\300\245\213\302\233\254\274\252\230\232\242\257\247\232\245\240\220\232\222\301\231\237\250\240\237\273\202\244\231\257\246\300\255\243\240\256\244\251\254\246\235\244\243\244\241\242\225\227\234\244\226\304\227\240\242\240\241\256\265\254\245\264\232\313\247\243\252\244\303\244\243\240\250\265\217\255\241\242\234\242\233\307\246\245\256\251\257\177\255\244\236\273\225\265\242\242\301\214\225\220\234\224\236\267\246\245\213\241\207\251\256\251\221\237\274\240\237\307\244\242\247\245\237\267\242\211\254\251\247\207\223\246\234\272\230\250\214\240\231\271\276\250\251\212\264\221\204\223\265vn\244\255\227\270\254\252\243\241\263\230\245\247\251\236\235\242\246\247\251\247\244\230\235\240\231\261\223\264\240\240\253\216\237\236\243\234\244\246\246\267\252\250\215\301\226\260\265\240\227\235\255\261\266\246\247\245\226\230\226\273\231\223\245\250\242\250\200\243\244\262\246\272\253\252\222\256\231\237\277\301\255\236\234\236\224\270\261\252\231\227\245\254\247\253\251\243\246\300\220\236\247\241\251\273\260\215\240\311\243\236\303\251\237\246\255\252\257\242\234\233\250\234\225\301\220\245\257\251\253\270\233\253\243\231\241\273\256\225\247\260\244\243\251\234\237\246\243\251\247\240\231\240\250\254\225\303\237\233\230\246\244\244\247\244\251\247\242\275\233\260\242\271\230\236\254\233\245\237\250\270\243\240\211\214\265\237\207\270\217\241\243\247\236\243\301\255\233\251\223\257\246\243\232\313\236\243\304\252\226\234\256\253\234\243\236\235\233\237\234\271\230\244\257\245\245\267}\251\237\241\237\272\256\224\232\247\237\255\250\235\250\240\204\252\256\254\241\241\232\244\260\271\226\226\243\234\240\247\270\260\245\265\240\267\263\225\244\246\303\241\242\226\240\305\220\243\244\244\232\233\223\301\253\244\242\247\331o\251\250\240\274\257\246\245\240\305\223\223\316\247\247\324\302\201\240\246\243\234\226\260\241\217\240\233\267\232\235\254\245\241\310\215\252\236\332\227\270\253\253n\262\221\031\255\307\247\221\215\236Z\261\277\242e\220\253\251\224\325\203\301M\260\211\232\236\272\226\264\217\227\242\247\305\247\244\220\223\330\207\242\241\257\226\235\227\326\264\250\251\244\330|\243\253\243\323\303\235\235\243\327\224\270\246\251\234\242\255\231\240\242\246\234\226\213\214\232\263\245\252\252\264\257\215\246\235\240\262\225\216\231\240\252\215\267\246\256\243\252\253\262\232\237\277\241\236\232\240\255\255\245\250\273\250\233\217\257\242\206\252\177\263\245\241\251\215\260\212\241\253\232\252\237\244\225\233\240\231\244\240\240\247\222\243\254\254\236\237\260\252\243\264\256\237\241\241\270\241\234\255\245\255\264\242\232\235\247\262\252\233\202\215\232\234\212\277\223\251\246\232\236\256\274\253\230\235\241\275\234\244b\247\300\244\240\226\316\301`\351\314\305\305\322\265\266\252\225\312\224\224\240Zx\225\266\231\233\315\236\212\306\251\237\247\233\241\231\236\263\233\231\227\250\237\240\204\264\254\241\242\246\307\211\237\242\233\262\266\224\250\231\275\221\221\242\304\244\236\221\227\303\222\233\260\305\237\245\214\276\267\253\244\246\277\204\225\254\243\305\310\243\246\244\273\263\217\305\235\254\301\261\226\233\240\257\237\231\244\240\212\234\224\276\235\240\250\237\243\300\202\243\234\270\243\275\254\233\236\254\243\253\255\247\231\241\240\246\237\243\224\227\235\243\230\302\231\245\243\243\241\256\266\253\242\273\233\304\246\241\243\242\321\263\245\240\253\272\214\263\261\246\234\247\244\317\250\246\263\245\264\177\246\247\240\302\227\262\251\242\277\224\216\221\237\231\234\264\242\252\211\244\214\255\257\252\224\244\276\243\242\306\247\241\240\246\237\272\244\210\256\247\243\217\237\233\224\217\223\247\213\233\230\243\217\232\244\210\252\217\204\216\263\211\223\267\241\240\230\254\251\274}\211\253\303\237\243\260\252\244\233\236\271\212\227\253\277\237\226\230\271\250\255\235\246\267\223\235\253\275\312\312\234\230\255\270\243\240\251\254\253\243\227\260\243\253\254\246\226\236\234\246\262\231\252\250\217\244\236\237\236\254\232\252\250\245\247\246\245\235\244\300\226\240\217\216\313\213\231\233\255\230\230\206\301\252\243\233\260\334{\240\247\247\277\310\215\242\235\300\216\263\226\242\221\234\254\223\231\242\227\206\247\230\210\255\226\217\233\270\242\251\257\240\235\243\273\262\235\177\210\254\261\250\260\241\233\253\277\226\246\245\244\204\240\214\234\214\244\262\251\265\263\252\227\236\264\225\224\262\252\207\244\271\212\242\273\255\241\271\247\246\246\247\257\232\264\234\237\236\254\250\265\242\224\247\235\257\264\235\254\253\277\225\256\260\227\242\255\264\235\267\236\235\254\254\245\237\233\217\241\244\254\231\231\242\226\245\232\244\242\243\256\264\262\235\214\251\247\225\237\314\255\245\234\250\306\222\253\244\260\242\242\226\322\247\251\256\243\266s\232\255\233\300\257\242\253\241\261\241\247\245\247\235\241\242\247\250\252\247\244\232\233\240\231\262\222\265\237\241\253\216\241\237\240\236\243\251\247\267\252\246\217\303\230\250\274\245\224\234\253\261\256\244\246\247\222\227\232\271\240\223\245\250\246\253\200\244\242\303\243\270\253\246\226\245\230\246\270\301\254\242\231\240\224\267\255\247\230\230\244\246\247\256\251\244\250\274\224\241\253\237\245\261\265\211\242\306\243\234\304\250\236\244\253\256\256\236\230\233\244\233\223\267\220\244\257\252\250\265\234\255\245\237\235\261\263\222\242\260\244\236\252\237\235\244\242\252\251\235\230\241\251\251\226\277\243\231\234\246\242\247\246\241\252\252\243\271\233\260\245\273\230\234\254\234\243\235\253\272\242\234\206\216\262\236\212\270\217\237\244\250\237\241\274\252\232\256\223\257\250\246\236\313\237\241\311\252\225\234\255\257\227\237\231\235\224\236\235\265\227\241\255\246\251\270|\252\240\252\231\261\263\222\230\247\237\253\252\237\251\244\201\252\257\257\242\246\224\245\265\265\235\226\244\234\234\250\267\260\250\274\245\266\262\232\235\245\311\253\244\227\244\315\215\250\254\254\233\242\230\311\252\244\246\242\340l\242\254\236\302\254\251\251\241\300\237\226\311\251\247\333\312\202\241\246\236\221\231\261\243\211\240\242\266\235\247\251\245\243\323\214\253\236\334\224\266\247\247\205\250\210\000\255\313\244\220\234|1\254\276\227\\\216\252\245\223\377~\266\213\265\214\232\237\261\222\263\204\220\231\250\315\245\245\223\226\334\204\236\250\263\234\246\231\335\271\253\256\243\333{\234\253\242\334\303\235\246\242\327\235\264\252\260\243\247\257\240\244\237\253\237\233\220\222\240\272\244\255\262\261\260\210\242\241\240\263\223\231\236\241\247\226\262\246\263\247\253\252\266\234\240\301\245\241\235\244\255\263\244\251\277\244\234\220\252\244\204\252}\270\250\237\253\222\261\207\245\263\234\253\240\245\226\243\244\233\240\236\240\250\216\241\255\263\231\242\266\255\244\270\250\220\237\241\270\235\233\253\242\251\263\244\227\232\246\266\253\227~\211\230\233\211\275\223\253\245\230\233\260\267\253\227\243\240\275\231\244T\262\274\225\245\227\330\276]\336\262\301\324\343\254\261\261\234\333\214\221\240?|\217\263\230\246\325\250\207\320\242\241\252\240\246\234\244\266\231\227\235\251\242\247\211\266\254\244\244\250\307\206\235\246\232\260\263\236\254\234\267\230\211\235\306\247\231\214\226\314\213\220\266\313\244\256\223\311\265\250\247\241\303\200\217\251\246\313\322\227\265\244\266\275\222\303\240\251\311\265\220\231\245\261\230\232\242\241\207\234\224\300\234\245\245\241\246\310\177\243\233\300\235\274\255\227\235\251\243\255\256\250\227\241\235\245\235\244\224\226\233\242\226\302\232\246\240\241\241\257\265\255\241\276\230\303\247\244\235\237\330\272\242\241\252\301\213\266\267\255\237\254\250\326\251\245\265\237\271\201\235\247\245\307\234\252\254\241\276\237\211\221\241\237\236\271\241\252\210\246\220\261\264\254\222\246\277\245\246\311\245\237\226\247\230\273\245\214\261\246\242\230\253\216\222\202\221\254\215\231\234\213w\224\247\206\246\220\206\213\272\246\226\263\267\251\230\256\250\240y\206\236\272\234\246\263\256\247\237\240\273\210\225\254\277\235\225\235\273\245\260\234\254\265\215\236\255\273\312\310\234\240\257\263\245\237\240\256\254\244\232\257\245\250\260\246\230\233\240\246\260\231\247\254\214\250\240\233\233\253\235\254\251\251\243\251\252\230\250\305\232\244\217\225\314\212\230\241\260\233\235\213\304\254\247\237\261\332u\240\254\246\277\303\225\253\237\273\226\275\214\240\215\233\255\225\225\251\221\203\245\223\206\265\223\220\232\271\266\251\263\257\243\250\276\264\215\202\207\251\251\250\252\246\241\255\301\230\247\244\246\211\236\222\236\223\247\265\254\273\275\247\225\237\276\232\231\262\250\210\244\262\220\241\266\261\246\272\256\246\245\247\260\223\266\234\240\232\255\251\264\253\235\245\236\257\275\237\255\254\271\222\252\257\232\243\253\262\230\272\243\232\254\256\242\233\231\217\243\243\254\233\231\243\235\245\231\246\247\241\261\262\264\234\214\251\245\214\232\324\264\244\231\247\313\214\255\252\271\246\253\231\325\244\250\260\236\275w
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.75781190395
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.985171318054
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/convolution_eightbit_reshape_transformer/contract/MirrorPad_1"
  op: "Reshape"
  input: "transformer/contract/MirrorPad_1"
  input: "transformer/contract/conv2/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/convolution_eightbit_min_transformer/contract/MirrorPad_1"
  op: "Min"
  input: "transformer/contract/conv2/convolution_eightbit_reshape_transformer/contract/MirrorPad_1"
  input: "transformer/contract/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv2/convolution_eightbit_max_transformer/contract/MirrorPad_1"
  op: "Max"
  input: "transformer/contract/conv2/convolution_eightbit_reshape_transformer/contract/MirrorPad_1"
  input: "transformer/contract/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv2/convolution_eightbit_quantize_transformer/contract/MirrorPad_1"
  op: "QuantizeV2"
  input: "transformer/contract/MirrorPad_1"
  input: "transformer/contract/conv2/convolution_eightbit_min_transformer/contract/MirrorPad_1"
  input: "transformer/contract/conv2/convolution_eightbit_max_transformer/contract/MirrorPad_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv2/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/contract/conv2/convolution_eightbit_quantize_transformer/contract/MirrorPad_1"
  input: "transformer/contract/conv2/weights_quint8_const"
  input: "transformer/contract/conv2/convolution_eightbit_quantize_transformer/contract/MirrorPad_1:1"
  input: "transformer/contract/conv2/convolution_eightbit_quantize_transformer/contract/MirrorPad_1:2"
  input: "transformer/contract/conv2/weights_min"
  input: "transformer/contract/conv2/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/contract/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/contract/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/contract/conv2/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/contract/conv2/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/contract/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/contract/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/contract/conv2/convolution_eightbit_quantized_conv:2"
  input: "transformer/contract/conv2/convolution_eightbit_requant_range:0"
  input: "transformer/contract/conv2/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/contract/conv2/convolution"
  op: "Dequantize"
  input: "transformer/contract/conv2/convolution_eightbit_requantize"
  input: "transformer/contract/conv2/convolution_eightbit_requantize:1"
  input: "transformer/contract/conv2/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/contract/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/contract/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/contract/conv2/convolution"
  input: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/contract/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/contract/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/contract/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/contract/conv2/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/contract/conv2/InstanceNorm/moments/normalize/Mul"
  input: "transformer/contract/conv2/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/contract/conv2/InstanceNorm/moments/normalize/variance"
  input: "transformer/contract/conv2/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/contract/conv2/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1/shape"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "W2r?\013;\217?\241Qj?#\202\367?0\211#?\361A\306>?e\025?\222\3669?RI\215?\327\036\233?}\357\306?\204+\023?\025\2358?\3067 ?\350i\254?Q\3139?\224y\013?\327) ?I\246W?>$\212?\345>n?b_K?\236\037\253?\241\010\006?\245a\251?e\206\025?=\352p?$\313\315?\203\206.?\250\0041?\237\341\033?\263e]?\252\357\231?\010.\025?*\0206?Z\265c?\346\220\023? U\236>\260\304\201?r\300\200?xT\253?\346\236;?\023G\322?g26?\257]V?\014\347h?\225\250\212?4\317\227?\362\213\326>\003\021\037?7xK?\277\300\215?\024\'\202?\371\016U?i\263\241?\241\2146?\033\347\250?\304J\271?\363\217\212?\256\341c?\332\340\204?9\036\034?\257\306\270?\311\253@?\272:\271?\241$\220?\246\\\013?\321\225\354?\336\244S?2O\277>\212Y\020?\256\033\014?\372\235\222?^\203\234?\t\001\313?\'a\375>\0176\035?\036N\001?\304\343\262?\022\375F?\341\367\230>X\333\023?N\035V?+3\211?\340s=?\331l\216?\233\025\252?\242\036>?*S\311?\257\312\344>\023r<?\026\267\245?\210)l?\343$)?U\343\276>\277OP?N\022\250?0A\202?\035\372a?iy\200?\361\353e?u\245\205?\353\351x?\036\372\204?:Oa?\207\353Y??o\224?\336\211a?Ocd?\250\n\222?!NC?f\303\200?+\n0?v\361\211?\274\032\207?\375\330\204?9\021\203?E\361=?Y\304\310?\016B[?\3566@?l\235\223?OEQ?\241\343B?_O\204?\366_\214?-\202u?\210\'\201?o\233\254?\305\316\205?\017\300;?\223W\327?\231\304m?\'\302\253>\304\020(?Mm=?\233\315\205?T\303\244?y\230\246?\006u<?\034[\017?\311a5?\313\374\177?l\3039?p~!?\037\0058?\270\324\202?N:^?\301\227V?\247p\227?\317\336\304?B\315g?\377t\331?,\376I?\265\327D?\204&\254?#\277p?$\2551?\3177\006?B\3059?+\230\256?J\240\241?\275\240)?!A\357?|\315%?\021\300\300>uB\022?\306\1770?t\341\223?\312\273\262?t\033\227?)\325L?\315\004-?\365\037\"?\255^\217?\r.\353>X/\000?[f\"?\272ML?d6\233?z/\\?\205\265y?\2302\331?C\243=?\350\243\271?\272\3566?\355I??\362\326\266?\"3\'?\032\215(?>\236\340>\350\205\030?\222\245\205?\225]3?Q\366$?B\322\376?\033\211A?|\347\332>\035\233\332=\370\204\241>\302@\234?\302\250\253?\311\315\247?\360\256\021?vG\177?A\031-?\253\272\r@\315\246\010?]\344\212>-\000\336>oPA?\020\025s?L\203 ?Q\004\r?l\017\320?\373i\340>[\237\210?U\377O>\326\237\306>\335,\323?\336\376\302>\324\344\346>\315\275s=\244pZ?\245\200\214?\365N>?\326\200U?\215\223\241?\353\007P?\3369\010?\224\237d?\355d\212?~\324\240?\370x]?\026\312\264?\372\010)?\313\310\304>\353,9?\373\032\226?\267\002\223?\277\0261?3\005u?h\026\032?\257I(?KK\225?X\003\260?O\350e?\"?>?2\251#?\352qf?i-\214?,am?\231\272O?ont?KV\205?\246\364\n?\016\037\326?\270\001L?W\344\311>\235\361\340?\233\340c?\264\226??+#\024?\0044\026?>cn?{\215\223?\271{\240?Y\335g?\323\346\210?C+\036?\252\r\225?D\325D?\353.\276=f\3262?\331&\207?R\"\221?\"\200U?\300\302L?\322\263\306?\013\3369?s\003\334?\345\"??\003ad?\367\206\214?\332H\221?o\246V?\323$\006?L]$?\305\271N?\207\3545?_\203\004?\353n\021@\226\264%?`jL?\332\237S>\273D\360>GM\241?o\031\272?a\210\260?\341\376\032?\3737\353>\315\366\r>\362!o?\370\312[?2w\250>\026\375\005?\224\347G?\036\305\223?\326<\371>r1\240?\233O\026@MW\350>mn\222?\247d\022?\001xo?\315\255\242?o&\332>\377t\240>\320@\030?\363\034}?p7k?F\006\214?\216\347\007?m\177\346?\334\303}?1<\300>\236s\340>\033\'_?la\212?\002\302\235?\362\275\321?\376=\337>y&6?e5,?\037L\243?b\316+?\244\026\366>\030\305\373>\275[h?\201#\212?J\345\177?A~\227?\2239\317?\243\200\317>\306\375\247?\n\262i>1O\027?S\204\314?\231\242/?\274\250\"?\231\373\257>\302\030X?\334C\213?\226R9?>\0164?6\236\002@\366\321\034?]5\'?\267\213\257>\002\003^?Z\334\212?\225\027m?\034\244\303?\334\366-?2V_?b\035\251=\252^\335?@\215!?_\205\036?>>\362>n\300L?\230\256:?]M:?\245\365,?\253N\330?\013\262%?\220\317\301?\275\013\004?\267\377T?\216\310\247?\374eH?(f\007?\226\210G?7\371\277>\277\365t?12\222?ObN?2@\005@\210\2258?&E\362>\322m\004?\357wu?\241\014\220?lw\244?g3\227?:\232\001?\275\316\027?\305\212 ?\375Zh?\202\230I?\371\314\307>\270\013\374>\237\277\200?\344 w?\207\304O?\240*$?P(\264?\260\223\351>Z\216\277?\325!\r?\204\030u?<\r\305?\377\277(?k\"+?Y\343\357>/\245y?\324#\213?\247TY?t4A?\312\201\351?d\340l?\223\254\325>\210>#?\354\250s?\220\361\244?\3318\240?\035\267\305?\330D\273>\2027R?\"\234\037?<\351\251?\004\365_?\"W\367>\272:U?\210\367D?\032\032\211?\365#\226?f\311\234?\013\340\274?:\311+?@\027\226?~h+?\346\264h?\014\360y?\252\204!?\211\202`?\025\025y?8\027]?\331\2369?\013\021,?\322.\030?\3610\036@&G\207?P\230|>\300Ua=\207\031u?\031\340\233?zGw?}\261\233?\314\277\324>\375\347\362>h]\204>e?U?\322Y;?\323\020\005?\r\350\306>\327\\ ?\346\321K?w[<?<q\300=\335\004\345?\202\021\246>d\022\301?#w*>\215f\210?\245\354\235?\\Av?x\202\360>\2439\017?\314\250\022?I\357\230?\220\006N?\265\376<?\364>\302?k\2563?\010\260N?f\257\201>hF\212?\"2v?R\317\212?[\356\302?Bz\372>\245U\257?\256r\235?\320\264]?t\214]?\257#\321>(\2257?\030\331H?P\301x?\272-\215?\262%M?\3301\341?5uA?3\273S?<T\244?\036\rJ?\365\n\005?\\}a?r\263d?\311dr?\002\345\242?\010\324\241?\334n\211?\325nV?\022\005\000@^\212\007?wAO?\372\225\221>?\263z??\031\202?\261\032\214?rG\276?\344/^?\264\316}?\345?C?\237\nq?w\324w?\"\010\303>\354>\313>v\345u?\266\030l?\232\232\217?)\003]?\217E\357?Rt\030?\264\353\226??e\004?\026\351n?.\327\232?lh\034?\331\263\343>\226H\022?\261\000+?\316\004\252?\351\';?\253*\"?fi3?\375*,?R\2172?\244\277{?\206K2?\354z\210?\321\230Z?m\"m?\201\013+?6A\301?Vn\336?\331\351|?n\347,?>\006\252?W1^?\212\251\217?Q\310h?\210-D?_\2365?\307R\241?\243\345m?\211\3121?8\316]?\306\334u?\'\266\365>\244\337\300?\262\357`?\277\364\247?/\036\205?b\n\215?\322\223\021?\350H7?]\255\365?\250\'V?\335\207\310>p\374\254<\262\226\307>\320h\217?\243\374\273?\257\304\333?\017\225\"?\016\345\213?D\236\025?\230\215\205?3\205E?\017\273\020?Yp\325>\214\323a?o_\231?\245|J?d4F?\236\026\367?D\t>?$E\207?0\304\034?.\323\027?\216\010\336?\204\261\007?\373\276\331>Ig\251>\250h\235?\355\023\254?\232\371c?\'\2507?g\311\333??V\'?t\317&?ra\026?2\331C?t\310\210?p\231\220?\273(\300?\\\274g?\001\367\224?\270\360v?\213\365_?]\"M?,B\002?\n\\\026?{P\223?\224yv?Iho?\022\315\'?-\230\362?\246E+?\331\222\257?\016\364;?^H8?bfF?\257\372>?\254\306*?\335\023\021?\377\016\211?\304b\244?\274\036\202?ChO?\355v\325?7\362\022?\013\033\306>\'\216\302>\217\005R?\223\355s?e\301\222?%\035\324?\007\246W?*\201D?\025\034S?U\206\221?\366\006E?R\224\006?\360\302\020?\363\305\014?\025S\245?\253\273Q?[\030Z?B\026\327?\t\303<?\2174\254?\311\207F?h\226\024?\314\352\246?\200\223\200?\366\210O?O\'\t?\310\333<?M\005\352?\\\352G?\272p;?\016D\256?\243A7?\217:!?\274\004/?\331\356\036?\341&N?e\363\212?;\232\323?\017\033\'?\350\215u?\347\305L?W\310\222?\004\354<?\233b\004?\327\030\037?@:w?\323cy?\010\"@?^\027o?\263\306\310?\236\241K?Ny\320?N\232\220?e\353@?\324H\204?\002\352\210?\031\371\003?*I\374>\337\320M?]\360\253?9\344p?\\\001\021?R\363\325?\214\361_?s%\322>\356$\022?7\\S?51\216?\'\302\224?P\270\326?z\rM?\261R<?\366\221n?\275\260\243?\365H[?rR\230>-EZ?\001\362;?\352&\200?\272Z{?\243d\222?\356F\301?\010\243#?~N\266?VY\023?\254\007+?\353[\216?r\317X?x\347c?\245\237\021?\207\"2? :\222?~\353Y?\267\272e?\212\315\014@\243\026\250>\000\003\':\232\036\317>a\331>?p\005\240?\230\340w?x;Z?\354]\265>T\037\310>\305\334\036>P@-?\023\007B?\000\033\335>\3375\223?\036\'9?\212\3622?\207\374c?\377?\211?\"\250\200?\332\r\004?\303|\312?\333\374\276>ZB.?\033\267\264?\22069?\215\313\216?\364\362u>!\323\016?;_\033?\362Mj?\206o\337>\246!\000@\342\0010?\305\026\265>7\224\325>\260\3606?gG\206?\n\325\213?\214\275\277?q\025X>\236S[?\'\255\262>\325\242\234?\330J%?\001t*?:\247\023?\252oq?\317\010V?\"\0074?\236\367@?\271@\306?\225\252\331>N\263\316?gI\024?\\\377\025;\240\016\263?\217\357B?\275M#?\014\254\255>\246\353D?F\303\210?\273\305Q? ~\r?\277\371\007@t\226M?\252\031\270>Y\177\006?\234\212=?\367 \225?\232\251\240?\300\226\316?\224x;?g%P?\'v\210>Y\036\233??\362\'?\362\005R>\014\331\377>0^D?\014\254\212?\334p0?\326\332f?\2312\330?\003\345\361>\371Q\312?\304H\310>=h_?\316\244\302?\217\205\313>\206 \033?f\"\327>\\\341U?"
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_1"
  input: "transformer/contract/conv2/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/contract/conv2/InstanceNorm/mul_1"
  input: "transformer/contract/conv2/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/contract/conv2/InstanceNorm/Sum_1"
  input: "transformer/contract/conv2/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/contract/conv2/InstanceNorm/ExpandDims_2"
  input: "transformer/contract/conv2/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/contract/conv2/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/contract/conv2/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/contract/conv2/convolution"
  input: "transformer/contract/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/contract/conv2/InstanceNorm/Reshape/shape"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/contract/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\202i\323>n\030/\276\004\005\000?%\027\254>\373B\242\276\303(\n\276:\210\242\275\263\330n>\237`?\276\342\331=>\024\251\036?M8\260\276\266\201\370\275\356a\312\275\246\204\233>\032t\235>Jq\212\276\341\373\267\276\252\302\033=v\r\343=\035k\225>P\346\200\276\307m\323>s\344\034\277kf$?c\315o>a`9>[\273\245\275?g\022\276\325\2619\276>J\236\276v\2469\276b\345\301\275\225\004^>FC\305\275\214\214\022>\367D\235\274\3148H>\221\206\312\274L\345\250>c\024S\274\344P\203=CW\305>\264+\357\276\022w\203\275Z\226\006\275\212\016\243\276&\235d\274 z\341\276g\231\024>\035\034\240\276\233\177\257=L33\276\313t6=\332\240\271=+1m=V6Y=\314\000\233>\000\335l=P\240\001?\031\313\020\276p_?>y\374\322>\246\342T\276k\254\307>\223*\325=V7K\276V\260-?\375\223%\276\271\"\333\274\364\212b\273\247\313\004>x\357 \276b\027\306>\340\350\265>\253\236\307\276\314\254\277\275xz\204\275&\326\263>\222\355\335>\026?\371\276y\222d\276|[\037>E\020`>W0\005>\301k\375\275\207\010=>w=\204<\016\305\031?}\302w>\362!&\276{f\242>/V%\276@p\210\276\241\232\245=i\246\177\275\226\243\257=\n\242\366\275\341/c\276md\352=v\340\023\276\254\237\206\2754!\376\273rH\350\276\242$<\276\240\032)\276aX\212=!u\325\276\030w\226\275\275\312L=\035\260\231\276P,\201\276}\252\205\275\243\214r\275\321\373\231\275\203\023\234\276\252\003\341\276J\312<=\320\037\223=\245^O\275\303\035\221\276\336\357k\2752e\350\276V\364+\276\"\375I\276W\366@\276\213\317\201\275\377\255\216\276\372\226{\274t\226T\276\036hp\275s}\261>\025\273\277\276gbD>\245j\271\276\303\024\253>\005\316\231\275\\\314\235>\025\331\227>\322l9\276\341\004y\276<C\341\275\214|v\276\316\226\216>\013\215\237\276\360+\261>R^\200\276\\\345w=\010~\224>\037\017\034\276\203\177\315=\273\250\234=0\013\223>\343\354u>3E\014>\377%\266>\325$\010\276\257\242\247>\307\t \276[\331\202\2769\3663=@\343;>\371\r\016\276Z\321\317>\350\256\371\276\311rz\276\364\020\344\275z,P\2767\372Y<\332\240\304\275\315P\327=\307\0007\276n\375\272\274\341\337\001\275\032\"\205\276\306\313\270\276\014\"\345\275\361d\366\275B\276\215\276\024X/\276\201\321E\276\037\202\327\2738\003l>\346\033z=\034(H>\177\221=\274\246\244\311\276vC0>\014\237\244\2740\265\220=dLm\276\242\256\251=Q&{\276fX\000?N\202\243\276\367\253\377>\321\256\310>\275\242\351\276w\256\006\277\334\307<\277o\005\244<\030\336\003\275B\223\347>3\275&\277\3273D>N\\p>\372\374\230>G\037\224\276\370\236\262\276\247\364\272\276\301Y%<\350\006j\276\235\326\242\276\225\3026\276\371\242\030>\371K\036\277\026x\226\276\304@\n\277$VF\276%\026T\275A\222\352<n:$?\363\017&\277\363=\343\275N\177j=q\355\216>\302\323.\2760\376\265>\311\375\031??\352\251>2\231\312=C\317\325<\312\224\354>\365\033\363<G\242\232=\027\260\362\2767\355\260\276\000\365\360<\345\n\226\276\277=\303\2768f@\276\213\013\005?\225\035I\276\210\215`\275\363xL\276p\022\242>dF\315=\303\371\223>\272}\024\276\252B\212\276\372~\210\275\364\324,?n\003\037<n\034\025?\037\227\270\275C\006\201\276\341y\r?_|\210\276\315 \013\277\376\365\200>\024\257\203\276X\344\271\276\363\376\222\275\370`\240\276h\365\264\276\245\363c\276\331M\243>\227\002\202\275\n-\t\275\0064\216=p|\205\275\035f\354<\356\331\361\276/R\267\275\'\303\317>\211&\355\270\210\355>\276\2025\353<4R\217>4J\363\276\033nL>}\225\214=L\017\257\276\000\"\037\276&\037\004>\344\031\322\2748\264+>\374\361j\276\3433\020>4m\215\276\222\324\000>\341\266\326>2\320n\276\207\r\005>\261\341\000\277\214Ax>i\346\033>\033\013\221=\304\361\377<\332\2551\277]\373&\276#\007\243>\357J\351\276\036\271\267>:\337\361\276*\261X>]4g\276\016\352\243\275\\b\223=L\235\313\275\317C\234=k\266\332\276\253\023?=\323\377\260>d4(>V\242H\274\267\007\004\276 K5\276\225\007\001>*\371\270\276n\265%?\231d\214=D%\r\276$\246\215>\370;\311\276\236\024\267\276\222:\264\276\037\201\234>y\352\226\275\320\343k>K\374\302>n\203\031\277\273\264\004\276\023\225\245=v>d>\345J\261\275\302R\265\276\363oh\276C#\246\275\360 \374=\0024\224>\337\207\246>\233\300S>v\234\006\277\337\\\361>\312h\266\2756l,\276\210\334\032>\240U0\275\014\271?=u\n\233\275\245uY\276\2565\321>\216\214\277\274\361El\276\345A\362>l\035\333\276R\035\313\276\304\\\003>\023\223\003\276W\320>>\271}\212\274\347\365G?7\017\305\276\337\021\217>\366\240-\277\261\361\326>\333\301\017\276\243{\246\276\276\017\371\276\210Rm\275[\016[\274\343\207\267\276\r0\234\275\332\0039?\026\274.\277/\221\313=\202\002\234\275\016\230V\276<\210\313>u\372\225\275\257h\241\276\260\242\227\276]\345\020\276\224\0244?\024\204\222\275\026|\t?\233\026\370>\000\320\336\276R_\000\277\257i\027\276d\246\234=\217\231G\276\002\000\217>}\2109?\004\315\331\2761a\210\275\367\363T>$G\236>M\350\000\277\363\251}\275\352\241\315\2761}\227>_\030\213\2735\263\377>\266\031\264\276\376\214\353>\334\303\001\277\r4\026?\210\336\235\276\"\016\200\276RoO\276Hs\264\275\364\232\226\274?\243\263\276\214\022w\275Z\025\036\275v\260\237\276P\223\212=\345\245\315>+g\210\276\231\003H\274~k\006\276\001\354.\274\036\205\345=%j\210<\224\275\264>\263\342\233\276\266\267B\275\241\n0\276\325s\327=\026X\370\275\364,\204\276\263\320\365=K\214\262\276s\325\204\275\317\326\242=\362@\256=w\t\316>\023\347\006\275+\306\214>\206\367\273=\251\212\356<\333\231E>\2679`\275\320Du>\375\306\271>\350\217\207\275\0341o?\377\253\355>\273\177\267\276\355\224\367>K\272 \276\374G\017\277\365\224\244\276M\205\210><\2715?\366C\353>Ww\004?|Y\333\276@\373<>\3507;\276\306\033e?\200\227\327=\222\361\327\276\322K,\276\333ly\276!\001J>\025\356w\276\264\033\036\277=\010\205>\212uN\277\262\305\375>\273Xr\277\203*\025\277\217K\342\275e\034\227=\034\025\260>\266_\260\276\314\034\242=\366#]\275E\234[\276\"%E\273PgP>#\242\243\276>W|>?i\210\275\025\025\342\275\302\247\'\276Qx\000\2766\341N>\277\306\334\276\351\336\024<~u\227=\207\032e\276\010\013}\276\347\3571\276MP:\276.\335\202\276X\330\323\275\022\316\202\276\242\332\n\276\273\332\240<-\221c>\260>\210\275/5*\274\207\256J\276C4\272=9\226\211\275\327\241\315=}\323p=\"\3678\275b\023\224=\354\216\334=\301\313\230\276\320o\\>2Wi\276\016a\324\275\2528E\276P\022~\276\336\367\036>\363\275\211<c\361\323>\031\250\210\2769*\002=\226\2028>v\237\242>-\322\"\276P\375-\277\373\2612\277\304\024\264\275!QI\276\003\354\002\276D\223c\276s \270>\263\\\034\2776$L>Qv\007\277S\352\352\276\354\304\367\275\213\262\201\276\244\317\002\277\236\377\346\276!\241\023\276kx\345=\276\341\216\276\362=\346\276\034\312\202\276\312*\243\276\234\262\271\275\232\026\323>\337\273\324\276A1\263\275n\211\245\275\024\317=\276\317\227\001\277G\333\236=\006\210\004=\203\200\272\275B\355T\276\205F!>\245\234\207\276\0255\360<a\324i\275:\331\246\276\252\256Z\275\341(\234=\030\014\003\276\031\346\236\276\317\316R\276d\346{\276\330\250\235\275\311\351\310>\225[\034\2764F\t>b\'\301>\222cQ\276\014\302\357\274:\000\210\276\332p\325>lD\233=^\370\274\275\000\303\317\276+\345\262=\025\363h\275*\304\200>{\017\337>Vs\221>\313\231^>>\317c=\347\332\021\276\026\2373>k\303\312\2767\n\372\274\014\003\333\276\206\217\202\274Q_\250\275Y\332\240\276:\252\030>}\262\267>\216\371\335>Qq~>\026H\201\276\337&Z>\3661\335\275\360\273\345\275\022\316\244\276\021\356\250\274[\326\265=g\247\213\275)T\030>D\270\344==\367\215=y\243\355>\343,\254\276\206}\227\276\213\033\004>\311\022\231=v\344\330=\001\327\025\275\270\317\201\275\033\315\310=W\022\242\276Dk\254\276\270tm\276\376\027&\276\241\"\360\2766\014;\27519[\276\t\373\207\275\205a\211>\306P \276c\337\014\275\370\004_\276\360\333\264\276\356\024\243<\334\306@>\221\2258\273w\242p\276\242X\t\276q\307\264<\201\264X>\226\355\223\275x\021\333>n\374\223\276a\006\332\276mU\230\276s\214\025\276S\031(=h\373\267\275:\227\256>\000\006\200\276\327\215\016\2750\270\354\275\303\023\314\275\005\301\332\275\225\336\220\276\301\272\247\276\033\245\361\276^ w=\357R \276\254\263$\275\255\202\365=\372\254\007\277;9\360=[\237\032=?\364\357\275NM\212>\037T[\275x\230\217>\256\333F=\242\372\217\276\316\221\314>\304\356)>\217\324\014\276\330\211\207=I\253\220\276K\356\006\276\210\022\315\275\271^\344\274W\"\230\274\247:\314\274\210`G=\027\372\204\276\032\2272\276\374\271U\275K/\252\276r+B<\001~5\276e9\026\274\0269\362\275\257\310\266\275!}\035:\313\205\307<\313&\200=\010\325\256\276/%\303>\377$L>\354\246\344\273\200b\305\274C\225E\276&\300\030>\242B\277=Eg\366\275\346\213\013?a\333\030\276\031\220\366\276[\222\305>\027\\>\276\272\375\216\276\033[+\276\034bk\276\257a\267\275\200GK>9\355\360>\000\324\225\276\224\356\262=\275%\001\275H\224S=i\221 \276$\006\341\276a\365\010\276\034IT\276q|\347\273\202[[\276\263\354#>\212\273\362\275\177\n\234\276)\346\274>s\013\"\276>5\330\276\335Q\214<\336\rt\275\225\362]\274[&\274\275\241H\"\276\252\363\256<\333\3508?#\014\210\276)\232<?\2276\221>\227\361U\275\214\"\230\276\255a\013\276\3332\310\276lh\240?\363!Q?\267\245\"\277\2711\266\276\006\204\r\277\364\2170\276{\337.\275\3021\014\277l(y?\273x$\277\036\362\316=\326\376\243\276\203\217\212\276\355g^>|\264E\276v\356y>\003\240\254>*\234\002\277\204+\000\277\234\nF=\t\377\\?l`\360\2766\301\022\275\307E\274>\222\241\207\274C\357\314=9n\350>\366e\006\277\353\022\016\277\240\204\322\276\261E-?o\033P\276a,!>\310\003\217>\222\243\203\276UZ>\276g^{\276~t\233>j\270I>\013a\354\275\343\335\021>L\223\362\276\205\257\320=\252\333d?\336\355\266\276\273M\252>1V\315\275\nv\206?\2123\307>\027\224\271\274\224\215\021>\361V\260\276\0265\372=\310\005)>\227\371\220;^\324\303>.8\027\276h\000\355\276\203*\262>\367\343!\274\254\031$\277)\322==\320k\313\276\360c\256>k\336\034>\324\366\320>\0007\362\276\314\310$\275\202&\210=~\346\303\275;\360\251\276\310C\305\276=\365\257\276g\340\230\276\322\277\212\274:%\224\276\266uU\276\345(\007?\345\215\035\277\037\315\310=\016\203\217\276\355\343+\276\'j\333=3\316\213;\244\271\341=\277<\334\275\025\271U\276"
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/contract/conv2/InstanceNorm/Reshape"
  input: "transformer/contract/conv2/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/contract/conv2/InstanceNorm/mul"
  input: "transformer/contract/conv2/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/contract/conv2/InstanceNorm/Sum"
  input: "transformer/contract/conv2/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/contract/conv2/InstanceNorm/ExpandDims"
  input: "transformer/contract/conv2/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/contract/conv2/InstanceNorm/moments/normalize/mean"
  input: "transformer/contract/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/contract/conv2/InstanceNorm/ExpandDims_1"
  input: "transformer/contract/conv2/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/contract/conv2/InstanceNorm/batchnorm/mul_1"
  input: "transformer/contract/conv2/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/Relu_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/Relu_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv2/Relu_eightbit_reshape_transformer/contract/conv2/InstanceNorm/batchnorm/add_1"
  op: "Reshape"
  input: "transformer/contract/conv2/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv2/Relu_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv2/Relu_eightbit_min_transformer/contract/conv2/InstanceNorm/batchnorm/add_1"
  op: "Min"
  input: "transformer/contract/conv2/Relu_eightbit_reshape_transformer/contract/conv2/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv2/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv2/Relu_eightbit_max_transformer/contract/conv2/InstanceNorm/batchnorm/add_1"
  op: "Max"
  input: "transformer/contract/conv2/Relu_eightbit_reshape_transformer/contract/conv2/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv2/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv2/Relu_eightbit_quantize_transformer/contract/conv2/InstanceNorm/batchnorm/add_1"
  op: "QuantizeV2"
  input: "transformer/contract/conv2/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv2/Relu_eightbit_min_transformer/contract/conv2/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv2/Relu_eightbit_max_transformer/contract/conv2/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv2/Relu_eightbit_quantized"
  op: "QuantizedRelu"
  input: "transformer/contract/conv2/Relu_eightbit_quantize_transformer/contract/conv2/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv2/Relu_eightbit_quantize_transformer/contract/conv2/InstanceNorm/batchnorm/add_1:1"
  input: "transformer/contract/conv2/Relu_eightbit_quantize_transformer/contract/conv2/InstanceNorm/batchnorm/add_1:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/contract/conv2/Relu"
  op: "Dequantize"
  input: "transformer/contract/conv2/Relu_eightbit_quantized"
  input: "transformer/contract/conv2/Relu_eightbit_quantized:1"
  input: "transformer/contract/conv2/Relu_eightbit_quantized:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/MirrorPad_2/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/MirrorPad_2"
  op: "MirrorPad"
  input: "transformer/contract/conv2/Relu"
  input: "transformer/contract/MirrorPad_2/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/contract/conv3/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\245\220\243\273i\227\243\243\204\325}x\230\215\233{\267u\247s_\177\263\253\201|\177\255\257\262\224\244z\215\225|\241\252\216\252\234\200\211\240\234\245\261\217z\236y\265\243\244|~\241\314\265\236\236p\312\206\225\220\215\210}\217\211\222\200\231\241\232\211\214\227\235\233\226\224t\207\217\234\230\205\211\221\206\221\230\214\204\246\225\230\215\222M\225y\244\312\261\204|{\202\211\236\234\265\210\234|\251\266\245\233\237u}\266\237\225\203\213\233}\233\257\235\232\237y\206\243\236\254\265\224\215\227\204\260\242\244\214y\253\301\252\243\231\201\275\215\206\200\227\214\246\260\227\216\225\205\210\237\211\266\241\223\236|\224\235\225\250\232\212\232\272\257\217\236\220\270\211~u\247t\221\213\244\234\245\217\224l\216\223\264sr\250w\244\267\232zu\253\252\235\222\245\203\256\246\232\222\237\226\205\214\217\227\201\243\235\243\222\221\234\243\231\237\231c\213\201\241\225{|\206\203\240\233\211\204\226]\214\204\235\237\226\252\243\246\231\221\236z\210\221\204\206\201\236y\214\222\225\245s\270\240\205\211\201\212\212\201kVw~mfz\237\250zte\202|\213\222\247\261\233j\220\230\221\257\214k\201\251\241\226\234\222\224X~{\207v\235\231\241y\211o\201\205\224\303\240\246\233z\220\243\251\234\212gt\243\213\251\201\211\202z\211\232z\227\222\240\217\227\207\261\224\237\230\220\224\230\224\207\213\202\200\230\216x\250\230\235\214k\231\243g\226\206\215p\224\220\244\247\207\275\252\222\202\220\201\245\263\226\221l\236\270\230\201\244\222\245\254j\200\233R\212\227\247\216\251u\231\231\232\230\236{k\260\177\257\243\234ij\263\255\241\244\243o\255\265\244y\321m^\217\223\212\240\243\223\245\215\232\252\230\215\232\220\221m~\203\231\251\204||\223\212\216\225\241\231\222\231}\210\206\215\211\234\243\234\215\220\225\252\237\235\237q\217\224\235\226\220\205\222\207\232\241\206}y\201\246\201\221\241\217\240\244\201\227~\243\237\226\203l\245n\270\214\254yn\262\266\244\235\223z\254\264\204\207\231\202\254\253\236\242\241\202\226\232\221\235\237\225~\202\217\246\251\247\203y\243\305\272\242\223\201\256\213{z\220\177\221\221\223\227\240\224\245`\222\221\245o\210\247\230\224\221\242\202\177\246\251\230\245\225\217\230\245v\227\247i\216\256\252wp\230\210\230m\276|\231o\177^\235\201\233w\200\213\273\264r\205\205\227\215\222\231\226\232\202\212\216\227l\254\257\257\207\217\204\302\247\223\226J\226i\244\233t{\221t\221\226|m\210\204\224w\220\240\215\213\204\203\221\252\223\225b\247\205\222\205\211\251\211\224\205\211\274\231y\214\222\202\223\265\234\266\253u\227\271\273\230\377\214\221\244\243\244\204\266s\254x>\216\254\262\216\201\202\270\256\241\225\272\211\200\221\221\243\256\242\242\232\201\205\220\215\234\240\227\222y\217\253\253\247\221\177\247\263\246\241\232\213\253\212\236\257\324\233X}\216\231\207\302\244\261\216h\254\265\242\203\251wTu\235\247|\207\223\177\255\263\236\222\215\225\245\211\207\216\217\221z\240\216\251\211\244\223\256\226\235\214v\220\206\230\230v\203\220\177\242\226\201v\214\244\232\245\211\215\226\235\200\247\225\267s\252\223\272\244\207\233{\222\203\260\243s\205\221\207\254\245te\202\211\225\243\246\230\215\226\203w\232\235\226\322\274\220\246\203\220\231\251\247\233z\226\271\204\236\304\240\240\215q\201\246G\227\225\254\216\262}\225\251\220\215\220\214l\260\204\260\223\224fj\256\242\241\231\215u\242\256\204\213\231\205\254\257\234\234\244|\210\237\227\245\251\226{\217\203\255\247\251|u\241\300\263\241\232u\267\211\233\241\203\252\221\211\214\223v\246\227\234r\240\210\250\262\211\247f\205\211\266\264r\205\213\203\236\246zr{\245\226\221\212z\230{\204\217\213\243\214\255\231\233\235\226\267\207\274\252\227\215\222\214\212\200\301\236\216\233\213\224\221\240m\204\200\223\223\311\215t\230\210\221~\226\223\235\210\204}\235\221\222\200\205\230\253\246\242\247\177\205\230\210\226\240\247\254\232\212\214\233\225\235\311\210~\220\204\253\233\237\200\217\230\265\247\242\242{\303\212\212\214\215\202z\241\211\224\177\227\235\234\204\217\237\235\232\226\225s\203\211\224\231\205\210\220z\227\214\225\211\211\224\200\220\201\222cr\200\252\237\214\212\215\213\217\216\260\260\214\224y\241\221\267\242\203gh\241\212\212\215\201\233\204\221\235\255\232\241\205\205\235\224\244\305\215\216\210\202\250\237\230\216\216\244\254\242\242\226\205\272\224\220\206\240\215\227\245\240\220\230\215\204\224\200\237\233\220\230v\221\230\226\236\222\220\222\236\245\216\231\216\257\222\203w\234\212\215\217\244\220\224\223\235u\205\232\256s{\224\214\226\243\221{\212\246\242\241\216\240\200\253\237\202\220\240\207\205\233\227\220\177\242\225\245\215\221\246\244\220\240\230o\216\201\221\210\202\203\203\177\237\222\226\211\220i|\203\230\201\211\216\245\232\227\223\236\206v\227\215u\206\240\232{\244\244\255w\262\223\215\230\224\216\200\207un\200\262\203\211k\226\254\202mq\207}\215\206\272\236vw\205\235\211\240\212}\207\217\235\213\201\224~q{\277t\202s\211\222}\215\232\203\211\223\270\247\216r\207\213\217\255\232thg\217{\226|\206\217r\211\241\217\225~\234\217\235\207\250\227\237\230\216\220\230\213\205\211\232x\217\222\200\252\226\242\222~\213\261\200\227\253\237\214\201\223\246\240\202\251\236\221\210\214\200\222\234\226\216\203\216\257\236\215\254\225\236\254mx\225p\222\255\242\230\225}\241\241\214\223\232yp\230\202\235\220\224ct\245\257\244\235\231c\257\252\200v\225vi\225\214\211\200\231\220\235\207\270\251\233\224\234\223\214\212z\212\224\260\220lu\211\226\215\221\220\225\226\213{\233\211\211}\235\234\242\201\216\232\246\234\236\236v\213\222\222\207\215\211\215~\233\227\217~z\204\241\213\221\236\212\227\241\212\242\202\230\227\224\211o\234x\262\210\242n{\247\267\246\233\236y\251\261\215}\225\214\234\237\244\236\241\207\226\231\221\223\241\217\177{\214\242\243\241\211\217\233\261\254\240\215\210\245\215sy\212\215\223\234\232\224\223\230\241h\207\227\244u\210\233\231\214\216\235u\206\242\252\237\227\225\204\235\245\177\227\257g\214\253\243\216t\231\214\221j\253z\221o\217`\237}\225p\207\215\253\275\226\227{\216\236\211\227\232\216\204\224\223\212r\244\243\256\216\217\210\271\236\234\230X\234i\227\206|~\225b\224\220\206b\214\206\246\177\213\244\240\230\202\203\222\240\221\211x\244\214\210\213\200\236\215\233\235\200\253\237\213\235\237v\217\231\236\224\233xxx\216\236\327\226\226\246\222\216\205\226\222\246\220w|\247\250\233\216\222\220\252\250\254\267\222w\214\220\226\230\251\234\234\211\203\214|\220\251\216\216g\212\247\253\232\217\222\240\240\232\227\233\223\251\226\217\256\265\231g\223\211yp\256\232\271\216{\244\275\226\225\246\212ot\222\216\213\226\212n\244\250\240\212\211\222\251\201\205\222\221\215z\233\207\243\210\234\230\236\217\244\221\200\216\205\215\214x\177\216z\241\223\207n\222\233\243\215\222\211\241\223\213\251\217\263y\250\233\264\220\226\212\212\232\203\232\212{\213\220~\253\221{\177\227\203\264\234\222\244\275\255\221\211\242\224\212\243\315\215\242{\221\206\231\240\232\223\220\244\201\245\310\253\226\235n~\233r\232\265\237\234\230\201\231\254\211\220\220\220v\240\213\227{\213mq\235\235\235\227\202t\231\246\215\205\226\217\237\243\245\231\245\204\214\234\224\233\254\221\201\204\207\245\241\242\204\215\231\246\252\243\222~\261\217\223\233\210\231\224\214\207\206\206\241\217\220o\232\212\237\227\232\232|\220\201\233\230t\210\213|\234\225\177}\205\241\237\237}\233\236\212s\223\224\246\200\243\217\234\243\220\273t\241\242\245\221\213\224\224|\267\250\200\231\203\217{\213t\257}{\226\261\224l\222\237\225s\222\235\246\216\246m\227x\244\214\204{\242\254\253\234\220\210\234\216\223\215\264\253\245\220\215\230\213\223\344\205\211|\214\241\244\226\211\243\227\252\246\244\244\210\321\221\206\214\235\206\177\240\221\222|\226\234\262\215\241\230\264\225\241\220v\206\227\216\235\210\204\224\210\240\213\216\214\216\223o\234\225\277\324\245~\267\215\221\252\373\237\216}\264\215\205\221\267xp\312\241\177\201\202\202\177\234\227\201\233\203\221\213\267\230\260\212\206\225\212\234\331\211\222v\206\246\247\217\216\235\244\247\245\242\235\221\304\234\222\201\233\211\221\223\227\206\245\223~\216g\213\227\221\201p{\230\237\220\202\217\223\213\250\222\223\202\275\234\207\201\232\242\200\223\242\236\203\205\243w\224\233\247w\204\230\213\223u\233\177\230\232\226\217\230\236v\246\227|\220\253\177\202\243\251\216r\237\225\311\222\247\235\301\213\246\215y\224\214\206\206\211}\202\177\245\211\206\204\233rbu\250\211\245p\250\223\231\226\236\242z\225\232k\245\233\267r\257\256\270\202\273\210\212\245\233\215\213\234\213\230n\232\252\274n\212\240\211t~\231\200\203\235\237\215\211\212|\265\217\232x\217\245\177\224\205\214\222|\234\200\307\317\266x\233\200\207\245\304\223\206~\304r\202g\276b\234\274\242a\217\177oo\235\207\216\233\177\200\227\245\240v\230\207\263\231\252\230\257\214\234\200\235\247\226\221\264{\213\227\224\266\224\236\220z\216\302\217\224\230\215\277{\221\231\226\215\213\236\230{\234a\233\221\251\205\204\212\244\236\251\261x\235\254mu\220\227\213\247\247\275\213\200\246\241\226\215\233\203n\241m\235|\250_\205\234\242\220\254\235Q\236\242\200q`\220j\243\256\235i\213\230\215\221\305\210\222\231\242\213\211i\225\204\212\262\217n}\216\221o\210\213\230\244\211y\241\225\205s\233\240\272\210\243\225\264\224\241\226\206\222\233\205\206\221\210\214\203\237\215\205}z\210\236\226\223\230\211\236\240\211\230\207\236\217\224\206m\234u\256\214\242d{\234\255\245\243\246q\252\243\232{\216\214\236\222\260\227\255\207\224\223\211\212\250\215\212s\217\235\250\227\216\243\231\255\255\242\212\221\254\227u{\206\235\232\225\240\234\210\225\216s\217\243\233y\210\243\211\221\215\245p\214\243\243\232\232\235\200\221\242\200\235\247y\211\230t\224y\217\231\203]pt\220a\217X\242\212\212s\203\214\247\306\237\224k\217\242\205\226\250\211\203\246\242\206r\242\243\307\216\237\207\305\227\240\223c\243q\222\207\205~\225c\230\221\205k\216\200\251\210\207\217\232\243\204\211\220\224\215o\203\242\213\203\213\206\251\216\237\236\206\233\234\232\236\233~\234\223\234{\202{\275\205_\216\246\234\210\236\252x{\235\220\304\226\210a\252\222\257\221\210m\227\261\255\244\230p\213\213\226\213\241\207\253\212\200\214`\202\247\213\214_\205\242\257\220\222\240\234\234\241\232\233\226\255\233\210\242\224\220}\274\250wb\236\231\276\220\245\234\300\221\235\231\234_\203\205s\225\243\211l\236\237\220\216\205\226\262}\201\224\227\213~\223\215\262\213\240\226\251\206\245\214\206\226\214\203\207}\201\217{\241\215\204q\215\235\264\177\221\233\241\200\222\236\221\312t\255\224\303~\236~\210\234\201\206wz\205\226\203\252\214\206\206\231\215\311\235\210m\243\246\244\231\255\224l{\254\221\216m\213\211\255\217\230\233\215\227\220\247\275\251\246\264yy\221\236\211\275\254\302\217|\240\242\233\226\214\220x\245|\216[\243u\212\237\227\212\245\201n\210\234\230\202\222\222\237\223\260\223\256\211\207\226\217\223\270\210\212w\213\237\246\231\213\240\227\240\255\243\221\211\274\227\210\227\230\210\220\240\216~\201\225\226\236m\240\210\245\211\236\222x\221{\211\203y\204\213u\230\215\207\200}\226\235\245u\227\215\267u\227\226\234\221\247\206\242\225\257\224v\226\276\234\213\206\220\220\227\254\240y\245\223\207x\235}\221\267\217\221\302\203|\203\237\241q\231|\212\211{\205\241\233\235\210|\231\226\250\212\243{\214\225\207\224\243z\253\230\216\206\234\236\237\243\215\177\251{\251\223\237\207\204\242\254\250\231\255w\264\211\230\214\220\213\177\215\220\231u\216\246\225\223\226\236\224\237\215\232p\202\230\236\241\177z\212\207\213\233\215y\242\236T\234\244J\272g\234\224\301\211j\216|\230\235}\250\241\277\234\252\302t\232\237\202s\262j\226\206\215\226\215\216\246\210\241\232\213\200\233\240\242\251\227\221\236\206\241\222\237\225\203\247\253\227\234\250\212\264\211\212\201\225\235\237\241\201\227\230\220{\231\205\262\227\223\245}\224\234\220\244\241\216\232\242\241\225\242\233\262\212\207\177\247\200\223\204\226\252\235\234\226u\225\230\264\201\202\236\217\221\256\231\220\220\233\231\243\223\254\213\257\237\233\224\224\225\213\205\235\224z\220\250\225\223\221\241\223\236\215\246`\207\207\242\243sp\177\201\222\236\204~\215[M\213\236\223\222\207\237\246\213\220\203\217m\230}\215x\241\226\212\215\213\235\177\274\217m\206s\207\214}yg\203\222czv\222\244z\226t\207\202\225\207\257\257jb\220\263\215\207\203|\237\232\246\226\221\233ra\221~\234\202\231z\253\211\226\200\210\225\215\254\234\267\241\210\220\266\207\216\220\207\221\223\200\252{\201\177z\220\224\201\243\206\223\213\212\236\263\226\221\224\212\216\227\216\207\202\226\213\210\215\214\247\222\237\205s\206\273\200\220\216}\202\205\230\217\241\223\253\245\217\217\215\212\214\231\214\226\215\242\257\231\200\250\234\256\241o|\233b\221\225\226\241\241\220\232\230\241\235\244|}\246\222\242\237\232\203\217\243\245\243\247\256\200\254\247\237uv}^\211\227\210\221\235\235\247~\270\245\251\214\210\220\251\237\213\215\242\214~v\202\206\212q\207\241\227\214\232\204\202\226\216\210\224\243\222\222\227\236\231\246\222\247z\221\230\234\233\215|\211\215\225\240\200\204\210\213\262\214\223\225\221\253\230\222\212\211\245\251\223\211\213\237\222\236\207\243\227\223\256\264\240\221\220\230\262\252\204\210\231\210\232\243\210\245\234\225\217\225\227\226\220\227\212\215\214\233\234\243\220\201\236\256\255\231\234\215\243\205r\200\210\200\225\215\233\244\237\230\256i\222\221\242~\206\232\233\231\201\244\212\221\217\231\240\254\227\221\231\237\204\226\274\233\222\222\233\210|\217o\217\214\264\200\226\227\207\202\202\200\220\207\210\251\245\240ju\212\302\205\225\224\215\226\212\210\237\215o\230\266\237\212\223\213\257\250\204\235I\237l\245\241mw\211n\206\230{k\213}\236\222\200\232\201\205\177\215\207\245\235\241b\250\221\224\221\203\224|\226\213\216\240\226u\241\224\235\213\244\222t\237\207\210\315\227\230\351\221\226\205\242\237\211\237\201\220zm\241\252\244\236\222\206\221x\261\205\260\213v\217\234\226\237\215\245\227\220\202\212\215\223\236\223\232w\222\240\236\245\242\213\246\251\242\233\236\230\245\211\253\276\212\227__\254\202\220\245\267\271{\206\261\267\231t\243\206v\224\230\255|\217\207w\242\265v\223\222\224\246\217\212\203\234\214\200\224\215\234\212\244\226\234\226\222\222x\213|\234\235y~\207\204\231\226\204z\222\235\232\244\222\213\233\230|\233\234\242{\242\227\240\242\206\221z\221\213\255\237y\203\211\211\250\251x_{z\265\263\225\254r\234\201\231\236\227\237\301\250\220\246\242\213\226\203\227\246}\251\240\215\231\342\252\224\232|\205\235^\224\230\241\234\250\220\222\254\236\221\234\221\210\244\234\246\227\222}\213\236\230\243\234\236\214\237\242\210\215\233\216\236\247\206\236\236\224\213\231\232\237\227\232\211\227\211\240\231\252\214\177\243\255\247\235\243\203\257\212\232\231\203\251\230\216\232\221y\223\227\213o\231\206\230\251\205\236h\202\214\262\255r\201\200\204\220\245|m}\215\235\222\202\231\232\203\202\222\245\235\211\237\226\226\222\210\244\214\235\237\230\226|\205\223\232\311\236\201\224v\212h\215}\177\224\210\236\230\217s\205}\236u\177\243{\234\232\207\214\217\243\201~\202\221\231\226\243\202\207\231\223\212\230\223\251\224\231\220\225\225\244\303\213\203\226\207\237\222\233\215\224\227\227\237\233\264\177\247\215\210\212\223\201}\241\211\227{\220\255\225\224\210\242\222\227\216\227v\200\226\217\231\200}\213\206\216\211\222z\204\235i\217\220\252:z\204]\304\206gA\227\224|\234\234\250\220\240\231\205r\235\214\206k\203_y\215\210\234\224\204\227\235\231\230\227\202\232\226\251\303\224\220\215\211\230\225\231\226\226\240\230\221\232\252\221\241\217\225\205\235\233\222\217\237\216\232\225y\216\200\262\234\221\234n\223\216\224\236\231\223\227\210\225\217\237\226\236\214\213\203\243\222\215\200\226\213\225\237\244|\214\231\252\177\203\207\235\210\234\214\213\232\226\224\251\216\240\211\253\233\212\217\230\207\213\230\224\213\202\223\244\224\221\201\257\220\226\221\244l\207\215\221\221w|~\204\224\224\216\203\211dH\222\235\206\204s\235\220y\221\205uj\233\215\212\201\243\256x\242\233\242\206\265\207p\225z\206\202\222\232}|\270x\215x\215\270\200\220\205\213\203\220\200\301\214U_u\255\214z~\210\240\202\245\203z\242\206a\200\305I\211ya\260\204\206e\221\221t\251\246\226j\214z\212\206\214{\204\202lz\221x\204\214q\212\234\225\226\200\234\215\217\236\257\225\221\217\206\211\220\223\203w\235\207\202\220\216\250\211\237\202\204\201\312\215\214\232\231\204|\234\227\235\231\260\225\216\224\202\213w\210\213\222\225\235\254\233\213\247\240\245\242vx\235\200\221\224\202\220\225\216\243\237\217\216\237\201q\215\212\221\207\212o\216\226\246\245\242\242l\247\244~kv|b\226v\207{\212\217\241l\222\266\244\204\212\220\240\260\205\211\221\203zo\177\206\204v~\223\224\221\212\200\220\207\206\207\226\250\220\212\213\242\225\235\216\246}\222\232\215\216\205\177\206\210\231\222\205x\211\223\263\220\216\223\222\230\232\224\230\214\243\246\217\215\214\226\226\224\203\224\217\233\246\257\242\217\233\226\253\245\216\203\224\217\221\230\223\235\227\232\222\226\225\231\225\224\207~\213\224\236\236\225\225\225\233\244\226\226\222\220\211j\200\214\221\220\231\210\216\226\220\266o\202\201\241~\207\221\230\215v\227{\215\204\233\246\231\214\201\227\225\231\217\300\221\212\213\270\232~\240j\210\234\336z\214\225\210zx\210\220{\224\262\227\235\204\202\215\261\225\217\217\224\216\215\231\225\210|\222\266\232\211\206\216\252\240\215\233[\240p\223\214ny\211]\215\217\200W\222\200\250\223}\226\237\216\207\226\217\235\235\270u\245\235\211\227r\221\204\236\236\225\237\233\210\260\241\226\214\206\223W\240\207xym\227\214\237\225\204g\221\211\207\252\203\230\237\222\241\253\233\226\223nw\253\215\256\222r\214\233\215\211\240\223\227\234\203\210\201\222\240\215\221d\222\226\243\230\237\235\231\223\227\222\235\236\217\221\225\277z\220n\200\200m{\207\273\264tj\264\300\210\202\236\230\203\223\211\204\205\230\203o\240\232y\201\223\216\247\206\206\207\225\214\206\220\216\224\206\230\231\223\217\227\225\200\214\177\213\223z\177\210\201\233\221\205j\230\223\236\216\221\212\245\216\207\237\225\233\177\235\240\233\220\214\210\200\225\210\231\211\177\211\212}\252\232{p\221u\301\245\204\252\266\255\224\265\253\223\230\320\274\216\252\204\232y\215\233\246\221\253\225\217\242\323\263\201\247w}\233{\223\240\207\225\230\215\222\250\216\211\231\217}\223\240\212\177\210v\213\223\223\237\230\221\204\231\240\217\213\227\231\221\232\221\225\232\231\221\234\231\244\231\225\215\205\215\224\230\241\224\224\226\217\236\233\242\212\234\215\222\221\206\226\226\217\221\205\207\216\231\201o\215\217\220\222\222\224u\211\177\233\224r\204\204z\223\230\177t\200\215\235\230t\242\231\203|\226\242\234{\224\206\225\222\202\245v}\217\233\215|\214\237\216\255\242\177\221o\202p\207{\247}|\224z\271f}\202\241j\211\235\225\225\260g\211\200\250\212x\\\212\233\232\216\217\216\232\227\207\206\254\232\235\242\220\223\206\240\360\213\214y\216\226\247\227\217\245\221\227\245\232\266\213\256\223\207\215\235\212|\240\211\230\203\220\244\252\237\223\225\246\222\231\216y\177\245\207\224|}\214\220\221\202\211o\205\222\240\225\220\316r\324\203\220\253\211\215\235\227\226o\317{\206\214\322n3\226\234\200\225m_\202\205\234\210\234\225\211\204\262\215\250\242\205\222\216\251\341\223\220v\215\224\253\222\225\237\240\232\240\232\260\227\251\234\221\202\231\217\220\205\243\200\243\240t\210r\257\230\217\211k\205\221\255\224\214\234\232\205\234\215\235\222\250\242\220\213\242\250\177\177\230\224\214\231\244z\224\227\237~\207\211\221\210t\222\213\233\227\217\234\232\237~\246\220\202\223\242\204\201\242\226\231z\222\235\263\234\214\233\252\215\234\230r\212\232\210\210zy\201\212\227\210\200l\224nS\212\250\227\236e\227\221w\220\215\211o\231\227\200\237\230\306i\252\241\255\213\264{p\232~\210\224\254\245\232Y\177\240\257|\217\245\211\213\214\226\204\210\231\246qznx\246\216pr\212\241}\235z\207\241\241\216l\242\221\276~\215\224\213\235\226\222\215m\311lxn\266aY\234\223b\230\200S\202\221\212\217\233\202u\214\246\231\203\232\201\242\251\262\224\241\204\222|\220\246\216\177\241\206\177\231\227\253\213\221\201\203\206\307\221\210g\214\235\201\227\201\232\226\240\227\221\205\207o\211|\241\207\220\247\242\233\244\246\214\242\257uw\233\240\202{\207\232\225\216\236\233\223\207\236\204v\222x\221y\233s\210\226\237\233\251\244c\243\231\200b|\221`\226\216\257i\223\210\224|\262\225\227\217\261\215\210\236\223\210{\231\205_\201\200}y\202\215\225\234\210w\236\210\221\177\223\247\253\223\220\231\246\230\230\235\207\221\246\202\210\203\202\213\214\231\204~r\207\230\250\223\222\207\221\227\235\227\214\223\243\244\212\213\203\226\211\226\205\231~\224\237\251\246\230\240\214\251\242\230\204\215\222\225\221\244\217\243\237\226\224\215\223\245\221\213r\222\221\245\232\227\250\221\242\254\226\231\230\223\221m\203\216\236\230\214\214\230\227\214\236t\217\210\226\177\210\234\215\224y\242t\202\213\234\245\241\222{\224\220\234\232\255\201\205\205\225\224\177\234y\206\213\300m\207\204\207s\207\215\212v\242\262\225\250\215\203\212\242\263\212\221\241\211\211\255\230\216w\222\263\255\214\213\213\265\232\225\234e\245z\215\215tz\215`\222\216\204X\221}\242\222z\177\246\216\204\227\211\223\226\245~\244\226\201\221\177\243\204\234\252\243\212\233\220\246\237\225\234\213\215q\217\213\301To\206M\315\202\200[w\200\227\237\262\214\227m\241\201\243\221\207Qe\242\220\220\231s\214\224\213\212\240}\245\235\200\207i\222\253\213\220]\223\227\257\222\235\260\230\232\236\217\242\240\231\233\214\243\222|{\267\217\216l\215\267\266\206\225\237\306\213\236\231\227z\226}\\\223\241ys\233\213w\211\216\224\255\204\177\221\225\220\205\213\223\251\223\225\224\237\211\232\223\204\220\215\204\212y\204\214\200\231\213\203i\224\222\252\202\222\235\244\177\216\227\231\262~\242\227\253\203\227\202\212\233\210\210}\201\206\215\201\255\224\204u\224~\266\233sg\262y\245\257\247\217u\270\237\224\221c\216\200\262\220\235\241\250\230\240\237\273\266\215\305\201y\227\246~\215\215\250\217\216\224\240\227\212\225\216\216\227\215\205k\226\201\214\230\217\220\241\215\177\225\232\232\215\225\232\221\217\244\205\243\242\212\227\220\241\261\220\217v\225\220\244\234\225\242\223\217\245\232\242\222\240\230\212\220\223\213\221\242\222\201\202\203\242\220o\221\212\227\213\232\223v\217z\216\211r\202\205p\217\222\206u\177\212\211\242n}\212\237\200\232\224\231\200\245|\223\206\236\202\201x\251\231\177\212\212\233\237\235\234\200\223\226\177o\225k{\267v{\211gt~\253\245[\256h\227|\227q\246\236\233\203oz\205\261\207\233p\213\223\207\220\231m\235\230\240\201\222\217\222\237\222p\261n\244\215\226\211\202\241\240\236\231\262y\243\217\235\227\240\221\207\220\245\242\200\222\247\256\237\252\235\235\233\213\227{\202\250\241\242\213\177\212\240~\236\220\200\252\216\231\246\252d\371\235\216\215\241\222\236\340~\224\252v\246\217\254\245\246\327\206\231\215\235\232\263\210\212|\211\224\213\212\237u\227\235\232y\226\225\232\261\233\203\243y\232\207\232\226\203\246\251\232\233\255\207\255\214\177{\221\223\236\231l\210\234\212w\226n\252\233\223\226r\177\236\210\223\240\200\226\250\260\231\275\220\252\201\204\200\253\226\222\217\227\306\245\240\213w\242\231\250\205\205\246\214\221\203\240\222\212\233\222\240\232\241\211\260\221\236\240\242\237\217\203\266\231z\212\261\265\232\245\245\241\232\206\244c\203\233\245\250{t\200\225\206\243\203\205\226PX\215\237\202\224i\221\240\201\211s\242g\224\215\211\212\225\273z\223\217\246\222\275\200|\221}\202\214\220\232\205\205\270|\233\177\222\215\205\236\202\203\215\225\226\233\237aq\225\257\251`j\211\232\230\231\210\221\234\230\206\223\242\310\266\230\227\234\227\274\255\212\231\212\261\223\263\201\232\213\306\222\201z\241\234\201\234\244w\220\202v\216\224\211\233\214\232\224\237\243\253\222\225\220\215\217\223\226\204\210\234\221t\211\223\245\227\221|sw\303\203\231\274w\242\227\242\230\237\230\243\245\224|\232m\233\210\232\211\201\265\244\242\213\244\201\243\217~v\246\204\224\253\233\311\242\260\225\226\260\247\245\210z\261\202\235\203\255\202\231\247\235\224\250\242y\247\240\242`\221\220O\213\236\212\202\221\231\232\215\244\221\246\207\211\223\242\204\203\211\246\211q[\177\215~~x\251\236\234\225\212\177\253\216\214\222\250\254\224\245\234\245\241\204\245~\224\245\236\234\220x\214\226\207\237y\211\231\237\273\234\232\220\234\301\247\237\202\243\252\250\235\225\222\237\234\227\201\254\243\227\271\255\250\223\202\233\253\216|\201\227|\227\230~\226\242\241\214\217\214\217\223\234y\226|\226\235\241\221\177\237\261\253\227\241\211\233\212r\201\216\214\236\220\266\266\244\251\235s\227\254\251\212\202\235\220\232\177\255\210\217\216\230\241\256\212\220\242\233\210\242\254\200\230\202\200\200\235|u\241\177\204\220\240\224\207\207\235{\220\211r\267\235\262\210\207n\274h\236\237\235\230\214\203\264\220v\212\267\261\202\242\223\263\252v\237[\227u\243\244vq\213x~\234}{\204o\222\223z\236lx\206\217\215\243\222\234a\246\210\234\215\216\210q\223\210\233\215\235x\262\215\237\213\253\201\216\236\177{\323\201v\216j\213\206\306\231l\304o\255m\236\213\277\272\240\214{vg\314~\246\177|\214\224\225\214z\227\240\226\200\212\201\203\226\227\205\204\205\235\222\232\234\203\242\266\251\232\247\230\244\214\262\274\211\227LW\301\177{\207\251\306{\235\254\247\241b\252~|\232\224\264x\233\200q\243\267s\204\235\237\265\220\210\201\245\212\201\212\234\271\213\243\225\251\227\206\224~\210\203\237\247{\205\213\215\214\237\211z\224\244\244\240\222\205\236\212y\211\260\274q\237\221\237\241x\221t\206\221\252\243u\204\204\214\236\257{Wa`\247\231\232\257b\177\213\242\261\216y\243\203\222\216\262t\213\204x\255}\255\247\230\244\331\245\221\250\203~\241\205\224\264\236\313\252\255\217\236\253\237\233\225\205\267\217\243~\244\177\211\241\220\231\241\234\205\243\233}\205\233\206\231\232z\226\242\245\207\222\222\225\233\234y\246{\233\233\243\217~\244\254\252\233\260\201\244\216\230\235\224\246\237\205\244\211w\204\235\247i\232\211\236\244z\232l\203\221\256\247o~\177\210\206\246}uox\200\223\221\324\234\232\220\226\275\222\221\254\205\227s\223|\222\220\251\177\206\211\177\220\233\274\207v\243{\207}\211s\205\252\214|_\207p\203\265\241]\237~\226\226\240m\227\253\241}lm\223\247\213\246w\211\220\221\211\216\201\227\231\247\217\226\204\235\301\221r\236s\233\225\225\212\214\233\235\243\232\267z\235\223\212\230\233\210\203\241\217\232\205\226\266\253\237\231\234\234\220\205\224|\202\240\216\222\201\201\220\234\201\213\220yy\221\310\221\220\336\216\257\203k\320\227\265\247\215\232w\205\217\251u\234\204\243t\224y\267\272\207\206\222\206\210\224\221\177\217\213\216\235\243\200\227\215\247\312\232\177\221}\222\222\227\226\216\242\243\235\227\254\215\237\220\210{\222\220\223\207\224{\237\222s\223l\264\242\226\216i\201\222\227\221\235\204\227\223\255\222\263\220\233\201\215\206\241\250\215\213\233\232\232\244\237y\233\231\240\205\205\215\222\210\220\216\213\214\232\220\252\222\230\205\242\227\206\234\241\213\214\232\231\221\205\217\266\256\234\215\245\236\220\210\236p\204\232\213\223s~\204\233\206\224\212\204\223at\221\237\204\222e\221\212h\220|\227^\233\236\204\224\242\275g\247\242\242\230\260\204\232\236\200\202\214\255\240\224~\304|\225}\227\245\211\213\232\212\215\227\212\256z|k\203\245\256So\207\224\205\232|~\251\251\206\177\327\206\234\203\213\270\211\267\217\224\232l\245\213\225c\214f\235\206yq\240\240]\231\236{\225\205m\213\234\220\212\207\243\224\235\237\254\217\225\222\201\217\220\241\177\202\235\220r\222\223\244\221\211y\201z\262\212\234\251\225\227\224\237\231\234\227\245\227\217\206\217m\212\223\237\210\204\270\242\251\222\221\215\226\222|y\237\227\227\236\206\240\232\240\243\227\235\235\236\211f\231n\222\211\234b\205\232\235\236\243\232`\241\244\202[\233\204Z\263\227\201t\203\235\227\212\232\247\242z\200\210\243\225u~\223\177r_\206\242y\214\202\224\234\235\213\205\225\223\213\214\227\267\253\216\226\237\247\230\206\241\207\224\241\212\214\206\200\214\227\215\221\203\200\221\243\264\231\230\214\240\251\251\244\213\243\250\250\222\231\214\227\232\222\223\241\225\230\264\257\251\221|\222\236\216\205\201\220\212\223\216\204\215\237\251\222\222\210\226\236\230x\207~\223\236\237\224\213\227\256\256\224\236\215\220\215g\210\214\227\235\231\240\224\232\231\266t\217\230\241\213~\217\211\222y\231o\210\204\232\254\243\206\201\240\233\226\232\245\201\220\206\277\231\231\212f\233\212\264\216\230\227\223\205\201\221\240\206z\314\215\260\210mt\237g\221\231\235\214\215\234\234\223|\214\275\255\207\222\224\257\232\201\232k\234y\221\220py\215r\211\217\204p\211r\217\222w\221\206y\220\234\221\236\217\251t\241\227\225\225\177\222{\230\222\251\220\241\202\247\226\230\202\222\212\224\233\207\226\251\212q5\216\213\211\274\200p\263}\255\224\245v\273\313\230\222\177i\230\306\201\265\204w\207\225\212\177\216\207\240\235\202\213z\212\241\227\205v\205\227\232\223\237\230\236\247\247\223\250\233\230\214\234\275\226\177Y\226\227\215qw\300\300\203\227\260\262\216i\247\231\204\227\210\230x\230y{\266\230w\204\232\233\262\211\206\215\230\215\206\215\237\257\217\231\227\240\220\215\230\203\207~\211\226x\206\214\214\214\225\213v\227\231\235\217\226\213\235\204\204\220\251\262w\225\233\236\220\177\210\177\215\221\225\216w\212\212\201\241\235\200dy[\221\225\205\231\232|\241\267\265\213n\247\237\222\221\246~s\232\204\256\216\262\245\236\241\250\257\211\233}|\232\234\224\267\213\247\234\245\222\232\233\232\233\224{\240\203\214\204\226n\200\225\217\230\236\232{\235\241\211\205\223\220\221\221\206\211\235\253\216\227\213\242\243\233x\227\200\223\236\240\225\213\232\236\254\226\253\207\230\222\215\224\225\230\236\216\230\212\205\200\240\235k\222\220\232\224\205\223\201\206\210\231\221s\204\204{\211\231\206|n|~\231\206\276\205\212\215\226\271\220~\230\200\221m\215u\202~\227~\177\201{\241\230\231\221\204\232n\177\220\203i\243\206\212qD\312[\203\250\243U\243u\270\211\245E\240\243\215\210hF\232\246\221\211\202\225\216\232\203\177\235\206\241\247\220\220v\245\347\220y\200\206\223\250\223\220\232\230\241\257\230\275\205\242\225\205\234\243\213\177\236\202\235\215\227\252\276\241\217\210\260\213\217\213\203z\247\201\207v\200\230\245\202\202\210tu\226\350\215}\274b\336\207\255\312\226\307\227\220\244W\264s\204y\257`8v\216~\273\231b\272\210\222\210\225\220\204\202\250{\247\253\201\226\202\260\354\230\204|\210\222\260\222\224\241\241\250\262\226\266\225\241\233\215|\222\210\217{\260l\241\231l\220e\303\250\230\202iz\226\264\214\221\226\236\225\267\212\255\222\236\226\225\212\232\255\207\201\230\236\235\242\227y\227\222\234{\206\212\211\207\200\236\207\204\247\213\243\247\221}\244\222z\242\251\211\202\244\204\241\215\223\255\311\242\211\223\274\212\221\224y\200\241\177\201i~\212\243\214\211\202u\235c\212\215\243\220\227m\210\220f\224\210\216^\223\256\200\270\225\313N\273\253\243\232\252t\233\252\214\201\230\315\177\225[y\223\237\212\212\220\224n\241\232\215\212\217\235l\245}\216\215\243Po\224\224|}\203\210\262\265\242^\214|\262\220\256\245\213\262\205\210\227d\277c}j\250[H\211zo\261\210T\241\233\214\243\212\201t\220\237\217\207\232\203\266\240\254\212\244\210\203\205\220\261\213\217\232\212p\233\237\253\232~|\210\206\231\215\230e\216\231\225\214r\235\213\245\241\214\177\212_\237\206\271\207\203\314\230\252\251\230\212\216\250|}\224\244\214yr\236\245\233\223\226\224\220\237\214o\223_\232}\254gn\242\223\236\273\236b\240\245\177M\242\215F\224\211\240l\245\236\221\222\204\222\222\206\236\213\212\213u|p\214t_\212\231v\246}\211\244\244\207|\242\202\226\221\223\270\303\226\214\222\270\217\217\227\226\220\252}|{\203\225\241\217\203\177|\213\252\247\223\236\200\232\251\257\243\177\254\244\252\211\231{\230\207\233\235\255\204\203\266\251\254\241\203\205\233\235\222\205\216\215\222\210\227\202\244\255\222\224\206\234\255\232\201x\213\217\252\233\231\243\225\255\266\221\245\225\223\220k\215\220\241\236\214\210\232\247\220\241y\223\213\222\215\204\224\202\231s\242vy\210\227\262\253\205}\234\224\231\235\212q\217\211\305\216\215{g\222|\323\214\231\201\214w\221\245\254\177\220\336\216\257\213jz\203\225\206\227\252\206\204\263\217\241\206\221\300\303\222\206\214\273\225\217\226v\240\207\214\205i{\216\200\216\214\204g\214v\206\220uw\244w\213\235\211\226\210\263\207\242\220\217\213\214\251\205\224\246\274\202\237\212\241\226\220\220\214\204\257\207l\316j\241T\000\325\177\220\224dn\305i\344\201\214J\312\257\202\214vG\232\272\177\224\220t\211\224\210\206\237r\244\235\202\216o\231\253\224\211j\221\222\255\221\241\255\236\256\257\214\256\241\237\226\214\241\276mY\310\206\256i\220\305\274\226\215\243\271\207\205\232\230\200\230~_\177\232v}\261\210\205\201\221\240\267\210y\226\220\231\215\212\242\276\227\223\215\254\206\226\221\215\214\220\201\210t\213\223\214\216\217\204u\216\227\256\207\222\246\236\204\206\213\252\322y\231\222\256\206\213\201\200\224\223\213\205t\214\215\210\244\233\205_\206r}\222zd\264@\251\237\251\217Z\261\231\227\203\210zz\273\210\240\247\270\250\252\227\230\264\215\256\215\177\223\264\205\222~\254\240\252\217\225\226\217\232\222\213\235x\217u\244uh\245\213\217\262\225\204\233\247\230\216\216\225\221\214\231r\245\254\212\227\203\247\274\230\201\177\214\217\252\240\227\234\232\237\262\222\260\217\226\231\207\225\240\213\223\247\217\216\202z\260\253r\217\212\242\215\221\217\200\214\206\217\211m\207\207~\205\221\213uown\235\205\201w\225\216\216\227\215r\246\177\215k\241^\221k\256\207w\215{\243\250\226\215\212\231"
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.36900472641
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.961051285267
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/convolution_eightbit_reshape_transformer/contract/MirrorPad_2"
  op: "Reshape"
  input: "transformer/contract/MirrorPad_2"
  input: "transformer/contract/conv3/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/convolution_eightbit_min_transformer/contract/MirrorPad_2"
  op: "Min"
  input: "transformer/contract/conv3/convolution_eightbit_reshape_transformer/contract/MirrorPad_2"
  input: "transformer/contract/conv3/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv3/convolution_eightbit_max_transformer/contract/MirrorPad_2"
  op: "Max"
  input: "transformer/contract/conv3/convolution_eightbit_reshape_transformer/contract/MirrorPad_2"
  input: "transformer/contract/conv3/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv3/convolution_eightbit_quantize_transformer/contract/MirrorPad_2"
  op: "QuantizeV2"
  input: "transformer/contract/MirrorPad_2"
  input: "transformer/contract/conv3/convolution_eightbit_min_transformer/contract/MirrorPad_2"
  input: "transformer/contract/conv3/convolution_eightbit_max_transformer/contract/MirrorPad_2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv3/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/contract/conv3/convolution_eightbit_quantize_transformer/contract/MirrorPad_2"
  input: "transformer/contract/conv3/weights_quint8_const"
  input: "transformer/contract/conv3/convolution_eightbit_quantize_transformer/contract/MirrorPad_2:1"
  input: "transformer/contract/conv3/convolution_eightbit_quantize_transformer/contract/MirrorPad_2:2"
  input: "transformer/contract/conv3/weights_min"
  input: "transformer/contract/conv3/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/contract/conv3/convolution_eightbit_quantized_conv"
  input: "transformer/contract/conv3/convolution_eightbit_quantized_conv:1"
  input: "transformer/contract/conv3/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/contract/conv3/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/contract/conv3/convolution_eightbit_quantized_conv"
  input: "transformer/contract/conv3/convolution_eightbit_quantized_conv:1"
  input: "transformer/contract/conv3/convolution_eightbit_quantized_conv:2"
  input: "transformer/contract/conv3/convolution_eightbit_requant_range:0"
  input: "transformer/contract/conv3/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/contract/conv3/convolution"
  op: "Dequantize"
  input: "transformer/contract/conv3/convolution_eightbit_requantize"
  input: "transformer/contract/conv3/convolution_eightbit_requantize:1"
  input: "transformer/contract/conv3/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/contract/conv3/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/contract/conv3/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/contract/conv3/convolution"
  input: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/contract/conv3/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/contract/conv3/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/contract/conv3/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/contract/conv3/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/contract/conv3/InstanceNorm/moments/normalize/Mul"
  input: "transformer/contract/conv3/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/contract/conv3/InstanceNorm/moments/normalize/variance"
  input: "transformer/contract/conv3/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/contract/conv3/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1/shape"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "P4r?\013(\255?\007\354F?\367\231\004?\025\247\204?\323\340\273?L\302\221?Pi\252?\347f\035?\270\344\332?\275\210\240?\333\321\307?\256\343~?\004\264\223?\255A\246?\244\227\220??\344/?s(4?o\241\200?\313\364p?\275\273\240?\036\031m?\306\313\210?\225\221\272?8\"\214?`>5?\342\252]?\221O\207?\270\3367?\331\306~?\352\217\372>/_%?\277\255\006?\260`J?\361F\227>\325\305%?\006WD?2\264\003?\317t\014?\321\212>?8\373I?\205a0?\0042\247>\3353\226?*\202k?\343\271\260>\374\352\000?\203?g?\025\004\230>\000\357\\?\277\006 ?\210x\'?\032\365 ?\226JA?0\332\023?Rr\216?\314\252H?[\365\230>\343\211 ?\367,\021?\331;\223>\017*\"?H\255\354>74\376>\334\272S?u\352\\?2\253\030?\330\236.?\206w\212?\312\036\227?2\310\213?\307\006\237?\371\234T?;\355\252?\334\206\261?#7\252?\374v\201?\363\215\207?X/\215?\r+H?\333.O>k\034??\345\275\252?A\271n?=\374\240?T\002\232?\227\345`?/\000\212?\0026p?\320\254.?\020\367\231?)\253\226?\212\350J?\223\"\226?\353\223,?E\335\347>X\035z?\230\325+?6\\\007?Rp$?\035\302a?\356(\201?A\351\251>\223\245q?/C2?\300f\211?\252w\014?\347\276;?sz<?\273 .?\360\0004?\034\027[?\264\356\220?\177\261A?\323l\272?\246\331E? \240q?\371\373V?M\271\217?\2134\254?\266~\007?\275\017=?*\005\214?\324\324\202?\277\2721?yg\203?\220\t\\?\234e\362>\221\256I?\00160?(F\306>\260\230\034?\002\327\207?N\216}?\247\035Y?n\336\203?\256`\227?\374 \271?\276\331g?\266\252\235?\363La?\344]*?\331\271\213?\312\316:?\235\325\355>\242\2556?\217\037\210?\237\273\202?\321\264H?(\272Q?\014\337Z?#\n\222?\030\252\n?[?\010?h\270\201?Fh\205?\265N0?\201tj?GC+?_\035\310>y@w?\376\333g?\255\242l?\250e\026?\030=\246?D\371\311?GL\214?\2270\301?\327\341d?\n\311\007@\014\375\232?4\266\240?\334\033t?o\204\255?\351\261\250?\014\\\\?\376h*?|\205^?\017\375\241?\273#\201?\021\337\231?u\217K?jW\230?\230\010\313?\327\272r?\303\301P?x\267b?\014\377\226?\"+\201?\261\260\220?\032qo?y\362\262>E\236\221>\376\221\366>6\335Q?,z\231?\265S6?\235\372\223?_\271\210?\"g[?\353\204\366=\3777\336?@\360??r\304r>+\363\031?v[w?>\206\006?\200_\226>\330w\214>#&\022?\004\336\224?)L\014?NE=?A\005k?\013\332\002?\254E\235?A\211\370>\301\336\376>\374\242\020?\025\227\205?\242\2310?Z\251:?\021\t ?x!\031?c\007 ?\365$r?\260\213\353>\304\2518?l\263:?\251\240+?T\r\366>\036\010\213?\341Aw?\240\201\241?\312:\005?%\211\256?8\365\020?\003r$?\204q\231?P`\202?\267\343.?\214\257!?6k7?\035\336i?J\231\200?\257K\371>\330.2?w8\200?9\302e?\346X\"?d\206S?\002~F?\037\272\237>\025b.?s\266\331>\206\254\017?\266)\363>c*\311>\303\340\030?\302SI?t_D?k\221z?P\024)?\362\"\202?\r\0276?n-\226?4\n\371>\261&^?\351\251\\?\275\330\"?}\211g?\336\034\017?\334\365\366=\177\343\374>\321\342Y?\241a\252>#M2?\035^U?v\364<?\337\366\247?\227\206\304>s\360\t?|\307_?j\315\"?x\177\331>P\031P?m\251\361>\246\225\326>\210\363\223>\340\222\"?\031\314\032?\273\260/?\032Ur?g\247d?9fu??\010\203?\377\022b>\273\217\005@\000\"H?\267\\\t?\362\211\037?\327\313\'?\324\2225?Yg\314>\024\277*?~/\347>\204\332\204?#\237\374>\017\313\217?G\224\032?\320\275\025?#\233\211?\213l\005?\027y\272>\232\247\372>\237\227\006?\r|6?\233+\352>$O\005?\304\264\352>9\240x?\035E@?zMI?{\021i?\215E]?\021l\307?Y=\254?i\023\342?S\033W?\300w\002@\354\257\277?\\6]?\367\214k?C<\243?[\357\256?v.Y?#S,?\320\022\200?\2521\230?\305\006\236?\035\305\220?\304P\242?\020\210\217?\026\237\356?\226\036)?\362\326&?%\000l?\355~\213?Uq%?\227\205\245?i\365\000?\220\260\030?\336\310\022?\313\332f?\357\224%?4\251 ?\246M\223?\271\214\313?\353\r\221?\274O\222?b\316\026?\225?\362?^ot?0Q\211?\354\2102?\212\254\177?\275oy?=\257\023?\235z\360>\276\271{?\205nF?\237\316$?\265\336C?-?5?\331\3006?+@\240?\346/\312>;(\331>L50?\035,\220?t\341\"?\234\303{?\266\306U?\335\353\n?\271\205s?\306\"\304?`\221g?\250\326\036?3\\h?\'\321\274?\250\014\235?\224#\250?\325)\n?R\326\354?Y\213\263?\324z\254?\005\327.?\025\216\233?\013t\276?\364\006z?uw\200?P\230P?\256\201\234?\207\177}?\265\372\247?\334JP?\202\033n?GZ\330?t\320t?nh*?\345 5?\302\273y?5\223#?p\314u?a\200!?\003\027\"?,66?oyT?\320\220\330>\340U>?m\316G?\345\341\202?\237&!?\366\332d?\201\374H?\307\347\242?]\332=?D\312V?o\t(?\327#U?\025\337l?\037\372k?\372\253\034?\364\231;?\257\345\221?6WQ?\211\260f?9\360%?\233\3345?\247\350\231?\327\032}?Qn=?\036\344j?\"\013$?\245w\021?\355\333Z?7\3509?X \303>Y\006w>\232\356\231?}\265]?p\254\335>\366\2360?\302V\336?F\210\335?E\372\340?\326|\027?\210\377\017@z^\323?/\022\274?\302\237\016?\264w\220?\364\003\227?\200\005\023?J\033\353=\245\000\205?\3136\266?\313\333u?\236ro?|\325\221?8$\223?\027\036\273?1\301\260?\024\n(?S\307&?\010N\204?D-0?\330D\234?_02?\345\255\t?\224\001,?\315\276\331>\2523\251<\250\260\371>\006\240M?\'\023??\327\332\352>\344\003l?g\3770?V.\215?Rs\013?H\312\331>\234\206\r?\253k\245>\254a\272>\267k\322>G\201*?=%\020?P g?aa\357>\272\341\017?y\342\326>\254&r?\356m\211?ia\021?\233\220\274>\032\337\"?A\r ?)\300\000><\017\202?g%\250>i\217_>%\354u?\031\023S?0pr?\006t\023?J\2403?\2167\241?U7\205?\323\007\220?\377<\242?8\035\351?c\217t?\276F\227?\251\232g?U\367\257?\354\201\211?\260\217b?i\022\220?=\350c?\225D\215?z\034H?\365w\202?\014\366E?S\242\212?\030\315\250?\270\344^?,\003 ?2\021J?n\013\227?\241\233\017?\333r{?\347\0030?K\036Z?\245\333\033??\365\364>\n-\017>\030\202s>\206\342\300>p $>kU\030>S\202\251>d\220\035?\014\037$?\344e\274>\366O~>\202\262\321>c\3579>\351}\323>h\225l>\212^w?\343S\300>\343\343\257?\007a\017?\346-\234>\3351\274>\200Bs?\033\355\222?\311\357\013?\360\266G?C\236\372>S\326\013?\271\212\021>/\344N??\"\251>`\362\256>\334\215J?\347\030:?id\020?KG\336>\341\310g?w\216\206?\335\037[?\027!\213?Y\370\021?H\005\227?p\273<?\021:\000?@T*?\200\331p?\361A7?P\030\352>w\t\227>\370P\303>K\037\203?\273;\303>)5\021?\026\352G?i\210??2\362\244?(\345\000?\236\220\270>\013\237\020?\035\345\026?\027M\306>\203\206`?\344\360\004?\356\351\321>\304LI?K \034?\016A\032?=SB?6D\266?=D\203?\223\307i?\263\346]? \266Z?\310\333\321?\310\312\"?\210jZ?\2718\014?h\353L?b\251\205?\335\271K?\266\025\033?\301\'e?*sI?\2448P?\375Uy?Lf\036?w\273N?\250\222\202?\303\\??\323\251\306>\353\355*?sNR?F:0?\260\034^??4\006?\003D\013?iC6?m\250Q?n\0226?\276\211??\264Q\213?s3\331?r\374\250?\275\306\236?\201y;?\344k\371?\263%\202?\342\016q?\237\205B?\022\376\230?l\312\242?\r\242O?\227}0?\370mf?\035\207\230?\313\313f?\340l\221?\354fi?\375^\205?\367\323\313?\302\2067?f\230:?\3748q?^\211\204?\240\304F?\3434\231?\244\265^?\313\240H?8\224I?-\257\350>\nM\350>\tPR?\355\202\214?\312Z~?7\2151?VSk?\3164\'?!\313\215?*\304E?\251\245`?;\302)?ge\030?\005gt?\177\240T?\016\317;?\271\3133?E\035u?!\'B?\210%\204?X\234a?:\325m?s(\255?b\022(?\244iP?&iN?\357\013W?9\366\353>-\347[?\242}\032?\2701\027?\350\214,?\360\324d?\214m/?)\343F?4.v?\336\177\225?\225\355\224?\352\227\237?59\361>\302\230\340?\022\311\216?~\272b?\034cg?\363\001p?#\030\200?\252<=?\2063\027?\3570\036?\272\216\257??\274B?\327_X?\235\243i?o\226n?!\310\325?U{P?\024\023(?\027\241\211?\307\374\200?\206\340\356>\201\233\226?\216\325\033?\310\005\310>j)\367>\207\301a?\227\350F?d\333.>o\223\205?\352t\212?\262\'`?\237$\227?\213,\207?\215\035\273?}\226\252?\005\356\215?\266S\031?r1\207?$\303\253?\225\367.?=\314F?\210!U?\237^\244?\006\037$?N \242?[\343\216?\344\350B?\350N\210?\204\255[?\272Wm?\213e1?np\274?\r86?M:\223?0\234b?\205\337\255>\345\343\031?\244\306C?v\263=?s,\265>\232\233\257?\361\201\262?R\007\246?\233 \303?^\265\204?uQ\024@\036v\303?$\374\224?s\351K?\275\277|?O\024\253?\207\034}?~7\322>\231\254\301>\347*|?%eM?9\320\231?\377]x?\265\013M?~I~?V~\371>\320 \021?\\\340w?q\367\306?\217\264C?\205Up?\216\3505?G\014D?\335\326%?\323[\222?\356\214~?\331\374A?1O\\?\372 \277?`\306\233?$\022\311?Y\031\256>\337w-@\256Sp?\267\213w?\304\215&?L\266\261?K{t?k\274\020?\203\220\037?\361\3034?\276V\230?N\320+?\007lV?\306\005\205?hK~?i(\333?\251\300\364>\266\343M?k\301@?\3047N?=\244`?\0201q?\033pE?LN\021?"
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_1"
  input: "transformer/contract/conv3/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/contract/conv3/InstanceNorm/mul_1"
  input: "transformer/contract/conv3/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/contract/conv3/InstanceNorm/Sum_1"
  input: "transformer/contract/conv3/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/contract/conv3/InstanceNorm/ExpandDims_2"
  input: "transformer/contract/conv3/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/contract/conv3/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/contract/conv3/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/contract/conv3/convolution"
  input: "transformer/contract/conv3/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/contract/conv3/InstanceNorm/Reshape/shape"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/contract/conv3/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\364gC\275-\342V>\301\013\017>^\271!\277\305\367\242\275\306o\222>\205C\205>\'\330\242\274\366K\225\276W\257\340>\372;\221>\266\225\301\274\235\323\256\275Q\364\245>\344\2255\276\r2\352=Lw\253\276<\335\204\276 v\344>\037P\317\275\277o==\246\\\272\275\317j\217\276\303\203->z \245\275\032\t\331\2761\375\r\276\0229\255=\262w*\276\'\341\220\276\317e\003=H\363\022\277\303\202\n\276\013P\262\276My\256\276@\014S\276\226mw=\2538\035\276\037T\231\276+Gz\276\361c\203>\214\212#=\211\364\242\275q\365L\276g\232&\2764\025L\276\323&L\276\332\377\243=\206+\271\276\207\342\264\276\036\255O>ARd\275\210d\203>B}\'\273\327S=\276\010`D\276\234&2\276\254\360\256\276\367\346w> e\303\276_`\371\274\257K3\276\246\372\316=,\212\006\275\3674\250<\231\201y<\230g\233\276\245\343\366\276\243\010\206=\324X\250>\260\362\243>\023VS\276l\270\224\275\267!h>g\226*\276\226\340\025\277\301ty\276?\000\362=\342\267\002=m\025\235\276*\3369\277\000\007l\270\242\274\036?\224\323n\276\210jL<\376\256\001\274\367\005\216\276\177/x>\335\370C\276\314\007\303\276\356u*\276\256/\341\274\\{\217=>\335\312=\326N\236>8\236\016\277V\353\306\276\265\266R\276\375\211\027\2779\371\321\275\307\026\217\275\362\372\"\276\024$\261\276\231/\203\275\3516\'\276\303l\032>p\014\263\276g\225\'\277!\3523=m9\215\275\202\306\213\276a\376\031\277\322\324Y\276u\311\373=\315\350l>6\301\317=R\353n\276\345K\340<\n\337\013\275:\270\000\276t\3536<\024\024B\276/\007\225;\374\352\220\275U\241\237\275\260A\377\275\244\021\356\275\253\026i\276\321\373(\276$^\310<\337@\213\276\211\362\010\277\223T\321;\321e\236=FC\001>\341\273\240\276\263\322\201\276\276\347\230>\206Y8\276\205X\025\276\256\326Q\276\212Za>8\233K>\324&\200\276\216i\330\276\250)\236\276\267V-?t\\\020\276h\014\317=\003\334T\276\237\250z\276Q\202\201\276\351y\326\276\315\211\213\276\247[M\274\231\350\304\2751\356\007>\325\264\201\276\274\253\371=ix\327\276\347\034\030\276\232\321\007\276\002\n\237\276\r\032\253\276\006M\027=2\312\243>7}\004>F\010\217>\2241|\275? \313>\3465}\276kv\375\276\200D\204\276H\265\250>\010\014f\276o\017\343\276\223\317\262\276\315\014\t\275\210u\337=\241\202\201>\254\314g>\211\0324>\217l\234=:2F>\212/y=\326\246\223\275A\322\016\275\212BZ>\337v\025\276\340\304\240=\375T,\275\363\300\376\276\220F\221\276\035\026\214\276\363\351^\2766\031O\275\222\255\320=nR!>:AG?\t{@?\365\234\306\276\304\r\254>\225\374\000\277\n_\017\277\240\313\232=\005\000\023>\212\264v>\t#;\277\375\200\022\274k\224\251>\2001\314\274ri\232>\rwX>\252R\020\276\034\2673\276v\035\230=\177J\203?\013v\315\276\206_\244=\200\337\307>r\317\230\272\014\231\300\274P\036\270>,\330\207\276*e\323\275\371\241\311=\n\334\256>Y\313\236\276l\261\216=\n\343\315\275[\241~>\330\217\032\276\342\321\273\2754\272\307>#\355!=\0146\225\275\022\301E=+\304s>\016\355\223>J\231q\275\230\272\330\276\r\345\025\276Px\350=\225\345\241>\010.\310>\375a\374\275\3256r\276\206\244\032\274<R-?\273u\371\275T\365\305>_:\253\276\010\n\203\2769\027:\276\276\310\003\277\2654\325\276\355\207>\276\237\317\307\276\267O\346\276\236\351?\276\335\216B<\2564\304\275\304\376\326\275\332\335P\275< \270\275u\355p>h\207J\276\230\030I\277sM\224\276\365\2125>\020\351f\276t\302L\277\n\010\244\276\270 `>\"\301F>7B\220\276\321X\327>\275\002\340;\264\330Q\276\272\r\"\276\022\377\310=O\331{\275\365+\214\276_\004\032\276o\216\235\275\360tw\275\375\021\035\276\023\200\315\276~\255\t\277\351~\226\276\036\233\330\276\335CN\276\221|\260<\221\223>>K:_>\376\250\264>~\017\014\277\333\312G?\207\025\213\276pei<\001\253\r\275\340\315Q;\364L\300\275\263\316 \277\306U\261\276\332\335\002\277\357\226\327\276\243\220\017?SF\222>\376\227\306\275>\2663\276|L\005>QA/:\366x\260\276\303\250T\276mo\221\275\277\035\236=\3740\001>-\\\255\2766\031\215<\266\204R\276L\360C\276g$\267\276\211\245\217\276\245Y->\211\364\222>\223\245k>\2030\302\275\3256A\276\235\326U?x\221\317\276\307\252\301\275WD\010\276F\016\202>\003U\224\276\255 \343\276\201\202H=\200\346\177\2754\331j?\305\202}\273\306\376\227?\014\211i;\035Y\265\275\177R#>fD\214>\224=\033\276tY\357=zW\261>9\206e>\273\270\233<@\304\310\276\302\007\224\276#\335\376\275A\230:\276(\275\327\275\3006|\276z\3573>\356\326\347>2+\214<\375\332\004=Y\027q\276\362x\360>\346\221\333\276\240\276\311\276\356\220\210\276\321\236\227>\352\261\n=\037]\373\275^\277V\276#]\271\276\224\"\343>Z\210\037\276\273\330\207>\360\336<\276\313\010\267\275\342f\243>\360\032=>\356W\224\276=!\005\276\367\314;\276\373NQ=\346\262\313\275\032M\233\276\337*e\276p\274S\2766\265\376>\330\205X>+\033\334\276\034\\o\275!v\000?\320\317\276>d9\360>Y\2475\276\220|X?\003$\241\276\263\274B\276uD\200>P\327\251>0\035\217=\364\003\316\275W\035\232\274\203\024S\276\214^\247=E%O=\215\030\366>\366\231+\276\262\003\322\275\275 \244>\274\307l>\224\337\365\276R\301\\\273\020\335\005\274^\342\002\276\311\345\234=~\"\232=j}\003\277\241Jo\276n\234\037\276h\226\250\276\215\200^\276\213\033T\276_\243M=r\237\210\274~8!\274\301FB\276\232\0210>|)\271\276c\340\231\276\360f\032\276hI\263= \266F\276u/\027\276i\034\214\276*\021B\276\303]\306=?\364\314\275\355\213\224>\334J\236\275\355e\343\275#!h\274\302*\033=\201\325\224\276\213\370I=2Y\266\275\013_\362\275\312\273\346\275\263\211`\276o\344\244\276\263\364/\277\317[l>/\340\352\2764{\322\276\021\306\320>x\315\'?\022\341\224>\327\035\370>I\177\027\276\001\307z?;\0102\275\230\347\020\277t\320\313>\372\030\021?\205\342r\276\346 U>\007\357$\277\010W\326\275\216r*?\367\325\234>\317\220\215?\371@\257\276\240\320\213\276X\267G?\200\271\360\275\010\340.\271\000\305\324=\310B\330>\320!\342>\254\274g\276\033\242\036\277\013z\317\276\037u\233\276\001\226\362\276\017\312\376\276\201z+\276\244 q\275\335h\212\275\324o}\276\024D\016\2762x]\276\236\335\254=BT8<\336\231\007\277\330\243Y\276\344\017\336=.h\030\276\t\336\226\276\007a\371\275\t\207\251\276\252\275\003\276C\225E\276\020\204\322\274^\201\273>\t\255\036\276kI\203\276\376b\217\276\'\305\317\276\\\032\316\274.\325\250=\003\027z>Lg\343\275pK\242>\345^\036\277\371\010\272\275\037U\257\276\217[\353\276\371K\013\275\251\240\206>\350R\247>\231\302\035>\340\221\016>\217\253\234\275\243\347\023?\3102\305\276b\010 \277\344EZ<\2177\225\276\322\236\216\275\255O\324\276`u?\276\360\326\343\275hE\363\275\016d\303<\020\3527>\005S_>l5^>\000\250]= !^>B\303\343\276oa\n\276v\275\000>\001\375\n\277\330\013\273=\211D;\276\366HA\276Y\360\271\276\216\361\236\276\346i=\277Ci\006\277\202\320f\275PW\256\275N\376\026\2773)\017>J\3531=C]\001=\225\013\007\277\304\227&\277\260\265d\276S\307\255\276\337K\371\276\013\365%\277]\264\231\275]3\037\276\233TK\275\202\027*\275\270V\r\277N\256\023>B\202p=\204]\020>0\021\t\275a\245P\275{\363\037\276\317\r\034\275-\006\322\276s|\250;\033R\200\275\340\212\274\276\214@,\276~\360L\276\271=\025\276\343\r\313\275\014\036 \276\275\374\024>\260\013\254=&C4\276\334\214\332\276\013w\030>\271#\243\276\213\023Y\276\000\376\321\275\201e\224>\352k\273\276\016\323\010\277\214\203/\276\326[\n\276\337}<>A\003!\277F\323!?\344}\r=\354!\352\27560\022\275\266Q\313>\035\245%\275T\324K\275\025a\331>p\036\254\276\212\260\364\275+\277\260\276\252\351`=4I~\276\325Yd\2761\373\005\277\204Y\334\275\316D~>\017\034a>\312\022\244\276\221\226\373=V\324\275\275C\214\006?\336\307]\276k\260\030\277t\255?\276\366\244\224<\032\257y\275\303\301\315\276\205!\277\276\333*)\276\332\235\273\276`\277\351=\344\006\214\274\034\353\323\275\203\204b;\370\243b\276\2111\361=P\352\004=\350D,\276\373\215\256=\267\260\272\2755~\275=\362\324\346\276WX\276\276\240\366\215\276|\2152\276!\004\203\2769\177\262\276b\240\"=\207\272\332=g\312w>\276\r\327\275_r\360\275\244\333\206>\376\177\247\276\352\241\026\275S\'\025\276\275S\310\275\254\005,\276\312\355b\275\034\225\231\2766\211\355\274P\342K>u\262\232=E\316\t?dC8\275\233\206\002\276\226eL>XfR\274\340\020?\276\337\215Y>\362b==\014\224\274<\024&\036>\333\2060\276M\330O\276\327Oy\276)\235\231\276\r\027\261\276\206IN\276\334\373\265\275\344\r\321:\332\277\334\275*\356\333\275\010j\\\276\026\031B>\357\200\031\276\214\215\337\276@\346\216\276\220Zr>\227\364\276\276e\266\322\276\206W\205\276\353\3042\276\327\373\251>\206\022M\276k\200\257=\336{8\276\252\3200\276\311\250\270\275\'}\221=\304\242\247\276?\t4\276V\006\230=\002L\271\275A\334\006\276H\201\242\276\317\353\224\276\244\333\227\276\271\301T\275\225W\333\276\375\327\223\276%\241\373=\310V@>\352\265\245>p8\264=\214\320\020\276\260L<>\207\377\234\276\362\0030\277\021\217\035>\005\265>>\305\314{\276/}4\277\037\275{\276O\302\364=\372\235\216>\351+m\275\032\360\224>\363s\003\274\357\332\233\275\205\277B>\364\006&>\345;\250\276\223rT\276\246u\306=\217\013\334=#=\305=\365\356\204>\242\235\361\276\331T\000\277\2213}\276\\\313\300>\034\305>\277(\016K?PX^?\255\315\020?\354\243\224=J\205\307>?\262\214?\257tz\276\247\022\026\277\030\013\323>\337j\242?4\013\374>F\242\310\276o>\264\275\233R\216\275\020\236\213;\377\342W>\312Q\203?\232*+>\233V\240\276\205\303)?g\216\207>\'\276\201>\271\310\232>C\224\365>v\261\342>\224\226\363\276\244\200\002?8P\001\277\373l\251\276h\270\270>,,\311=\'a\021\277:\346\r\274:\2476?\021ah>\250w\240=\351\332\003\277W\2546?\315\'\356\276\035\227\037>\304\211o\276f\3674?\200\2117>\216\240i>\237\341\325\276\321x*\277\025?\343>(F \276\023\311o?j`\236\276\017\250\252\276n>\245=\337d\212\276\242\345\252\276\034Y\271\275\330\226\031>\n\000n\276?\275\352\275\346\357!\276\377N\330:<\000\017\276?\222\213\273\270\321\326\276 $N\276\215\007\002?\364D\344>\377\001C>?D\272=j\n\274\276\367\326g?[\230\375\276,\313\216\276\321sH\276\230\243\006>\3262b\276\006\371\303\276=\324\366<\327\373\350\275\275O\t\276h\334\245>\342\312o>\374n\320\275\226\034V\276\254\214\204>\006\243\216\274\213\313\021\276)]\350=\214\376\313>R\330\301=\024\315\326\274\363\342\311\275\317\2202\276"
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/contract/conv3/InstanceNorm/Reshape"
  input: "transformer/contract/conv3/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/contract/conv3/InstanceNorm/mul"
  input: "transformer/contract/conv3/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/contract/conv3/InstanceNorm/Sum"
  input: "transformer/contract/conv3/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/contract/conv3/InstanceNorm/ExpandDims"
  input: "transformer/contract/conv3/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/contract/conv3/InstanceNorm/moments/normalize/mean"
  input: "transformer/contract/conv3/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/contract/conv3/InstanceNorm/ExpandDims_1"
  input: "transformer/contract/conv3/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/contract/conv3/InstanceNorm/batchnorm/mul_1"
  input: "transformer/contract/conv3/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/Relu_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/Relu_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/contract/conv3/Relu_eightbit_reshape_transformer/contract/conv3/InstanceNorm/batchnorm/add_1"
  op: "Reshape"
  input: "transformer/contract/conv3/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv3/Relu_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/contract/conv3/Relu_eightbit_min_transformer/contract/conv3/InstanceNorm/batchnorm/add_1"
  op: "Min"
  input: "transformer/contract/conv3/Relu_eightbit_reshape_transformer/contract/conv3/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv3/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv3/Relu_eightbit_max_transformer/contract/conv3/InstanceNorm/batchnorm/add_1"
  op: "Max"
  input: "transformer/contract/conv3/Relu_eightbit_reshape_transformer/contract/conv3/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv3/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/contract/conv3/Relu_eightbit_quantize_transformer/contract/conv3/InstanceNorm/batchnorm/add_1"
  op: "QuantizeV2"
  input: "transformer/contract/conv3/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv3/Relu_eightbit_min_transformer/contract/conv3/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv3/Relu_eightbit_max_transformer/contract/conv3/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/contract/conv3/Relu_eightbit_quantized"
  op: "QuantizedRelu"
  input: "transformer/contract/conv3/Relu_eightbit_quantize_transformer/contract/conv3/InstanceNorm/batchnorm/add_1"
  input: "transformer/contract/conv3/Relu_eightbit_quantize_transformer/contract/conv3/InstanceNorm/batchnorm/add_1:1"
  input: "transformer/contract/conv3/Relu_eightbit_quantize_transformer/contract/conv3/InstanceNorm/batchnorm/add_1:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/contract/conv3/Relu"
  op: "Dequantize"
  input: "transformer/contract/conv3/Relu_eightbit_quantized"
  input: "transformer/contract/conv3/Relu_eightbit_quantized:1"
  input: "transformer/contract/conv3/Relu_eightbit_quantized:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/MirrorPad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/MirrorPad"
  op: "MirrorPad"
  input: "transformer/contract/conv3/Relu"
  input: "transformer/residual/residual1/MirrorPad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "x\201\223g\271n\253tcpn<pO|rf\227dIxaY\210q\\\255q\224\221v\206`W\177z\237\216tmWzVG\223Cspo\216tq\224p\035\303\224\200\215V\202q\212\244z^n\210\237v}\203\205rZ\200\200J\201nl\215gfsx`{\213b\203Y\234g]\231\201\274\254\250\236W\225t\177}I\210x\220\227Qw\210oa\\n\232\204_]\263k\217\247vQ\212p\202R\204\215~s\205\240\204\306\\\212\201`\207\223\266\270T\222\236mg\241w\252x\245rNfUD\220|M\202\177k8[|\220f\204Qs~xp|Yxa\241\205sP\235!\232z\234w\213\222-ka\235m\261\203rR\231\201h\270\227\216enx\276psam\252\\\224i\\h\177:\250\210er\201yJm\177\222\210sj\274\203v^`l^M\245\204ea\235<U_\235\211~ik\236etuxr\226w\217\206\\y\206\223\223|\206\215\220\202\251k\303f\207tY\251\214\216\302\211QvxyT[\234|\202~{\210\231\271.\200zi\251qB\200>t\234lDV\200u~\202{u\200|S^p\200m\223WLvJ|\210i)ovis@\200q\266\213Nj\211l\232\226x\343\216\177_r\222S\3178_\245_n\206b4\234\225jx\037{\211\235\225^\234lQ\235\205\214]\220k\205Eznhl[\200lWC]yf\220akv\201sc@}:\204rxck~q}P\213s\240}_\233\177\231i|\233\252vY~p\236h\215a9\213[\220\201v\204\202\204|}]~m\311z^sy\206\223z\241\206\214K\231r\231m}v;{rsp\205\207s\257\245Y\\t\203d\251ZY\245\\d\212v;\220\232atP\210\206\240\242`o\204y\237D\230}j\225sp\205l\201wf\206hkvns\234\201@\250R}\222xvT\210[pqwwn}N\201^\201\205qm\202s]_hquf\205xYS\212t\177Tfm\225z\232\\\216wY~vb\203nmxe\201IVvrj\210\177H\262Eqov\222\205\206poo\200\202\201isu\204^\206\226I\200\211\214\221\206\205\236}\245\311]\272z\205\211\221\244H\242eYz\221|\240\201\204sa\226r}\200v\250\216{\240\236\232w\256l\257r\204r@X|\\jx\213]jz\207o}u\244\203c\212\220\232r^\205\210Ru\213_\225z\201p\\\201\215\221t\246E\237\205vum\214gfxU|\224Wr_jzrcA\257U\220\226y\202\177y\237r\231K\226\222Ue\207a_]\203v\246\215R/b^\200Uw\027\277H\232\203xv}d`^Usbzx\203k\201y\243\221k\230\203\233\205n\212\242T{\221k\253\211\255iCy\203z\205u\221n\221^\210a\210N\267\200lw\207\210\233t\235\222mS\177x\250k\226}kgjmjj\211u\201o\210q\201g\260|o\206~\227\233r\213\202zx\212k\246iyqS\207urm\207\214h|\205|p\206\213\217\213C\234\217\240g]u\210j\177\237h\236x_{trmwz\231g\203uqtPz`\237sif\223\233un\214\224\177U\235\205\216v{y[x\210\224\221\216D\221\224q\215k~qmwb\203\207WXley\222`1\246M|\200itr]me\220\210p\201o\203^zu\246yn\204\240\212\226b\214\200vW\230y\247r\206\205k\224\202\207\216jd\215y\233{\224\240q\230\213Zf\236tg\205h\264\217\177bz{\202\214\221y\204h\213\210\231h\214wdmxfx\215\222u\205\200\\b{rZ\203\200\205ty\244f{\215q=yx\225\223Xh[wfe\230jwwn\205\200\202\221l+\246\250\222lk\207p\260\232fWe\212[{om\201k`~x_f{\177\207{ih_Uo\246N\200j\223qz\217m\241\224\242\204^\203lr\202[\207z\221\221Q|sbiRm\226x{\205\203f\204\240\202v\225v\211e\202\200~q\214\240\210\270hd~\\\226\224\217\231]w\232r\203\217\210\221\204\237x\\0`of\230zd\211uOf]x\234\203Wn\225\232CZ\207Nn\206o\177}\203\037gg\231xc\213\202eF\240\201\217\211vA@j\177\322\204m\202d\230\266fcYq\242\204\223\221\225\\\206{\210yzss\230ujgm\215l]\242\245\225eI\177bim\201\201\202q_\204u\232\230\204kn\202{s\200rtxsv\213Yz\201s{us\204\202\203\210\207\225u\244hI\206\216\271\206\214Vs\206eq^evNdq\225\267|\\s\200r\217kfyS\203\245\243fRyje\204\177k\211\206kt[\225`\222q7\223^vp\223!Wm{ug\201\206\245\203Rr\200bd\215\177\274w_v\201\202a\271J{\223jtfeIw\236lh6w\236\242va\213~Q\222\207\225d\200~\201A\177imc^\177vXEj\207y\226mx\220pqpb\177Ce\230vcQxu}dw\220emq\237\201\202fz\200\236vkvg\214l\236\207n\210^\223\206|\200r{\207\200tig\241ye\212\227c|~|\201\206n\212\202\222l\206zelxriV\210j\226\217Vh\177~m\230ri\245guh\202Kz\234jr^\213\214\217\206^fu~~qwxg\233~t\202~\200\216prujqlp\225\221toh\203w\214\211J{to}v\211x}\\wQxyuf|\217tXS\213vqmw\177urlgOYrn\205s\214foc\213kb\210\177z\205Kn`a}ui\211zjzb|h\223\211\205\231\201s\204\\\207yqXk\212h{\222Vyv|xu{\215s{\206\201\206|\247oi\255Z\225\201^`~s\223|\205mZduj\242\212\210|wiz\222\224\244\212\215\216ui_x\213~jzm}r\211\223w{ex\202Ut\234pu`\215\221b`p\200\206x\232\216}v\177~w\222yw\212j\201x\212ztvh\215\202\\yjyxtykzt\227~\215\234q\220kb\264~{\226XqsV^\214x\213\207`]UVs\204K[]\206i\263h\217\224\212jn~nhn\204{{t{z\206\221f\240\220umyz\230lnu\200\215\216\301no{\177~\213}|o\207[ufvT\230xcx\220gx\200z\213rOfz{v\237n{k_oyuz~{gzx|l\204xi\216\207}{xjz\200\221vs\206i\205_l\223\215\217p\221u\213r\216\205k}q\177\212>\211\226mp\\u\213`d\211|\225w\207}\204qawzrh}kreUct\230qhp\237|_\177y\177\200h\234~\210}\234\206ks\201{}zxt\211f\221jsu{etzqh\\poy\207dhpk\200d\206\223tark\220{i~pslop\224yp\202\225qqvix\203\\\177w\203i\222u\201\224{\201\201hW\217\210\224c\206\215h\205\215[g\212]u\203U\247\210l_\207}\207\234\216\216xih\223\206ik\205Ur\200it\212\212\200\222\201tpu|_{oxS\213\207w\207\214]8[q\220\234QoXtnY\220Zzu\203\210\220w\241}?\257\304qi\205\200\207\301\202hQvt|\205\\\220jQKxyd\217au\201rg\217e@\201\261Vib\212w\233\203t\223f\223sgcd`|m{|\206\213Hf{UpX~\204lt\204cz|\236cv\247\230tq\215vsvp\236x\316d[xt\243\200~\240FT\242Ec\236\177\203v\232\203\205]\204\271^\203\205dy\230N\\es\232|o[\251\206WC\222]xxWpj\252w\200\203py9\216\330wm\215\177\237\233xU{iz\220\213]\214_\252\275Gxlr\207>\242n\236\213l\314j\231\177fp\264j;_i\212XZd\231}f>\214bdal\220d\232\212\235~\266\254\207x{udutzd\241eo\201V\203va\214_X\206ck\241\201\213v\215Ob\227\207\206S\214we\202[uI[~^km\224\211lJ\203cw\216b\217gj\215\246\234\230>\214mfpwg\224{Vz\203\213a\246sW\232\201rz\277 v\202vxg\214x\177\216=rkZ\230\212q\366HPel}v\3628\227\202xn\240xF\224\267hpC\206\260\252mkk\212Kt\206\244Yn{\215+\177_eo[ZnI4t\202Uxi\211\216v\211Qd\202eh\215\227RWnofUx\234|lynyfw}Q\213wdxkwW\213mv\206\206|\226\234iiw{\213gz`\245pb\211\207m\232w;\216mc\242{\214XbymIonf\231}]\300wHb\202w\222\311V\217\245rw\235\202E\225\267fzj\230\211\217\211srSqp\207dac\221\201k\203fs\226r\177qvzyy\232\236`@uo\203\230|cU\232v{c\230s\221b{Dt\207\201cn~|PQ\223k\206eq\236y\201\217oo@\2222xY\233`YK\220\204^\223Qq\214d\210yax\227}\225\250FE\204]\207\213o\201\252\207{\211_\223lvip\227`|\203Vzvs\206[s\201\\X\224\215\232l\237\\\200\260\237[\231\205>[wd\213e\227N\207tk\240\222~\227\\9\215cG\274t\177nY\206^\253s\267q\254dpw\222\202W\207c~|Ov{WxN\203\213LY\203\223t\215\227pu\201\235Qy\200\206]vc\215|\212\204qq\200\215\202f\204i\216\202|\206UA||\206\223\225b\2506[\215\222X|^\217\226]g\210s\211Ydhn`\245\221`\233]0\200v\204s\223\234\200yx\204tsyldT\203{\203\207m\214{OneW\223M3l\221y\231\260ek\200\204\205\242\221u_~\\pX{T\222t`\207\201V\201\202N\210bhsxui~Nh\200xl\236\201hqubpZ\233_\206vo\217wp\220q;\202c|\211i}\\fYZ\255}\251g\242mt\201\225\212a\205p\211\202;\207xe\200ZqzM\\\243\203\211\210\204x~yu\203\200\217XqrqrAm~\241vgc\233uk}I\200jX\244w~w\210\203n\177\222Eaf~_mY\225mc\202g]xkxabe\212~\201u[;wb}\226\210\211i\202\213\230kaztm_\205m\233rl\207\207^\216xByr_\230kx]zn\206\217~yzra\200w\207d\214\204o\225\231Ps\201P|yb\213slt\210r}\232\204\214{^tp\253j\222~^itFix\205ng\212Ne~s]\210|y\233p\214\207v\221x@t\217\203\201WpbzXj}hpq{\217o\207\210\204>\256u\215\207mvoT\231\220T\200xgtSj|wT\216j\201yqes\213mb\206TKxy\204`rjG\217t\217\177\216vt\205mjnVj\204\217\213[\177vaeYvw}_\204\204b\214\245wm\203r\206cv~r{\221\200u\317n\201~\201Vm\240\241B\224\215nk\223j~\216\235k^\205\204m\210\203nw|\206hN\203uxwG\211\241\234etCYf\200c\205v\230C\222[n\231h~85a\226k\237x\215%\323\220sMm\201liq\276||\203t|w\203\207fm\236\211\200}|N\206\207\212Ezp\235pl\202\262\242kCnPXsya\213\211ezP\234\202\211jn{f\177~gzu\204\214\217ypbt}\177\212i\232\201\213j\203x\216k^m\213\266\233]\212elPXGw\243\204n\2225vY?tyu\216cV`e\205\262\201}rtj\242wivt\201cb\205\\n\210m\265lXywg(S\207s{^d~J\224S\177qgkax\262\206\240|\212wj\275_x\222ls_yTpT{\1777\\\204S\207f~\222f\217\202yi\231}hXnxsp2\177z`Mwgmzqa{}\201qX\201K\200sW`pldc<~x\264zMP@\235qo\215\215h\210\200pil\215{;\211d\203\250s\202~\211\203^{|j\253xsfR}\211\203\244r\212v\177xsiy|>\202\202{zdZt\214\220wm~zq\243xu\215dihxYgkk\177Uo{`\225oWh\207\231s\203\200n\216yv|\177\207qi\203a~xl}\230\213\210\234xx{m\220i\220vqn\177qu\216l\205R\204\200qW\202xvk^fjsdo`m\177w\277Dr\\e\215\220\203\200tY}\202ql}pt\217vCt\211u\210\221\234\177\243xlsL\265\222\223\210d{i\213ztm\203\177kt\215_~vj}x\201\203\202\205\207fk\222\206ze\213o\200rjq\204z\243_\220sw\205m\217AN\220}r\245\206\201n\206iv\204\207_Mgu\217fmkXx\206\200d{}\253\206v_p\231wV\211SuR\226d\177ys\217hx}hx\215i\211\215joq\200we\177\\h\205Hxjy\206mk|\235{\204\217Z\216[oyc\243v\200\237]r\202hQU\231dR}C9\206f\214p\242`\234r\205\225R\233\205ks]Qakwycpn\210\236\216w9W\202t{\213pou}sf\226\235\214W\217t|\211rkh\212{mpvN\236\177{o[z\212\203\231d|ku\205`p\205\212T\200l|osk\204\201{myti\242u\204fc\213\205u\220g~n\201\201wmqlOtx\217i\201|f|\211\201k\206\205\227\213nz\207\234d\\\213Yq}\215`\210|wxz\203oq\200Zq\211oz]Zmb\207rwr`\214mh\216x^`u\200Xt\223oEvyr\211pn\214\234f~oowu\200gi\204F]rf\200\207]\202\223\177wzR\212\206f\203u\204{q\202|igpc\221w{js\205\177l\207^x{w}b\201\204\213Trn\203\177g^\210lrz\223\201z\221\210so\207Uat\204\200\210afc[\177\221gy~]m\227\220zsxt\177\207~o\242\221r\220\215pr\204{k\207\214~}z\233q}\210yGo\233z\206Mih{o\226w\231w}vuw\212yxV\217\202\210wo~\177|\203xJvp-eg\\qoj\202\\~d\211rs\210kPjZB\217e\224^v\200l\230f\205z\213pxohsvp\201}\223\216Z\200kEe_hsu\207\203{W\202\236_nghtb\177xix\225\231\214\264dV}gm\204\223\207d{~\202\255\207\205z\201\220cecw\205B\225eb\210z8LJq\237scI\241\231GT\2062vz\202z~\204r\205gcniO\\[D\256\201\255\250e\tFlz\270\233\177tR\227\211`{Q\222\201zZ]\213y}\214cfco\205\215x^mJ\212prh\254{r@\225Td~\225x{i\211S~\223\205\202]ojrx\203q\205Urz\210mumwm\177n\\\237\234{{zo\234p^i\201\1779sox\204l]\203I\204?d\210\000lJIL~m\207Ff\223z\200m\201\201f\216eyar{t\204\200ks{Y\200\203\244ze\203dt<L\220\202t\201m\224\255\207Q\202orBX\216\210ix\235\232mr\232{wp[\202;hlPfu{>^\235rxqr\222{\213|\177x\230\177rS_\202yg_m\177_Rpu~\232x|\207o\210mpm@l`ZoVem\211tj`_hU\233v\216sn\217\205Z\236~l\201Z\224c`vb\200\230w\210ty\215n\235iZztw\202\202j\200\205\224l\207\202{\206~`\211xn{\177vs8Yzn\201h\212\214{i\205\214n\177ZwLrfZrp{Xw\205\204\207h`s\214y\223ezs\221\201\200y\212|\211uulr~y\206\220\232\225x}\202c`}j|yjwn\177}\240^z@\205yv`ntiiS~\\\201Oystnx\236\\WyQ\225\201\243dkx\222f{x\235w~\205ttt\221i\204\213\221}\177z\204sx\215\211\241xs\226h\217x\204]yjr{\214`\207}~j~ul\212ogxi\207\243\215bjmk\177js~q\230{\250jfZxvj\227\204yxsi\213\226u\205t\201vZZs|\202ctct{\224\223}lhx\203ii~stc\231`z`\200x{p\214o\210mr|t\203\212g\215nu|\214\203v\177n\177\207^yvu}z\203\212y\211\213t[\222^wvr\260\226u\245c~zlK\210\212v\221\203yX}}\223_\213xv\177\233cj\227uhrgv_n\206}|~V\177y\223lbvzY\214\204b\212\212uur}\264wwyr}\203\177sn\204\201o\201cQ}\204q\202wxt\206\207^\177rm{^_\252\213inetuwo\210w|q\205mcvx}p\207\207myre\206\206txrg\222ufx{\203\\zjw}\211\204sqe|\202Z|\211tkh\212fk\201\211\177\220p\231n\215y_\203^^usf\212\\b[g\204sn~y{k|\212oal\220~wt\261xki{uuk\220c\231x\201uf\177\205uvrrZTxp\207\206`\216v\200\202`J\177wjxi}vrw|ksc`|zwz~\177ezxe~\211t~mi\262\211soj|qfb|\207xo\214taj\214f\203\217No\211r\200\225edwiz\231s~vvo\237\212i}\212dxr\203c\260\220\202}\220\213zq\203quPoc~\217\210\237\204nD|\207r\177Wngss~kwv\215{p\216w\205{Y\244\204yu}\221\232\267viLukUl`\210jZVxah\216nf{xhpi_a\213X\205c{\232\252za\207h\200`n^hzym|p\222\213W~\177WcY~ob_uph\202\227\206Su\206lk\200|j{h\243z\312jM{t\211\205~\223YQ\204\\\177\212\220v\210\203{\200x\205|Y\234riz\177\023ty`\231|\210?\223\215SK\214+}\246gQq\263x`\204e\206nq\270\225c\243r\240Zu\037\210gn\313\212j\202D\251\2414yJub\\\272g\220\255hVa\226lX\202\272aKuR\227lmn\222el]\202^i\216y\215n\203\212\220{\224\246|l\204w\\wl\177c\211ui\203[\201vc\201rPi\205\206\205\177\203j\205`oYw\rE~\224`\213bm3[\221\207es\021\236\202?O8x[Dfuy\\A\223tpu\200l^Pvyt\\\201\203\223Z\213\210\202z\200wc\230,d~\202wymq\250\215Kmpiznz\326SV\200\201ko\320^x^suwyht\212n\201G}\264\235ssXyh\200o\217w\210\203\212:S\205uh~[xHStqe\215~\232\221e\210uhbqcw\214a`mf~-n[gjQ\220\220y\205sJ\227g\213}bzJ\201\201hl\211p\243\212oer\201\210tlV{rz{\212d\221yC\205{\203\203\200\177Zjwzcoqt\200f\\\240kN}\211\200~\252lx|szx~_y\212l|b\220\206\233\215ru\203wa\204yht\206wwd\215q\230mx|qu\200\203\217\212\215Mt\213}}`}W\211t\203l|z\254n\216Cv\216~dpjoTa\205R\222\204\200\202}j\213_z7\211u{O\211\204Y[\200ynznk\215o\204\204c\201z\210\231\221mT\202u\221\222c{\252qu\244l\241k^ctqon\202]{\206fyprtqdo\211\212w\256j\202f\252x\231uqb{c\226c\215_ivu\211\246p\232d5\214pQ\200oq}am]\233vpd\240jY\202\224\216Xuj}}Y\213t^zb|matx\221r|\213rwf\230\200jo{p\202hzl\210\177\203x\203t\211\177~h~{\203z\200O\177\201{x\202_\237~r\203\232v\213g|g\207[\253\211w\246r\207ol\217\227a\227wK~{\223p\206f\221k~\215vt\204j|_mqt\205gz\216ef\201U|o{j{}~\257|tk|y\251\217\200d\201nzqwNg\177l{\215e{\210`\177qrhotY\217{hk\203n\257zuwrjz_\220ag|{p\207u\212vH~nvvmx`\200cX\224xf\\\221eb}\202\203^pp\206\200@\224}Usozh^{\204\221{t\202~\201uq\201p\201_`n\204rJgr\206\177m[\213s{\177]|iS\231r}x\201\202\177d\223xXV\177mw}\200Tb\200\203ezwwyWf\202\202x`\214Lwxtoiw\200b\220\206rhvlv^u`mzsw\213h\177yS|guuow]\230\210\177m\200ns|\200zxnfz\177e\203\223T\210\232Isua\177pea\203kl\231\202u\204jY`\251a\217mVw\177Kbzyjp\177rqjvcmxw\253\201\200j~t\212?g\210\213\177H|`\210^Rc\\~]\231\231nz\247yd\327b\206\227}tt3\223\216A\201{R\207I\220l\206d\205\207x\241\\w\204jd\200\207f\212f}\177fsjQ\254|w[jw\202tauw\\X\206\207~K~r_oJ\205o_c\205\210`\225\230\223xg\243aui\221\\z\205}y\346\260\206\200s\177L\207\2577\237\234Lo\212ts\233\224\244g\217\221\245tHaiv\214xcq[\213nbK\236qQq7P^iPym\313\226van\314GjlG\202\214S\215piY\344\207c\237\\\235{WI\277y\207\226x\213\240\211\241b{\214\257tp|:y\224\201Vd\177\230d\206j\200I^8_och`C\200\312\254\205g}\251yzi\202Z{ke~\240\256\215\213\177wB\\\212p\250\210v~`dq\177\206vnjq8a]}\232nlJMe\246\245g\220\215n!Q]z\235x|qO{\302\257\213\263\217f\203{RbO\235\210\213W\\Ew\261W\240|\207]\214i5n\226\211{mQ\205\035\232\221rd^h_Y\354t\262_k__\364@\231\216n_\213\177D\237L\246~Fi\2173\223r_\250_\236\204\211k\227\205\226Gxlit~seYO\\ow\232p`\220\240yi_\200wx\243exb^zdM\216\237\253u[\305A\201\214l\213\225u\212u}b\201w\252Ti\212b\266q\226l{\200cW\207\221\215\177qyC|\214y\244\205sjFvmVc\220P\224\203ypWYh\265\214\201as[m\327U\200\225of\211\201Z\223q\212{pw\2072\232\213c^\204\217|jmw\230q\200tpqXf\204w\203ex\204~{\227\276\222wq\237jku\204rk\177ez\244~\217\\`\223xaydo{j_U\201\204bZ\204\223~wW\207OR\201\253qr]K\241y^f\\ck\226\204\200u\200ml\200\210\203\273\222Nhewu\252\212\202\203t\204p\\t\217\215\205q\202zfa^\204o\213kmw]Vn\212\202had\275_om\224cy\201S\201\232\305\214p\177|3\230\233f\263\202Rirql\207b\261T\210\226\237zc\220]r\214jp\211\230\251~\214\2113Xzd\202\204aVrS~\227\216f\203\203~aY\216bo\201ov_w\222WtRM\206||O\202pR^\212\270\213~\231\237pzk?8\255^y\212\177\211p@po\202AA\210\236XiY_U\217\240\310\230~\221\270{x\253|\200lywwYd\216\207\220\177t\207q2Su^\221\206_\207OzV\233\246\202mz\212s\252y\203v\212bkk\224o\213\201\204v`a\216\177\237xj`U\204Rvc}kq\217u\234ut\210\200ghn\215\204\214z\213fNp\201s\241|gGb\203[gbnZq\221\211vx\213_u\221ex\224\260\233\202\211|CPm`\206yo}qO\200\240\241\220\227e\177o\212T\214ilrdLw\231ry|tdxg[\227{LSEuLnt\220o\237t\\eycu\217y}Sb\205fpOe\203l]\\nvlV\227\261\207wx\217hu\204\205\253y\207}\202jgg\205\210rw~tZ_rr\230\177v[H{H\222r\212f^\203x_nz\210g\\k\207x\225\207\201jyXfmbttzl~itr\222x\222v{\202v\233~|gN\223\216n\200\215\205n}\247}spukmub\211\177\206_\217u\207S\201\215\177\203CrV\220lew}~y\213\210mt\222ms\273Ttyr}\213G\213q8|}5\205j~s\203\202\200}\201\224qknxje}a\177Yp\177Uv\203Y\252f\177xw|\205`Yk\202t|\216\216\203SvyQu[qw[yz\203k~\215{\\V\206Z]w\215Wqu\217\212\302\230e|dvcz\233U\207\204d\244\202\210\203\207\232~m\213r}R\223U@y\233 Qmr\251mfM}oE?\1776kYsxZ\255\240\230TM\232|^\217cq\243[\237\262]\231\220v\177\203\305wTSv\204YD>\207\225wY\227\254\211}g\205vvN\202\276Qw\215r\216f\200YJ?i=\207~~ogmr\200\224Nzr\234nd_yiu\205ez\177\233\203\206kpQv\205r\216f\201\213vy\200u\214krj\210FS\225\244e}~:`n\302\202k\213daVU?\212\214`pP\204z\272`m\241}x}n$Y\\\206x\250e^Qi\234g\222x\200m}bE_\243\206u\202f\251O\210\211{qi>]p\300^\210\200yjT\326]\204]gbeiZ\177N\214o<x\252?\243np{{\225\215\204j\250x\220Pk\200qe~]leYdm\206\244fq\203\224tduMo\210\200e\203WW\212m~o\273\212pc\215l{zn\205zoQzqn_\204\226jQ}g\214q\215`p\221h|e\207\205xrfqz\203\204\230ttw[\203~?\200\201~\214xls7bh\225}w}\200i^\273g\177rbmkyh\201u|t`~\216T\242rq\222s\221\204d^N\247|y{ufzg\221tnox\206w\203\211\210}\202htIpueny\206u\207\300Z\201Vo\203zZ\212[wvQ}Pzkar\207|{\237\\lr\206v\211vsSA\265`\\i~dz\204\231\212o\201dq\201t\205\201\177rnYpn\235fz\204l\225vsd\203wp\210\216tnq\202}ivUh\203\\rt\206\224\177u=\230tos\221io}s\223y\276qunp\215}\217n\211j\\Zp\177\225zo\220e}\217qqc\207Zw\242i\200~w\210y}{I\\sb\221tcWo|\200\177\213[\235{y\225Z\223ik{I\207hx\237^q`Y\256xr`zoen\213\210\205\202\204x\\nT\210_\275j|\212K\262\210O\201pvVJ\305\226Vi\203hT\177\213\204\205\200`npn\223txvx\203}r^\213o\210x\200yv\\m]n\217iiyezt~\261\211\232fzp\210y|r~wg}tw\215\211z~jp\203\212\214boam}hbw~x^{v\213lr\210szm\177{}\204y\205lp|\177y\202joUw{oj\210ltc\212_yu\202e~\224p{\214\223\203\202oaEWuf\220pq\211at\202y\235q\236Tr\203h^\215[i\207eWe\237\200{n_ptlj\224k_Sorao\227o\215\200{\231d\205y^\210a\216a`\233sfd^\230dPq\200\177r`\207\203\177\205^]Ubyu\206~~}w\204^plx\177~{~`rq}\210pztsydj\223\200|W\201\203kx\200{|\\t\202k\210d\205hs~dfsjfrniuql\203e\210h\205\220s\216n\231{Z\215xnd\221\205\177U\265\204pZ\201t`@_Zj\215\210\223\205\211I\232xmlPwn\201w`Zw\202\221~|{l\220qm\321Vzbf\250\237t\221vM\217\204VvA\250~^[r^k\261U`Wzw\202xh\217T\202qU\215\221k\210W\206\221ogo|]r\201nyv\236\210Ua\222ZkR\204lXh{uq\207\220s_@\216qm\207\257OyR\250\210\334\221L\177`a\212r\236Yd\212Z|l\216\221y\204\206\224{y/r\251]{h\237\016x\217j\241{xM\207\214_R\2247}\231\217ZW\230jroB\222\217i\221\240\200\253i\324\216Yj\215hv\206\264z_G\212\210Dx({oJVn\234\221\1770\234\211\204B}\311]a\233i\257`wWdJ}j\221\201x\247e\211lu}czf\243vtv\250Xtaz`\254\242d\205Taui\221i]~tpc\200\250d}g\205*\246\271jy\370I\231Ld\032\213\262\261\200qO\231dOW^\261R\227\'\232\222\303ct\231\247D}oWKe\222zlpldd\250e\241n\212dt\202>y\212\221vsp\220{\215\212T\211hknO\377oSP`eJ\365:pB}[\221e]\240o\224tJ\240\275l\224gidl\211|\214s\245s\2339R\253lhyczWZy`g\227x\225\227wzyx7\216\223\233\177\226Rn\202\213I}\232vldl\201z\212nT\221s\205_e|IpPwE\214\205\270w\216Yk~\203f{\210oy}U\216m\224{P\222utVx\211Lor\226\215jn{vpD\273\201Lctqg\317I|fob\215\200n\234{\204\203a\230\223\206\244\202r\257hq^\201Jj\243yka\177`\221c\220yqcz{\204p\223Fb\211pgS{j]u\206z\177|\271c\214Vt\240y_\216hqea\217Pt\215i\222\226jy\221j\202a\300[`:\223Bo\217\202Sba_\217\203y\213ir`b\241}\210<_y\207^ia\237W\200\234{\232fJj}\203us~le\177|\200]jiXqX\213\232o\226q{\"\237\204\227{\266duR\231q\245\267UzmO\240q\242^<\226TEMs\220ocn\177h\237\\xw\267B}\213\214Z\203k\210tj\201fX{l\204\204K\203Y\236\222t\204j\207k{\243O\201M\211o^\205hm\214i{t]\245zs^sjvm\224Am\203\212gync\271Y\221c\200zk\240nhg\212}dz\254\223f`xie\236\212/Xj{]\205K\255j\203{\253\202|`nj{\210l\177kV\215l_fvzPuUz\222u\234\203\230Ox\204\256\203\215b{k|n\205y|\214xt\203q\211\211dzd^nn\206R}\177\177J\217\201\274l\217oqn|]\240\204o\203\200]mp\226zR\204bMin\207]\204hoX\234Zz~\243Z{z\200]\213\217\214\200LvnE\201y\205\210l\255Q\226\217k\212w\227R\213\212\232\203\230Gw\202~Mz\245\201\204mK\214q~zm\210pkwjwiya\250n\204\262Jn\\xm|\213Y_\207rdrr\210iact~}v\206Be~mLhK\211{\246y\212mqrvX\177xh\202xuxr\207va\214pnrv\200Z\221\206\215G\235\201cx\240\207nA\200l\200vp\217T}\221be[\\\205T\200N\201wf\214hx"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.915557324886
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999948263168
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/convolution_eightbit_reshape_transformer/residual/residual1/MirrorPad"
  op: "Reshape"
  input: "transformer/residual/residual1/MirrorPad"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/convolution_eightbit_min_transformer/residual/residual1/MirrorPad"
  op: "Min"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_reshape_transformer/residual/residual1/MirrorPad"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/convolution_eightbit_max_transformer/residual/residual1/MirrorPad"
  op: "Max"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_reshape_transformer/residual/residual1/MirrorPad"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/convolution_eightbit_quantize_transformer/residual/residual1/MirrorPad"
  op: "QuantizeV2"
  input: "transformer/residual/residual1/MirrorPad"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_min_transformer/residual/residual1/MirrorPad"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_max_transformer/residual/residual1/MirrorPad"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_quantize_transformer/residual/residual1/MirrorPad"
  input: "transformer/residual/residual1/conv1/weights_quint8_const"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_quantize_transformer/residual/residual1/MirrorPad:1"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_quantize_transformer/residual/residual1/MirrorPad:2"
  input: "transformer/residual/residual1/conv1/weights_min"
  input: "transformer/residual/residual1/conv1/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_quantized_conv:2"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_requant_range:0"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/convolution"
  op: "Dequantize"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_requantize"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_requantize:1"
  input: "transformer/residual/residual1/conv1/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/residual/residual1/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/residual/residual1/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/residual/residual1/conv1/convolution"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/normalize/Mul"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/normalize/variance"
  input: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1/shape"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\004\2438?\033X\017?F\312\221?\265v\210?\265\373a?\177\033\273>\'\rk?Y\305-?Ct\005?o\205e?o\307M?\254\353\247?\177\217??\212]\207?\022\274]?\033\307z?$U\257?\036\275`?:a\t?\362\2762?\221\335x?\327}\224?V\3201?\367\254\247?u{\233?\364]J?\033\020u??\277\031?\330! ?z\270$?\240\307\305?\035\214\212?d\020!?[\307A?\007[\252?-\325s>\323\301J?\0262F??\2129?\010\352,?\253\311)=\244\333\013?\202\344Z?\314\024\017?\214&\\?fo\006?\216\355\207?J\262T?\220eV??[=?\347\313I?\247\353??N\264\237?\374\027G?\262\231\004?\212\274\275?\375\240\242?r\337\305?\202~\204?\360\322$?\271\305\272>Ac-?\367U\257?\377\216\216?U>\036?\rf\032?[\302\265?\217||?\345\023S?^Z\370>\307\247e?\t\316S?\334l;?\203\322\031?\020\342\204?\274\227\272?z\230\"?\200\376\201?5>\337>\302\213\204?2P\274?\0164\210?u\232M?y\3225?\317$\237?\273\352\215?8\2728?\026\307\313?\371\274\270?\004\365:?1S$?\372U\027?=\0311?\363\305&?\257\216\235?3\0058?_\260\227?\221\377Z?4\233\231?\210~@?;\373H?\036DH?\211\363I?i\"r?r\037\211?\342\321\212?\205yw?\341(1?\325z[?b\366=?]\020v?\354\317d?\323\316$?\006rh?!\255\200?\217\267\014?\017\230\023?\030\\\253?S\374\t?\265\330\031?j\204\'?\246\240\244?G\n\347?J\201\016?0\023h?\363\023\033?\241r\021?\326u>?j\001\177?L|R?\026el?\001,\215?a\204d?\333`R?3\321J?d\274D?*\264k?\230\340\035?\t?\230?\017\307\333?\313\272T?\307\221O?7O<?\220\306\203?\342\276\243?\252\300\204?\263\250\030?\355\245\006?s:\255?\223\033\227?\250P!?\366\326\255?\322\007\260?\357@h?\355\314]?-\301\004?\345x\207?C\005\371>\267\376\225?1Ba?\220\362\200?C=f?v\223\265?\247\310<?\274\274y?M\275\r?\351M\n?@\276.?\243\253\202? hB?\256lO?\035H\262?2\001l?\002\255d?\351\0350?O\221|?\327\345\253?\0300\204?!xZ?\354\347W?L\3111?\244\261\221?\316\350F?P\227\204?\367$\203?\336\307\206?\234\315\200?\262q\037?\330_[?\014\013*?\031\022\223?\223\267w?\276Q\"?s\346\360>\016<\262?\344\027t?+\3243?\231\262\217>\032\272\223?\021\201\t?\206\360\303>\3567\035?\272\271\240>z4.?\005^\206?\325L`?\374\237\346>r\311\010?b\242\302?\"\333F?\n\213\270>\251\336.?s\347\300>H\022\273?C/\223?\336Q*?h\337>?\230m}?\335\364\221?\022\213#>\334Y\322>\204\203\232?\240,\271?\234`\221?\275..?_\303\227?\245\3143?\346\002\206?3\271\177?\205\355S?\274\002[?\345\265\235?\231*D?u\240\374>]\3343?`\250\257?1\332\212=)\362$?\333J\203?\007\305\374>\242lm?{\244\204?\240+\n?\371\222y?\"\017\213?D\344\202?|\014>?\306\020\332?\005\367\177?*\206\206?\236/:?\360&b?\327\003\025?\271\252\223>\327\316\242?\242r\235?\334i\203?\203H\037?iK\253?C.\221?\246\026??M\016\356>\307%\240?\247\254v?79Z?\276_\313>\250\243\215?`L\242?\003_\222?&\347\256>\217@p?\354\316T?\006\214\256?\276\233x?\005\262\037?\256\327\005?J@q?\3319\236?\303\310\026?3\327s?\034N\210?\033+\232?`\205\207?\262\330\006?\367\237r?\n\217\362>\361$L?\265C1>\227\376|?W\223\234?\363!\331?\306\352#?]\341\256?\002c`?\206\370\'?\323\354\031?\005\010\'?k2\233>\\\2558>\371\365Z?\321\n\212?B\352b?\023\350 >\372\226T>0y\304?\023V{?~\314\033?\366\317\303>V\247e>\002\204\262?_\374\211?zCX?\177\177W?\3707\237?\362\263\200?\230&\024?FN\203>\220\230w?\027\227\207?\312.K?ac\254?\276\265\\?\226\372\207?0:\213?q\207o?\030\200!?z\373\245>u\035\030?\360\362p?\0135D?X\334C?\304\203\240?\033\022\231?\341zI?\014%\003?\262m\004?\210\262\223?\302qK?\260*\003?\354\2466?\317\330l?\247A\271?\240\332e?\213J\200?\025\253\247?;I\231?r \233?\251\372\030>\266\007=?2\220E?4d\246?\301\020\217?\333|i?\014\205\t?pa\303?\\\256#?b\0050?\033\313\010?/t\246?\270\207\314>\014\345\265>\312\266\245>\026\234\361?0\321Z?{\301\220?)+\030?\320\256\n?A\030\245?\001}\260?\\\223\207?\r\r\234>\263\2259?|\232z?\004g\254?Y\0079?\362\246a?\335\003o?\237\256q?\314eU?\221m\003>\277V\024?\r\302&?o\321\253?QD\023?M\363\016?~\307$?\230\240\225?\341Vv?\t\252\201?(:\371>N\271\010?r\312\033?\375\tD?\235#Q?b\302\367>Y@\240?\255\356h?\004_\251?\370;??*\'g?\240\021\222?\023\357X?^Z\333>\345\276/?sg\003?9\324\257?\337ux?\330\361\210?\232\373\245?\312\223V?\222\005\256?\360\020\232>\262\341<?\267\314+?\326\305\265?\224\204\202?C\323~?\240\213\001?\0079\270?l^\203?\270\210~?X=H?,\024f?\274\225\372>+\226\020?\200\0368?7U\213?\nB\207?\365\037\220?!\221\031?\303\"H?o\361A?\033\343\232?A\024\204?9)\022?\337\2657?\250}\214?\301\305u?\031\207\311>A\337\224?H\263\220?\014\262\253?\003@\263?\342\303=??\321\037?(2\024>Q\376\215?ngM?*\r*?\335 \342>Z\243\237?\357f9?M\031T?o\240\003>\013yV?1\010Z?^;#?%Ve?\343BB?cR\231?\267\333\220?\353lR?dT\365>\302\340\220>f\\\313?J=\232?\303\225\026>ucD?\204WF?5k\275?\300\301U?#(v?KT\201?\252\r\026?`\255\214?!e\214>,\337\006?\236\301\334>\360~\327?{\271N?\345`\004?\001\322U?\325\363\334?\242\0247?\351c(?<\334R?p\3604?\246+\024?E\3512?\342,\035?\220\305\215?\347\352@?\010\321u?\"]\333>\371\223\031?WPq?\252\362\177?\030\343y?\235mC?y1\031?\327\374d?5\261\337?\263\320\324>\334\303T?\245\221~?\306\313\210?\353\227\263?\333r\005?\304\033i?l1Q?0\3466?}\220\n?\314N\255?\332\334\226?$\314\351?\270{\204?\343:\230?\2475m?\004\034]?\014\233,?8\036I?#\353\200>\023)\034?d\'\210?\032\362\016?\232s\213?\355\371\210?\233\205q?\364\221t?\r\3350?u\355\'?d\321\336>TT{?\350\'\203?\362lq?\354\377=?\215\024C?\302Z\210?p\245W?\223t\307>\243\320[?uB\230?\020\226d?\363\017=?/,a?\211\246H?t\321\010?\205\317\007?\373\250D?\263\261\225?\354U\351>@\357\301>\0109\217?\242\2331?\232OC?\374o\000?2\341\257>U,\243?zn\251>\337\274f?\205\330Y>\246$O?U\220\201?\232\257z?4\253\000?\\\272x>h\301\\?ev\014?\326u\323>\354Z\r@\340\341\365?\346\242~?\234\337#?U,\260?\r\343\014?B/l?\014#\214?\177P$?\326\315\253?\352dI?F!i??\t-?#Xq?Y\373\251>\233\r\240>\006\233\376>\000\307\247?\235qJ?\203B\255?y\313\276>\203\034g>\223\327\264>C\000\311?!}\220?\014\331\026?:\231-?.N}?\254\010\346?t\233\221?v\256Q?\310gm?\230%o?c\'\244?\333o>>\022q$?\037t\">\226\034\260?-\262\004?\r\333\211?\014\205\212?\305\223\360?\345%m?\265y??\371\361p?\334\320u?\037\370\213?Q\362G?\352\324{?\r.\017?\201%W?4\3650?\302g5?\300+|?\376nY?&\250\214?\352\245`?w\230\035?Z}7?$\204P?\330\231\226?\034\376\210?\373(\212?\031\254T?\246\206\261?\\\212\207?\332\324\357>(\207F?\242RU?i#R?-\340i?\243\212\266?\220\260,?\341A\243?\316D2?\366\342n?\242\213%?\372\032\377>a\346\356>\331\3571?\226\217B?m%\261?$\235t?i\205\240?\031\371\222?\306\014\356>VvN?\337Q\251?\227\026L?Txl?\372\'\035?\270yi?<\221\204?\207\343\376>\322]\227?\351\277c?\200S\204?Kha?o\262\346>\265\031\203?\3468R?Zh\241?\2255B? \214\277?3\327k?\342\\\215?\376=,?\315\347N?\33178?\321\214A?\007\336u?\355\307Z?\241\347G?\364\270\214?\252\3124?\345\315~?7L\'?\253\355\007?eO\226?\303\327L?S\302???\312\036?\300d\377>\217\014n?S\234\343?u\316\006?\377\312\213?\036o-?\362\002\233?\035W\246?S\245\215>\313\246\310>\271j\032?]\230\036?C\003\006?pP\246?\300\010d?\333\'\304?\223\\\027?\224\005o?\354\326\267>\206\274\"?\211\274\013?\262\342\026?hTn?\230<\224?G\tI?\306^\204?B\376P?\300\337X?\227\223\200?dC\321?\246\230\241?\252cG?I\257\023?}sT?\350\257\327?\001%R>#\013K?:\254\303?\205\275\372>\221\324\223?\307lW>:Uz?$6\201?Q\321\220?\262\325)?\252h>\274\330\343\020?\350\350W?\373]\224?,\260\007?\220\263\264>\005\332\227?CV??=\312\334>c\361\321>\243\247\031?\337\010\246?2\201\037?\341D<?\367\020\027?\037\317\231?\240\006S?\330Hy?\303\232%>\2513!?\246q9?\274O\211?\362N\n?\240\376\323?]\025w?\222\336$?\014\000\362>8\242\204>\006\036\027?\036b\324>o\022\235?\177\013b?\031\346\014?\266\260\264?\206\316\253?\016\236h?%\202K?\207\3336?\341\2373?f\247\360>\003>\004?\311\3602?\346\271\003?\035\366c?\033\267\037?\237V\202?\210u\r?\3254\n?\274\215\301?\336##?\266g\343=b :?K\216\242?*\332\253?\301\330Z?\321\305\361?\311\006\204?\315\237\245?\327\346\'?\251\236\327>\371C\n?n\265~?9\246\257?\252t\217>\304\305\251?5\366Y?0X\325?\367\2036?\005P]?\2523D?\210ty?\265\036\002?:3-?\251\035!?^VB?\"\325x?6Xh?\\*f?\253\351\016?\034\3157?\225\334\344?\350\311\225?\346\r\353>\014\223\014?\033\342\005?(-\270?\246\341\026?hs=?\001\023t?f\225\222?\252\257\201?\327\342\033><\304t?\002\360E?\017\202\242?QD\017?"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_1"
  input: "transformer/residual/residual1/conv1/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/residual/residual1/conv1/InstanceNorm/mul_1"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Sum_1"
  input: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims_2"
  input: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual1/conv1/convolution"
  input: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape/shape"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\034\004\244=\312\366\013\276\2577c>\363\256\350\276\251\253\365\2741\337\026\277\037\036\204\276^\300_;H\016\315\276\022\206\354\276\006\013M>4\331\255\276z\005\231\275\352\354\006\277\304\217\313=n\025\235\276%c5>7\0226>`\365\326\276\246c=\277\347o\242\276\301F3=u\222\212\276\337\230\253\275\000\001V?\227I\222\275&\346\233\276\265F7\276\226-\032\275\360L\267\276~\255\241\2764\250@>\263\276\007\274&$\035?\357\272:\277\200\321\206\275\323\246\345\2763\025\233\275\226\315\227\276.T\254\275\236\017\037\277\211\261|\276Y\332\252\276)\361\031>7cg\276\263\006\340>E\334Q>\003\334\273\275\023\3578\274k\225r>\2201\035\276H\365R\276\260\366\302\276)\377E\277^\242\342\276j\342\034\277\243\205\036=\242\005\355\276?\324\222\276\025\272\341\276\020M\216\276Yk\022\277\356\030\016\277;\\^>Y*\022\274s2\t\275\370\213=>:\200\227\275%\354\334\276\270\214\343\276P\226!\276l~\025\276\002\271\017\276\362\322\007\277$\330\344=\036\232\035<d\302]>\026R/=\\\377\354\276A\246#\275i\261\243=`jT\275P\360\333\276\212=\230\276\373@Z\276\230\244\r\275\005IA<\304!\023><\016\224>7;\377;\324\332\241\276\323\346\332\275\2718\246\276Tn\227\276eD\005\276\220\277\203\276~\021\"\276\213E\'\274\336\307\322\275EB\267=5Bc\276..\367=2\2622\276\241\002\003\277yR~\276K\253\"<\211\264\273\275\003?\272\275\3752\307\275K_@\276\273\006<\277\364\351{\276\217\032\221\276\341\350\334\275\305\\P\274\'\226z\275\221\337\272\276\004^\270\274\017\363\216<\315\271:\276\013$\242\276SqQ\276\330Z\305=\367\314\026>\241\206|\276\212\321\344\275\255X\363\275\021\234\367\276+\204r\276\306\254V\275\275\2029>\030\343\203<\304\207\271\276\225\303\240\276F.\276\276\236\366Q>\221\003\035\276\234\261\322\276\177\'\254\276\202\340m=\271v\337\275\013U\332\275\266\214b\274a\321)\276c\034\n\275\2552\030\276\321.\256\276\221p\213\274\270A\224\276\223\241\017\276\341\232m\274\255[O\276\353e\255=\305\314s\276@&p\276\365\242/\276\257[\202\276\362\016)\276Y\305\330\276a\347\314>\203o\036>f\005\316\275:\313\305>\364\363\222\275\\-\362\275\232h\210\276\021\222\351\276\204+\000\277]\303\337<a\312\316\276L\2353\276\227B\336={\t\216\276\2055\271\275\326vI\277IN7\276\244+\007>\271T.\274L\325_=\004v\340\276\202\251\273\276\032=!>1\304\232\276_\203\001\276\2701|=pt\360=\315(\261=0b\017\276\342\203{\276\325>C\2761\224\241\275\342e\212\275%\336n?\026\223I>!\241\020?\370X\333>T\202\013\277\277\016\223\276D2\243>\235\022\017\277\313\271G\275kC\020\276\0200\334\276\013\234\324\275rl!>\300\242\230\275\323\277\307\276\364\225\007\277;\211\t?nm\031\275\223\007\037\2778\005f\276\261V\013\277\201\310Z?\223\032z>\326\t\232\275\365\220\356\274r4)?\233@\005>\262\3263\277\020c\360\276\343\230m\276)\215\033>7\001\016\277t\213\372\275\273\013#?\355\216\022>\035\341\266\275b\272\'\2767m\304\276e\313\262\275\"\244\363\276\230\221\027\275o\307\370\276\035\031\225\276\330\356u\276j\332]\277\266h\005\275&f\264>\202%\r?V\330\225\275\323v\261>\240u\005\277\374J\307\276\212\005\023\277\352Fv\276x\367\251\276\275\226\337\2767\230\222=\370\025\200\276,\372\024\276\254\323\324\276\376\253\324\276\253\211\227\276\371\005\333\275`\213\353>`\027\241=~\216]\275(I/>\371v\251\276\331.\372\274N8-\277\205\377\265\273\0106k\277\272\017\364=\206m$\275\221<\023\276\272\"\340=\001\253\262\276\310V\353<\330k\203\277-K=\274Em\274=\227\241\261=\3176\307<>Y\312\276\374v\010\277\344Q\207\276\360\345\016\27680z\276\312H\311=#\335\257\276\267$\371\275a\345\013\277\320\022C\276D\017\r\277\270<\313\276\n\201G\277\027\321&?|\221\214>\022\365{>\001m\270\275\3625\031=\023=]\275\\\232B<\320\266\256>\375\262\004\277\322\375\031\277\221\320\312\276\021\345\350>\227\023\311<z\344\004\276\364Qq>\275x2\277\\\261\233>3c\342\275u\205\306\276e+g\275\327K\230\2752\226K?\367c\333>\203\207A\276\005\247<\276Y\305\031?\2439\320>\230\355\361;\355\220,\277\303\316\261>\372+\002?.\277j>\264tw\276\005\221\335>t\013\270><hk\276e2\224>{\321\345\276\nL\346\276\237\260\031\277Q\360\033\275GA\302\276\275\014\241>\361\270\304\275&\216\221\276\353\2135>\030\301\341\276\266>\027\276L\324\302>\372X8>|?\237\276\036\204\027\277-]\203\276S\2660\276RI\024\274\363\251M\276V\277\002?\341\006\211>\313\206A=\327\306\010\277\037\000l\276\261k^\276\\lv\276o\255\252>M\001\213>\332\261\211>\031/\227>r\356:\276\000\253\240\276\373\200\322\276\305\226\324\276`\215\">\376l\240\276\024i \277/\335*\2768N\313\275\355\344\206\275U\027\312<Z\210\227\276W\326\312\276\343\305\277>0y\202\275\016\031&\277\023(\006\277{\033\263\276\024\305\264\275\260f\202>\353+\325\276\036\320\370\274\'m\004\275\017\313X\276W!F\277\312o\230\2766\273[= \251\273\275\207\302\035\276\327\377:\276\037\3432=Il\264>\336\365\346\276\304\026\032?\336n\220\276Y\rW\276\371\304\202\276\357`\216\2767\362%\276\310\177\223\275h\3276>\033Mq\276\345w\005\277\254T\001>O\020\270\276\017\032\000?\276\356\036>)%>=\340, \277\005\202\203=yw\227>P\377\273<\371\306\346>\3075o?\206\002n>\266X\301=\013\332\r\277\261\307^\276Zs\247\276\254\200R\276\337\345\004?\266\312g\276&\201\205\275\251\206\237\275t\031#\277\344\000\013\277a\222\276\276\324W\221\276\020Jq\276\304\216\313\276\261\020t\276A\371y\276zDE\2763\353\332\276t\371o=s\306\202>\025\013{\276KY\224\275\027A\225>{\342;=:\314\271\276\226\020\200\276d*x\275\274\260\324\275\276\260\250\276$\n\351\2758\337\371\276\262\224\261\276\037\005\222\276oOp\276\373D\217\276\020\241\266\276o\010\207\275\003?D>\033\366\035?\025\361F>F\210\245\276T\340B>\354\022a\277\022 <?\336\r&\277\232\304\213\276P\341\365\276\361o/?>\003G\276\007\013G>\324\240<\276\342\373\310\276\254\313*\276d\311\332>s\241\267\275\261u,\277\367%\231\276\315\314\233\276\367\253\226\276%\270\036>|\312 :\230\3567?MB\301>\345x\371\276\337\357\"\277\000\276\023\276\005\262\260\276y_\034\277w\213\177\276\275\177\000\276\033c\204\276\227xM\275W\344\222\276\252\215\230\276\210\246\000\277\3047\270\276*q\212\276hl@\276\267\204\227\275\276\257\227\276G\t]\275.\0269\276:\241Z\276\235\310\212\276\327R\307\276\261\237+\274\272\316\205\275\213$f=\034\357\211\276\376\304\013\277C\017<\276?\344\022\277W\225\377\276f\334\337\275\341\030\212\276+\025\251=\333\337k\276\316\\\204\276h\027\\>2\231\334\275\324\210\005\277\272\355\266>\377\335\032>5\2309?\003\205\032>\302\027Q<\376\203A\276\027N\261\275\033\304\177\276t5\344=\225mQ\276\026f\254\276{p\223\275\332m\224\276z\035\216\276h\217\260\275\251\322\006\276\335\316\317\275\034\'\210=w\2102\276\\\270\004\277\360\266S\276\026b\203\275\302;\036>$\305\260\276\346i\026\275\334t\205=\2345\014<\335\023\314\276\275\313;\276\343\017\276\276\337\256\213>B-\247\276=\223\366:\320\214\004>\234`I>RZ7\276\376t\374>a8\372>0=y\276\206\r:\277\323\273\330>\217\371\275>\222\201]\276\336\323\265\276\317\252\373;\023\304\235=q6X\277\350!!\276%\273\017\277 \312\305\275\220Q\302>\255\017E>s\271\336\2765\352\317\276\177^)?\253\346\210\276\242\325\314\276\303U\323>\033\226\n?\271z(={\365^\275\226\203\236=\201q\244\275\253Q\337\274_o\236\276_\200L\276l\364\373;\364V^\276\035\256\315\276\261t\023\277}2\204\275\"\306\263\275g\336\362\275Pm\321\276H\344\361>\356\213\315\273D{V\277_\2462\277p\267=>y\267\033\277Rd\325\2761`\\=A1/\277\261\025\211\276\023\2618\276w\331\257>\221\325\212>\016\311\271\276<\353\275\276\217\371\203\276\303J\346>\273\271Q\277~\261\230\276\254\372\227>\242K\374\276dy\021\277d\374$>s\276\315=_\245\214>f\273\256\275\3702\232\276$\232:\275\233\020\305<\216]W\276\267K\307\276\3161>\275\303\326\272\276\037\323\225=o\254\200\276\010\311A\275\240\306\372\276\316\2333\276\"\027\273<\313\330\344\274\235x\262\276\244\342|>\3257\217\276\200\254\010\275\251\217\233>\021\3207\274\035H\364\2751J{<\020\302\202\276\301\303\270\276\263\330\001\276\225x\234>\020\273\222\276\255\377o\276]\360\032>m\224\260=\207&0>\224\324\037\275\251m\"\274\230\250\227\276\027\016\334\276\225\320d\276\234\000\016\276\333\202\\\276\026{\304=\"\231\311=\320\376T\276d\252\206\275K\247\360\276\214\275\327\276\345\006p>\306\267\212=\202:\321\274\257\350\321\276\335\022\324\276\tD,>aH\240\276\212B\225\276\215\236\201>\021\3640>\021\016\213=\220\251\217\276\275\305\211\2762Z\216=an.\276\205\232\205>\003|i\276I?%>\377\301}\275M\213=\276\352\262D\276\331W\210\274\343\203\037\276\035\261\217\276\003\022\326\276\313\324\362\275\027\225\003\276U5\226>\374\372O\273]b\375<\363\305\017\2773H\374\274\311\205\021\274X\275Z\276+\000\363=\245a\032\277k\367_\276K\323\002\277\364\306\377\275h\352\214=\304\333\243=\215\322\203\275\334\335Z\275\372\376\251\276J\003\262\276\303\304\375\276\\\005\327\275\211k\213=\\\3205=\372\t\210>\367\212%>?\272_\275\225\362\336=-\211g\276t\220\313\276\024_N\2779%I\276\337\265\345\274\222\317\033>\276\307\022>\3658.\276\210\242}\276\365\031h\277\233\024\257\275\264J\223>\362\034\034?\232`\264\276\326\252\t\277\321\266\247\276\234\204\335=\251\"U\277\034\327\214\276r\027\204>\276\331&>L\316\363=\021\376&\277\306\033\307\276_\220\266\276x}p\275\266\221\035\275\307\033\200>\363+\276>a\223\222>\"xm>J\005\025?\254\216x\276\254\302f\276\250\317\375\275jL\037>\251\240.\277f\363\314\275\352\000\262?\256ae=_\272\030?\345k\n\277\376g\253\276\311\232\275>\332#\001\276\305\340$\277d\301-?\276~\311\276\327\224!>q\315\034?\322\nU\275\321S\222?\261\256J>d\025\221\276t\311\271>E\031\321=\244f\364>\'\026\003\277\254 \317\276\035\016#>\357\003\006?\203\0134>\376{1\2755\313\251\276\275!\271\276\033\216\274\276\201\247c>3\035\301\276\007\361\022\2772\276\251>K\237]>\213\254\211\276&=\325\276\036Qd>&\275\244\276\254\005\241=\037\t6\276\270\3044\277\347.\033\277\253\321\007>\223\235\275>\276\317\275>w\237N>\177\'\274>\301\243\212\276\221\313\206>\245\3743\276\004\353\234\276\'\210}>E\351\212\276\257\251`\277\323,\242>\360\024I>\203\ts>\375n\224\275\236\206\242\276Z\302N\276\232T\216>c\260\205\276\027\214\240\275\211\230\371\276\250F\024>uKG\275\362\215\255\275\tq\276\276>\020R\276]\365\326\2762\335\027\2768\263C>S!\366\276A%\272\276\005j\214\276\256s6?\360f\242\276\306\010\223\274\017\320M>\277 h>x\347\277=5\307\001\277N\037\013\276\324\364\035\276\026\257\032>\217\220\270\276"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Reshape"
  input: "transformer/residual/residual1/conv1/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/residual/residual1/conv1/InstanceNorm/mul"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/residual/residual1/conv1/InstanceNorm/Sum"
  input: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims"
  input: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/residual/residual1/conv1/InstanceNorm/moments/normalize/mean"
  input: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/residual/residual1/conv1/InstanceNorm/ExpandDims_1"
  input: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/mul_1"
  input: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/Relu_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/Relu_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/Relu_eightbit_reshape_transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1"
  op: "Reshape"
  input: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/Relu_eightbit_min_transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1"
  op: "Min"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_reshape_transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/Relu_eightbit_max_transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1"
  op: "Max"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_reshape_transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/Relu_eightbit_quantize_transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1"
  op: "QuantizeV2"
  input: "transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_min_transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_max_transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/Relu_eightbit_quantized"
  op: "QuantizedRelu"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_quantize_transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_quantize_transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1:1"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_quantize_transformer/residual/residual1/conv1/InstanceNorm/batchnorm/add_1:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual1/conv1/Relu"
  op: "Dequantize"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_quantized"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_quantized:1"
  input: "transformer/residual/residual1/conv1/Relu_eightbit_quantized:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/MirrorPad_1/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/MirrorPad_1"
  op: "MirrorPad"
  input: "transformer/residual/residual1/conv1/Relu"
  input: "transformer/residual/residual1/MirrorPad_1/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "icaVdj\201rh\255\225\224\213r\212l\210hy\207\272\215\212\202\213\252\226bh\224\201b\250\201\203l\232\231_\200\204cp\230l\202\210\210\206\211\207{Lb\224Wbfco\210lgpc_\203@\240\207\206]\240\270X\207\224p\245t?\205N\314\265\270dq\227r\246aUa\236q{T\212P}\242\214\225o\210E\245q\203\\s\207\216\214|nq\206tdvOteytvzu\201\214aorp|Ytvi\210e\221\210V\201dL\210b]ji\210\213fjQf\202Go\242h\210S}ZU\214hqm}\203\237d_[\037n\207\177Ng\216\201abqa\202\177yw|\245x\227~{\200\233}|^\217h\214x\204{\225\201h|_|n\223z\213d^\210\207u\\m\203\220zWjer\207\202`\236\214{\206k\221\221Z\246\226p\202yk\216avi`f\206\200\222t\210\214S\221\215q\212h\211x\220\214\223z\204\214\211vwcm\210uy\207{\212\202m\211qqm^\206~{Wd\202zswnfs~T]p|\223hTe\200\247\202m\204lolm\216\216\224dpt\237\206\200xsof\203k\232u\223j\217|tsn\232Z~Q~\201\226\215^oL\231w\207sq\207\264\207\221ah\204`m\200<IQ\233s{gy\254\235{\206i\226K\237Us\202vk\226\200j\203mc\225q\230pi\230]\204\200ykq7rH\217k\267\240z\200R\237\207mkr\205d\225\200zuozv\234\177Rqo}\231T}\201\204Ur`\217lSi`krmN\233\203\214~p\203\212X\215\201sxhv\216\\\244tp\206r~[]v\222tzw\203\212\210\201zcl\200ls\222no\201\205y\211_\203B\216ncc[knb\233{W\211DkTFr\207p\232\264W\273\202\203\236ih\200Db6\201\204lT\203Uj\214cRz~jc\\\205e\213{t\205\200]\177_\251\216{\204\210\226vld\212w\207\226\213\200\201au\232O\206rd\212\205}\200\212~\215\211\221zpm\216\177t\177F^f\206~\264\233^c?~\212d^z\205\235\213sKmf|tjT_\\\217f\226`pp\201cndzp[}idv|b\216qn\202|\232\212v\207~\211\205T{\206\\i\220`\221j}tp\243c\204`\211v~\232\203o\215\226hRk\200xy\202RJmq\242\214{\205cx\256\207\213`]^\235\214\202\205\212\211\227\207\2039}wqj\210Rkj{V\202^\200\207\2035V\211peTvoX\204\205o\230b~xo\211}p\261~u\217fK\207fjmo\250Y\2033Ov`\223AVddt\215lfa\203i\217\200n|\216\212i\205\226\231|a[\202A\207\200xF{{\\\225\023\215DnhWP\217po\235\242\273\177vX\225\201\253lb\217F\304\245\254\241\305hD\246\222\215i\210i\251\231\275\226\201AL\202\201\236O\215\210\177x\215{`\207w\216\246\202TKuuxN\205c\206}kj^ry\216}\224lwf\203\204\205|q\203i~vnv\215dm\177x\220\220ved\200\214j{uq\201s\214r\205Wshx_ycxY\241zlu|\222\204\201\202n\207z|~ndhhmxr`zxX\210;\241\202\215oYrnq]\\^o\202cm\211u\226oo\215s`\205m\204zgd\215gA\216v\237O]_un7m3\203f_t\215\\\201I^udWg\202\200\221|n\201\204}bloxp\222xd\207\217\205\213t}r\232eus\244w\206x\204\246\226zj\234ph\214\235\205\207k\207rvyg\204\220k\211\207\207\207\207\204mhc\206vinwV\212u{\204}T\206K\212f``\204r{z\212JQ}j|\207\260\240\201dV\233v\233p<\253y\237hn\203Xu\241\222\202pn;\244\204~U\212\210\220\205\205hls\203mb^~v\202t\202So\212|\212eq\213\204`\201\206r\200l}Zj\204vH\216iSp\205\227v\214_{noSe\212y\204u\217c}\207d|rrp~o[lQy\211qrl\242y`q\217\204r\205j^\212\204\221\221\210vz\224}\202m\220s\210\216m\210\202\212\215l\201u\205\216y\235kxy\213|miq}vdcro\205\206e\221\205i\201f\220\211r\224\203rvrtwo|{ech\202\210d{pY\223mizt\207\177\232n\206f~ywpxc\\\221vr}\210}fq\202t{|}\220v\211r\207\206g\205o\207|\202~`\201\201\211\201\204bm{\221e_ax\212\177x\244q\205n\203o\206\204v\220j\206w\232m\214\201\200hx}`\222@}X\221pk\216\256\206cNT\270}zg~\215\236\213\232]g}`unW^n\211\212\214^q\261\205e\220h\206[\223T`\213bl\242\200_\220{X\207o\207yy\230s\211\206\201ylEiO\212\201\250\237\211tX\200\203qz\205\202hq}z}rvx\211\177_czf\211io}\210oqezrdadpp\177[\230vxuo~\202u\213onmgyxe\205ju}l}yl\212\205qx\215\202\201\217\201\177s\203\210uj\217ov\202p\201\210z\206KY\203PmdM\235h|si\237Ubdm_qjk\237E\244\246}{axcO]T]\210rn\205_w\223\206D\214z\211\201Wr\204m}x\215aj\217i\227r\203x\217~tlfjx\216\227\213\213{e\206\224h|wo\206\202\204r\222\202}\177vznw\223\210boMcj\203\214\261\234qbL\207\212e[|\202\231\206\201Y~b\202\205qcfp\206i\217`T\202j{\213s\205{c_\211\207qts\210\204j\231|\237\210s\207_\205ioz\202f\223\216t[\200\254\205\217\241\177?\206\202\207\177~d\244\226\207v|N|t|[DQ\240\201\232j\205{hw\230\213\206rjc\233\225\203v\204\205\222\205\211^wgtz\211_lu\200q\226}X\215f`x\210wiaj\212q{\201z\215yZ\206y\216\207\217\260kkuuN\201c`:l\214l\224Hfpi\206lhh\\m\201\211W\230xu\215y|d\206V]\\\315mfOnjw\237\204\206r\204||\260T\215_f{g\177\222\214q\222\251\245{Zv\201y{lk\303o\231\232\244\205\302dM\217\212\214J\250T\240\222\233\177\217C&Q\213\210{\254\206S\222x\211i\207\205|\223\201cgy{\203ynb|{r}zypv\207\207swp\202\205w}W|qst\222|\205ausq\211\216v\202]\177tw\206\200{\201\177\244y\201Rwhub\204qq\226\207qn\201cz\207\207zw\217nxsj_na]ghug\212T\231A}\236\211\206\214\177\204i\237HX\221\206W\211\233r\222\204\211\224~\204\245\211\223g\200\212\207\177p|n\213pk`daocN\213r\210pgm`W{r\200ko\200\177v~bxu\203qt\223\222\214\245zXny\263\201,{[\260s\200u\216\205\203b\237\237{\204\240\264\202\234c\213\212\210f\211nUQ^\230uq\242~\240{{tfet}\204ISl\\\207jib\243Y\233fU\221\203arP\\\255\\#Urf\253\226\227\270vRX\243\202\3119\203\377\202\342^o\210`\204\256\231zj_\030\221\227|U\233\206\177\206zU|Qt`S^t\204\201g\207Ou\242vdv\216\230\203f\231\230ax\201\206Pkm\206d\220J\\\203\211\217_\202L\231aSj\201igxl\200e\221\217b\200\216U\217q{~zQo\216wgV~m\200\202\231y\203\224Q]\205\177\207}\232e\213\221\211v\201\215\214ctsxnq\202e\226{\241_Lg}gf\223\201\212cs\215\206NWjn\216bt\241}q\213R\250\211c\225x\201j\201l\225kw\204yg\202w\260\177\211ZW\251^ewm\226}\234q\205guh\214t|j\200\247\211\233w|\213Sdw\203\204sz\237h\213\215\226\234g~\\\222e{c\204\211\214\177o\207Vop\234ojY\207\225k\207\244\207|\201\226\205w\200\207\222c\220r\221f\225\220\204kdv<\212CWB\200x\201\225\271[Z82\232\235wd\230\207\224\215\217ZmN_\\5Od\214\215z\224Ob\214b[shi[\226aF\242r\201\245\200h\236xb\206v\217p|\213{\203\234xpto_lr\206\234\253\213aDczap\211\206rtzd\200eix\221uuo\233e\234co\203\201\220ht\205\207OWbsubq\244rx\203^\235\212e\231n\177evw\230e\223qn\235jknI\177\222\206b\223\213\177\215\213iuvriq\274j~\231zmgcr~V\215\214\220pt\207\214\215l\205\265CyisyS\260\221\233Q\244\255\203\203W\235wgFWF\227H\204N\262\177\234\200E\200p\234\227vb\212~\232\204\233bm\233\210\212Z\220~\225mrdqg\177s\226\227\223}t\206\201hpky\216\220n\203\203\201t\177\207\231zg\236\223naJhk|\222\256\205aaIz\234oT\207\207\217\201u\\\201R\203tX]q\202\212i\216_Wvy\240ggz\213]^r\222o\\u\235{y\235i\247\204u\230q\222[\204k\227^t\177\233>oj\226\206\203nB\265\214\215Fni\307\262\202HPU~qgG\'\204\246\204lIu\211do\215\200\177_hm\204\245\177`\220z\206v\206mmNj[mfcz\207\207\213\206P\214\207\223hnv\207[f\213\177yTr\231xa\220b\234\231~\277u\210c\202H\221_y6@k\275ahy\220Y\205N|\200\\g\250\210@\244Y}\220\200\254m\225WkW\300~gQdm\242\225\215\260v\216\226p\301\033\212_t\211Io\203\226`\202\244\242y~\202z\216x;\236\243\210?\207r\204\267vr\206\207\203u\2537\226\212|m{,0S\217\220v\214e+\177d{x\204|q\213\205nmrv\212uihw}\201x}u\\lw\205e{\207\200\215y\211^Z|gR\231R\177b\206ld|\207w\210]}xe|w\220ri\304iwjgeu~\214\216z\200\207zm\200P\204\205\207\201x\220u\203\200euqzy}|s\206\213g\2269O\214\210\214wx\207w\210Kn\252sp\236x\\o\237h\302^s\246|\213j\227\250\234v\207e\205uvtjmifXT\212w\206w\\\2008l\200q\211j\211h\177Tik\233z\177\204ccxw\221`x\205\207x\210\230\203x\204t\214\205\224e~ug\222\220fT~~\200\207v\211\220\222\233L\207\205tt\214om\200v\200\207o]Xv\206aqUpi\214hqoz\221uFY\233Zx\203r}\233{\206\234pPtt\234w\216\230oy:\236t*\246\270\225{^\201}wq\205\206\177vg\227d\202Y\203\177\233}oPz\212~fRNyjuj[\202q\201\202T\207fvo\202fufgo\211\213\\|gn\215otty\211\177`tSZ{^r\210ww`piw\212c\206\220\206~o}Tqh\204\205\207\206}\234\203xt\211vcy\213\223y\212\214\203w\207e\201\177\204[\212r\210\220v\211|y\211\212\177}m\226rq[j\206\211o`m\201\223s\201pgyz\205j\206\210\205\212w\227yt\223\205nrvfoiw~ik\212v\235x\213\220s\222\205\205}\206\224q\204\215\210wyrx{p\\~\224f\202\222i\177lj\202rrko~\210qY\\}y\201{zst\206Tpdv\211h^\177z\223or}h^\214h\212pyokk\177\203n\200\221wz\240_\212\205\211p\207u|or\222c\207xykt\202n~\201\224t\223v\214\177\276j\207M|\204snyOMdsceqpx\210h}ljZeg\214\215m\202ql\205wu\206\235\222\245}f\255I\201\214\217dl_}\\\216M\231\204q\215x\244\216\202T\207\201h\223\200wl\213cq|oO{vr\204`\202\201{Qtd\232pjv]qmy_\212\200\222\211j\206ls\214ptm]msd\213i|\201\200\213kn}{j\202\202zr\201m\211gm\177wl\211oo~\211\210\216q{c\211\177^i\250t\220cu\202j\223\202\227r\\xa\222j\244Y\223[X\225hZe\244\210`q\177ec\226Wb|{Ln\200u\222d\214mnl\206j~Z}\205\205\227\203\212\204\220rpx~r\210o\207\205mx\214\201\202\223w\202y\214\202w\207{g\205\207nwm\213\223y\200Wlw\212t\230\207x\216k}z\206d\213z\252\207\177[\201ptykXbpud\200gnz~byr\211wg~nizov\201}w\202z\225o|\214\200~v^\202siW\231q\227p}xc\233b\233i\212~\224\245\212in\214\211q\210f\212y\207fj\201_\204\210|\200py\231y\202sso\224t\205u\213\177\272\210\205T\216\204xxwmotkjtbn\206\203De\216{ir\213u]\177y\201\210s}\200{\223]\177\241\202k~idbjmifub\2158cw\216pZqn\205\210izh|\241V`~~\212dgb\215r{w|dszx\225\201n\223}{l\236\213ympv{\211r{^}\225\212gOT\203\224`\\\225u\177\223\202\203\243jT\207\235bVt\177\233\232\232}w`j\213\203\237\\\221vuw\207\200kr}\207\224\207vk\210|j\201\205{\206\205t~\200\207zl~\216\177\201il\211\177xhjf\200pmoz\203z\225\177\201\224x_lx\213~\203z\201tl\200b\202xfe}[rg\203Y\216mn~d|\225wwzzrybef{zbWVwre<\205Wx|x\204\240yt\212Gg\230\205h\227^hc\220\213\214m{\206ew\203t\204W\203o^qZ{UhaijvfH\204gpl\202`{O\210\203atq\206\210\216klm\203{iro|\216\226nhef\207\206|v\201\235c\212o\223Xy\215l\213\212\201jvr\233i\235\177\223mnsu\202\202\213~s\204\215sw\177tX\201hy\201ztt^\204ux\177a\220td}\255Z\244y\217d\215c\222_ld\230f\226\205\220}\177\231X\203Uo\201\217\210pqwsy\202v}\212pW\220v\201I\226\201\215\204zZqzxj:d\201\202{en^c~\210\205lt\212i\207o\206qxqojirvl\203yr\177t\224s\200ew[}xl\212\200m~~\202|\212e\177\211\212ck\204Xwu\204\200r\224u\234uul\224|cws\206\210y\220l\200yrp{~]}\177u\220h}l\240\224r\206}\203zw{W\212~\223\205xso\202r\220ntzx\223t|\204p\210w\221o\213~utgrpL{g{\200\205jwrd|{u\221pmm\216\223o\215tolun_m\202]o\205lsy}~`~\203\212x\200w\204\201}jx\177f\223x\214\203\204\205h\201x|s\216k~voYyf\177\235x\205\247Sk\206\205iY\207g\221l\221e\227nq\202fdr\221v\217Sti\206\211ge\216\211z|\210\235\213\220s\223\202\231\177\226`{\206gprol\203jtw~\201inqhmwmbdg\205{zv|\200ty~\205\207\221\230o\246\\~|\235kigzT\200\217\214\204zth\230\177}q\231~tv\202ph\204]rkmX|tO\212\201|\204\200lza\210q\202qewf\220d\211x\177\177p\200j\217\204ks]esXnk]|jy\201\213{\225o]\203\223\207r\212n\203v\204|xdkqvx\200~\203{\205ya\200M\205\245A\255p\206\220C\252~c\214\224cI\205\202\217RyvRy\232tV\177\227xci\220\177\200vd~\242`b\210y\225hy{cq\214nn\202\203\204\201\200\200ttxvqysr{\221\177\215\202\204\217\202o\220\204\207\201\215uy\225\202\201\203~uv\206z\224uzhjxu\177\215\210\200\200v\202|y`\210\202\234\203\201[\204ux\206qhvtxb\206[[\244t}\232|\220|~\\\223\204wu\205{\214t\231w\221\201u\204fya\200\177kt\216\216\211\221j\244W\204\224\212R\200yp~\205{\226{k\200\212U|\216\200kZz~\212\215l\221wou\212\227\210~fp\216\200zp\203\200\257\220\206Y}xq|xsk\204yu\206yS\247qg\212\210~m\204~\232tu}\213t\202U\230}\217\201\222\226n_e\205r[hSA\204bx\244U\212\210|n\236\207h{\211i{E\251\206Vqx\214l]Ira\236|qsukl\221\205\207\206p\206\220vz\211}\200i\203\217\202uvi\206\214\212_hf~\242\207^\220gy\204\241ty}B\201\227sI\201m\231\211\215\177\215lql~\224o\212z\177|\201\226v\201t~\220\177hn\215xr|hj\206\205\177}}\206\201j\200\207\200\200\201s\210\177sG|q\206t\204\207\201\211\201\216\177\210\206y\202`ir\201\225vhuw\241h\177c|M\217^weo\257lmuzJkxji\204wvzdh_}xXHK\204V}8\224\234\246nr\210\231wT\217Bel\205Zw\177\231h\210v\220m\213\204w\204\204ko\201zr\202jte\213\214hfe\216Vu\225}\211cO\204gr\233{`w\200x\204f\177kf|azz\201\212\200\233jLSU\232ylhp\241d\236i\227e\217\214\206\204m\221\230\206`\273F\210sxe\177iZg\212\222dr\242\226\231hpj]srz\204_Zvk\200iqZzw\304vk\247|pxUP\302-e~\210f\213m{\254a\241l\233S\205H\237\266\207\330lv\200`}\241h\200\207\220,\200\206\207K\241\177\213\211q`\177aiaIeu\203\202j{C\\\212|\213v\213\236\177m\204\230cox}aWp\213f{ba\207\206\201e\213O\220Vehek^]\206z\203n\216d~\221\213n|\203gyj{y\201\211nvk\205u\230l~~`hw\207\205\200\211\201p\207\211cu}\211lik\210g\216\206p}~\226i\\soxl\231\215\223s\\\216\200u_sv}mv\215|s\211e\247{t\201{\206[\211ojq^}\205\212}r\206o\205g_\215rui~\234v\224sklqbvjz`\214\215|\201j\200\217Un|\177\207\202}\253l\201\204\213\234i\203Z\225g\206dx\177\212{kzQha\210j\214o\215\264z\220\245\203i\217\240vkxr\222i\225\215\224rx\212\203gm}K\177GP[tw\200\210|gm\203[\203\236\232t\245o\212|\225l}iiT7pz\231yp\206fiUq\212QxmpSc7\214~\225{\214y~xz}l\227\232\216\241lp\214\216kz\177ePu\241\226\221z{J\215}z\202\231\202\177t~syrnsy`k\203\200U\217{|\214\177\225so\225\204x^ixrxo\231r~\213l\233|{\220q\201Q\177wwk\214uj\201gl|Q\203u{a\217wz\207{e{niat\216i~\222\220^zg\204\212Mwc\220\244\031|Q\234\240/\207a^\212\231am\222\240{d\200{j\215rtkW\221nOuw\210by|\214\237s`zz\224s}tZ\217\200\177c\205\201\202\207qxx|t\201wc\207\200o\211U\210\210\220~s`\205x\216~\216c\211\200\236\231{{\231vn\203}vifurm\224\207td|^w\212\212X\212\205\225}v_\205lxqSgy\202\203d\207c_\223{\241\177e\202\206sj}\216ue\200\206\200\200\237k\234\214v\224\200\210c\213tt_r`\211\211ssci\212\204G\244\233`[wr\247}\202OkZ{\211lOH\225y\227gI\206~_s\215s\204mzts\237~j\211q\227\200~fqcgfjxh\204\200\212\177\214U\261\210\231\203m\210\212\177x\233|m]\205\202|\\\242e\224\233\177\243zu]\177jnN}={\\\236\177z\203\230|\202\205~pf{\234\214d\234\220`\236u\247}\177?zm\244\202r\206\200j\200m\253\206c~\225\214\212ezz\207k}s\217}y\214|\214\206\203\202ly\243N\216\205\200h\224y\204\244\205d\217\217\200s\242C\235z\215j\205_alx\210a\203yTck\224y\221nyv\205eu\207zy\207bi\214\202\206o\177yrnwvu\201\217o\177qyArymW\214k\205\200}\204q\200yv\213bdmz\216u\210wt\301j}p\201Y\216\205\215sn\231tlyk]}{rq\201{~\221{nwpshQesd\201c\242\245\205\207~\203qrj\203\2029Q\203l`\242\215\207mf\257of\235\261\242\211h^\231\202r\211]\230[\221\223v}~\201L\177\221}\220sU\203?\202\223ycp\215pxB\214pyzwiqq\200]}\210\202k\202\225m\205u\255\203\207\215\206[x{]HW\220Rl\214nsxo}\255\212\252Quf\214R\207\206N\216fx\214fs|l\213x\215\177st\246rbu^\227\2238#\204j\215}wr\243l\206o\202\177\211\254\204\211{\276^]\000\2062G\265\227\233\\Cq\240~\215\215\177x\202K~\216`cs}\227zYU\212\201\221ijW~\220swg\215\206pqk\2366r\216\222r~b\211_\246yd\203\177\201}T]dn\217\177XnPinpqpr\202}v]cgf\230n\223\\p\207my\227\216\205\232\253\270\212\204\204\211\211\177\232}{\251wgc_u\211rq{\205\206\206yvsvsgQ\270\211\231p\214^fShB\210\216~ky\200\262z\207se{yod\222~\212\216f\261w^\217\203\177ts\\w^qz~\201\205g\221\177\206\224|\207\204\210h\234\227vyyu\204\203im|{Q\246\232ry\205ivmfwkw\201t|\221r\202G\206q\213\200~|h^Q|ao|`^ys\263l\203\217ff\205V\211\202s{mv\225\207xlj\177l\237>\232\213\210j\222zmjxl2u\227vuw~\\\231Q\216\272ci\202j\303pjW\204q\215mfDA\225`L^Xh\211xd\245booH`w\231m\210\\k\222z\206\222\220~\251|\227\251Xf\206\221\\^c\210\201\214Y\220xw\226R\227\224zE\227tt\221qn\\\225]rS\\X\204\204ho@\211\211~X\177i\302zyu^kzw_\226{\221\216V\252k_\226v\200teb|X\243al\210zh\205Vtu^\177\205^\204}p\204dg\203gh\252z\200t\213\212\230j\204t|xH^h\222{waxys\231\246^~mq\270F\230[\234Zc\212iqd\223\251_\226bYjggs\247\200|d~\216mtx^\221\205\223``eXm\207\240Hok\220p~\225p\200{{\210{\212\225\216\212\303\206\214\177nlxw}\202uuxg\201\200w\210^mPv\204\212z\203\203z\232b|\217\201a\201h\250\201lY\177k}t]Oa\211sbsdry\210f|\204\232~r\212_m\212vt\213tr\216X\251gt\216\207\206u|i\200f4\235\212\270k\252sp\227m\213_\221i\214\272\221o`\207\210\230\222Is}\207O\205\217O^\177syti\230}\212u\200f\235\177gsyq\252\207|^\201q}|wsstvuqHw\213\232Hc\233\232l\207\237`[\206}j\231ez\202h\266kt\230\207z\214~>|R\224\212osq\207\221m\202n~<K\222\240\215l]l\232sS<\215~\204UrXWR\206\205m\220e\215\200r\223t\215\215jM\333z\234vf~x6Wm[?h\222zWT\200\\ET\206n\302\240z\202\271\201:\221\251\222){W\267\260\273\222rgR\235x\250K\300elt\200\207ywy\205r\216\200n\217\202h\221y\201\213}\200tkxzjtj\201xn[xj\202\207ahtsbtl\200\210\220ob\222~hf\203xw}\216yo^wd\204\226bwekg\204\212[\247|{\204cr\214jr\203{\203\200cYryjncnr~vN\206s}\207\215\215\206Vw{qkm}x\214ZC\226y\264\224{y\230\\\210\205P\212c_\203T\210ljl\201\204\217|\204kUp\206jj\207P\214c\206\210nKy\214\235\237Nyo\203U_\211piepzzls\243jup\240\214\206\213]_f\222oIK\235ix\205s\202]\212t\244y|\224fs\203cq\212d\222hrvob\231br\200\226\236mq\205tbs`\202\320crQ\300\245n\250b\225K\231\222\212Y\230k\246\223\236\313\205zK\222L\222\234\205\200]Zt\212\210\234xx\210\2218w\226hTwz\210\212_s}\204\203xf`\211\226\200{}zuj\213vpJw\177\200w\207X\202y\211]Zn\202\203mkerg\177\201go[fn`mx\222v\217\217\212_qm\230b\201W|\204v\214\217~w\202\256\276}\177\206kqx\240zg\220j\204PZfy\213oq|ym\204XhedL\203\272mzu\231V|t\\i}\215\207\215\201q\247z\241my}r\202k\206}u\226v\247ox\203\206\201jzm_tLk\202\222ko_w~\211`\206\203{X\221\213z\210ggrqoet\202Y\237~xyql\200odu\230\204\201y\212\177\204zo\211m\227l\202}\202Wp~{okphvk\224Z\206wx\224qo\213\216U\207{|\213\177onO\203k\200d\220\216uX\212\215f\201k_Ss\236sd\177\202f\227R\210\261b`\204i\230\213tnzytoQkh\232absj^{]p\234\217\207}Kyw\246\210vrx}~\213\215\212~\230\220\215\252koc\210TZavf\204\227\202u\207\2046\213\177v]\255\200wwrzQ\214Tl@Uc\203w;\222c\200\204xy\205b\263{\223opty\212\\\215x|\217l\236gx\215}\177extek\215`}l{z\217d\210wS\217\225\177\215\177k\177q\202\200hj|v\200r\200\207\216j\205~h}O\217\212rp\203\236is\221\202\226\215\237\177Z\211~\235\204\214~\\\220mwS\241vzva\204}a\177o\223}\207`\214i\231qdis\200\226yT\207cozuDrPhowvy|T\223|\212\224\224\200m\216\204\237\216ep||{}}nq}~ko`srfq\202qzz\206~\215i\177\205xb{q\231}h^\177rt|[fp\201qexdi\234\200\206\222w\240\200\227f{w\177\206k~zt\235b\233~w\210w\177l\221vyu\\\222\232\262R\250Jl\206q`h\205xe\214\177\224zXx\215Nz\201\202oc\232nuvq\207nxq\213\217\215{~_\212\217^suw\232\224~culsy{sq\200\203xwid\264~u\223\200\236k\226\212\221e{\205o\203lV\240h\241\213\212\220{no\217`zT\214n\221c\203z\224\203\211\231vmf\212\221\210myM\272\177Vn\226\213xDKnRaj\202u\207g[yo\226tu\224\210N\206\201\226\225mid5_oaNT\244i`f~\210yfT<\221\210\226~\302\2216\201\243\2044\233C\265\226\270\250sLL|m\213_wy|\211\203\177oqu\207z\233x{\213\213jcju\216\204\204yt~zwof\207yia\205wwl\207\224\206\200b\220x\226\204\220twq}yelhp\222\200Yqt\216U\213vcQ\217xmpq\224or|\203aiqgf\200t\214\177i]jxqmbc\215\\\210L\226\267\224\217~\217\231\260h\225Vui\242\207\210\204|vg\203\201\214n\210s\227\224elY`sotqe\233\240o\215u\212Wzv\202x_mos~\213}af}z\214xo{i{H}v\\h^rindv\204i\257j\216\201\215\262U\\h\231vWK\213u\222\204{\215QtZzk\177\220dc~bZ\210h\225\204^ne\\\206bY\210w\203h~fmdnV\217\354\202\217%\255\236y|x\230n\234\211\223V\177V}j\206\304xoV\313U\257\200\207{axviq\220lj\217\234\'n\242rQ{q\234\226X\201\203t{vmZs\200\223|\206Zp|\203t`e\215s~\213\205Qu\207\200]L\\vgn]n|ykyz]\177cmBP\212kg\223\213\213\\sb\205G\205R\220\203k\201\230wm\207\232\245b\206awn\204\254\214qrv\201elh\205\213\236r}\207u~WVmr@\221\230nfs\240iban^r\236\223\256\204V\263\215\215_\200wrhe\225us\241k\264\200[\211\223\226W\231o{iGpw\213{qmy\207\205C~}\211cz\214w\246lsjnmwqtk\245v\200\201dv\215tW|\216\213v\223\250r\207\214\201\224k\212B\201c\213T\210rzqe`a[]\244q\202\202\212\241ki\210\246j\214\217u\225kxmO\221\226\203\177\214\206\204c\205oKi^Pdfv\200\205nu_\235,|\251tV\224T\215\235k\202u^pZ)i{\223\201l\231kCNu\212w|i\2026\206N\237kry\222w\206\206\216\216\202\240\224\224\303l]qrUlqkTl\260l{\210\261D\220y\204g\254{\205xp\214^si`PIvql5\234e\205\227|\246\201k\300\217\214^yuzoa\231rv\233h\256\202^\233\217\217R\224x\210f\265lvkip\206B|ps|\221r\204y|q\204p|X\204\220v{\213\211k\204\\\221fKh<\207w(?t\200~Yw\236\201\260\262l\200i\214\204\210\235\217g\266{hf\177\214yb\202\217xepy\203v\210m\213a\223skjK\201\177\216>\242ne{dc\203ch\212t{\234qhcS\177^\237|co}\233\242Vvnae\243{[d\237zR\206_{pjrpc\212s}^\213Fw\212\202P{t\227\204bp\200oru<bu\202\201f\211rm\223x\252\206X\227\216\212ty~wta\215m\206\247a\255\235h\215\215\222k\204t\201a\\k\204\246l\2077X\201\2201\222\246q_fd\224vpjnR\241\236xVd\247m\217tQ\205mpl\213k\212i\205dq\250W`ph\217vrnfZlaqpsq\215y}\207g\301\205\264\233n\261\225\217\203\237p{gk\220sX\303_\243\255j\236\210\200b\210e\205G\247y\214t\212l\206\200\212\232\224qctyc\220\216p\322\203\\\256|yxz=\212oxm\207|\223XWYsjQq\232\210]\271s\222\232g\206dJ[\211\2038B\253n\207ux\177U\235bfN\223\226\246\314\213fw\215ut\307=\245|\226vy1Ci\203kUR\204\\gt\200o\213|\204h\224p\207\207{j]Y\200\222\206\203oztxzZL~yhi}qvY~\225o]\215w\201\217v\215w{mu\205kpe\200\223luz\177\252b\224jtO\221\231trj\210ab\207\201orwfWhp\236\211r[{i`t^fxk\226u\233\262\234_\201\207\200\230F\230Lp-\244\210d\230\227\204vh\224\232f\253\211\223\300_oLoXld\232`\234\241{\252\214\210M\204lztk|{X\207v\177hg\220\213{N\211\207jz"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.06091439724
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.19617950916
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/convolution_eightbit_reshape_transformer/residual/residual1/MirrorPad_1"
  op: "Reshape"
  input: "transformer/residual/residual1/MirrorPad_1"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/convolution_eightbit_min_transformer/residual/residual1/MirrorPad_1"
  op: "Min"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_reshape_transformer/residual/residual1/MirrorPad_1"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/convolution_eightbit_max_transformer/residual/residual1/MirrorPad_1"
  op: "Max"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_reshape_transformer/residual/residual1/MirrorPad_1"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/convolution_eightbit_quantize_transformer/residual/residual1/MirrorPad_1"
  op: "QuantizeV2"
  input: "transformer/residual/residual1/MirrorPad_1"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_min_transformer/residual/residual1/MirrorPad_1"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_max_transformer/residual/residual1/MirrorPad_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_quantize_transformer/residual/residual1/MirrorPad_1"
  input: "transformer/residual/residual1/conv2/weights_quint8_const"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_quantize_transformer/residual/residual1/MirrorPad_1:1"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_quantize_transformer/residual/residual1/MirrorPad_1:2"
  input: "transformer/residual/residual1/conv2/weights_min"
  input: "transformer/residual/residual1/conv2/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_quantized_conv:2"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_requant_range:0"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/convolution"
  op: "Dequantize"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_requantize"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_requantize:1"
  input: "transformer/residual/residual1/conv2/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/residual/residual1/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/residual/residual1/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/residual/residual1/conv2/convolution"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/normalize/Mul"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/normalize/variance"
  input: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1/shape"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "5\207\201?/\351C?G\260\021?\375\262:?\237\256e?\037\017\027?8\201\212?SL7?\236\334;?fci?\324\235_?\305B\235?\r\2002?\325\034K?NqX?i\273\204?\222\241@?V\003\033?\025\021\370>\331\335m?\t#\033?\326]\200?\206\350\203?\017\037\220?I\2101>\320\225\'?\366a$?\233PF?\226:;?\3221Q?R\367R?\335\2217?&\202V?\275^\351>\377\236g?h\375\307>%\032\215?G\206\223>\316\257|>\354\262(?\302\342\256?S\245d?]\347\255>\312+-?\377p\033?s\223\205?^|\n?\r\214Y?/\335\020?\211-w=\204\243\026?\013\r\342>\364\211B?\2539o?\037NJ?\356\"0?\005$\020?\324$\202?\266\224\032?T\200\033?z\275\375>\327_\034?\265g%?\201\275-?8(r?\212\374\207?$\312\245>\324\274[?\r\332\367>\303\267K?\347\302[?Dg\353>\206\2657?\333\372\035?\355\267\244?h#\225?\351\272d?\254\205X?\355)\024?\353:_?W-p>\031\266z?\310 j?Zd}?F\376.?\032/\200?~\225\223?\3612\210?\334\312j?O(B?r\rY?\2206Y?boC?\002=\217?|\t\027?]\312D?\2026\022?\244s\374>\030\253\037?\224\371*?\243X\177?\205\006\206>z0\314>\004\2012?mD.?\231\247\007?\2542\350> \017K?\272\007\022?Jut?\220<H?\000\370;?h\344l?\376\341\030?\374\022@?8\017F?&\331\027?\377\357*?c\273\036?\356\004N?\357\340_?\'\035Q?\335%\037?\304(e?5\311\272?l\251\033?\276oD?@\342\377>\257\260\203?\314\261 ?.\021+?\27774?\003fh?\024\254>?\320\325\201?r{\026?\252\331\016?\334\265\205?\235s\201?|\017\221?\277\275=?o\370n?t\343;?\014sX?~\335\004?1M%?G-,?A\n\232?Of\357>p\242\200?f\312Z?\014c^?\331Q\312>j\025??\312);?\263?\211?\266\021U?\353\000F?E\256s?\006\326#?\361\323h?g\271C?&\245\315>E\240c?\365jN?\231\236M?\323-q?N\331D?~.S?$\271\177?pIB?\207\222\244?\271\025\014?sh\205?^\232J?\332H_?\364\225\001?-h\006?\271\301\332>>\200`? \004$?\332{Y?L\237s?R<\204?E\344 ?MV>?\226\002B?3\352\201?j\254\201?\2526E?W\300o?!\276%?\002\207\263>\206\350f>6\017\236\276l\003N?\345\257>?\324j\007?]\234\345>\304A\363>\000\366\'\276NDQ?\217\301q?\231\225J?\351\273\340>\257\274\222?gv\235>\377\246\333>C\301\200>+\217\352>\2618|?A4??\351\362)>5&\276>5\006\301>|\263\263>\213\n\310>\355\266\036>\320W\026?\t\245G?hu\356?v\234T>1d\325>\236\234\001?\341o\214?E\0006?\273\320\210?n\\%?d\206]?<\325\325>>[\006?\216\272\251?\263\0209?G\370\212?T`)?\311\260\214?p\004\340>\2270X?\377\271o?\363\3271?v\326D?\244\017\016?\350\307\235>\037\026|?\374\264\036?\023\037\212?6?6?k\027\232?\205\353\t?\224\3321?\001\325@?=jh?\322\023A?\010\265\036?\327\210\260?-\330G?\021\314R?[d.?\223A\010?\226\177\025?\252j\340>\276\005\315>M\337Q?2\014-?6\0328?\256\372a?\315j#?WM-?\212\263\'??La?\261\266v?+.\246>3f??\232_\376=\026\311\235>a?\324>;\262@?\227\037*?\001\351q?*\376\230?$\2757??t#?gi2?\373Uo?\035cV?\336\3744?n\n\027?)\3278?\317\3127>\350\211w>]V\347=\347L\310>\335#v?\367\023*?\314\203\004?\3370\350>Ho \276\321\212<?\2035\366>P\373N?4o\233=\350K\242?h3\002?\225\317?>,\211\335>33\333>\0238\010?\327<\\?\245\252\r?\276nW?\004\372\277>{/\273>u}.?\337(l=f\231(?\217\230\014? \261\274?H\345\202>d\235i?S\234\227>kO7?\n3\024?\230\325\017?h?n?|\270i?\205&+?F~\213?ds%?\3245N?\364Qa?9\237p?2\302\236?v\374\010?v\342\214?\024\216x?\233\010\207?\013\2160?\266\260u?>5\210?@\206\200?\350\2206?\323\245\220?\263\266r?v\252\220?\006\027\372>\010j`?\261^Y?\2727??\376\352\205?\315i[?|aU?\014\224\256>@\002\221?M\234\024?N\350\323>\356\245\035?\327F!?!W\033?P\207\001?\323k\337>\347a??\375\310_?jF\001?\034\341I?t?\003?l\327\214?6\376D?\251\3525?9\236\024?\224Z%>\241u\231>\233 5?\272\315\022?&\nH?\325\340+?)B\206?m\244\211>\347G@?\2267$?\355\030+?\267\236T?P\225??\223JC?\2748\020?l\006\207?\326\024k?S\255M?\320DG?\241V\214?\210c&?f\325\201?O\024\017?\253v\020?Oz\\?Ip\215?\366.\265?\033d,?)K]?\341=\233?\265rL?\023S/?\377X\200?\021\352 ?\253\275[?\264^,?>\\\202?\017\257x?\342\237\221?8\227\376>ca<?\016\236*?\314Z\\?\316$C?\345\027s?\241\315O?\'\341E?\3677\022?rG\033?\364\345k?q/\362>u\022\177?c\315\300>\267\217\001?\302k\024?\207r\227?\3740%?\325C\n?\005i>?d\023\036?C\312F?\257\256J?}+\222?\311`\272>f^\271=\210\261\317>\337\001\275>\336\213,?\372\0074?\266\257W?\312\315\\?K=\025>`q>?\342\230U?\177|$?$\234)?7zL?\2153.?\220>\371>\033#n?\023iq?\375\243\325>\303x\003?\026\2076?R7r?f\030I?\306\207\005?\001\265??g\351\202?\257\027}?\367\275\271?\345~\036?}J\223?\247\367\025?\265\246e?FA\257>.\340#?\267d\\?Ppf?-\306\252>\275I6?\313(X?\002;\214?\025\001\202>;9Q?\263\3279?\304\0245?B\020\016?\236\226u?\0106\241?[\253\244>.\277\333>\336\225\334>K\216\325>w^\264>\010\3133?\372ry>\0373\252>\367\016x>:\030\031?\257\303.?\311PG>\316\375\203>\246U\306>\211T\020?\014\354)?\312\351\375>\252\024\315>\034\342\322>\304\305\363>\013\222\265>)L\007?+W\354>\221\'\'?3\036\240>\306\346/?\2670\207>\021\223\005?\303\322\002?\2100D?\354\357\021?\')\013?\237\236\230>\257\316\215?\231,.?\336vM?~\352Q?\022\005N>V\256<?\024\315i?\331\257P?\233\253p?\021\317E?\375ED?\201\340Q?H\257\322>6\251x?~\2030?5JL?\350\261\025?\234c\005?\240B\365>\252\364I?\247 \013?\315\357]?f\002~?\367M\036?\3450\037?\334\033F?\330\335\013?$Mp?\271i\311?\215p\203?QGt?\004\024o?R\007\323=of\233=\325\006n>\"J\001<[\233\206?\225m\256=\262\303\016>2\027\212>\254\331)?\303\360(>Q\213\207>\200 \344>\332\272\237=\325\321\336?\207}\363>\202.\313>\n\002\313>\356\214\005>\200e!?\250\201\013?-\022&>\331\273\221>\267$\236>\362\202\264>\301e\276>qN8?G$\224>\361\277\307>\356\210\307>y\216N>\033\237\212>\302j\240>\007\223\270\274k\224\020?+u\351>\026;S?\202\3233?L<\274>\264\301\014?\034B\251>P\244\372>W^\017?\324k\342>\317\016\267>\302x#?\317q\360>\373\234 ?\r\255\022?\227+\200>I\244\211=\371\"\277>\321\311\231>\340\273]>\374\262s?\362\332@?e\220\257>s\323\005?\230B\002>\357lR?&N&?\353\321-?+PL?w\014\354>\377I@>}\036I?{3-?%%1?\000\332\024?y\233N?x\332\013?\'\375G?\"\244a?]9C?\363G\177?\223X>?\251\215\031?!,\016?\315\331\231?\034Q\033?\323(A?\202H\031?c\324E?p\212D?\010=;?\331f(?\261\377;?\245\263\212?\2706u?)!\344>\023\262R?X\0001?\033\311Z?\2748\200?[\206.?\343\230Z?\337r(?8Gy?\326\024\036?\332l.?\276\267\206?\034}A?\262\371\026?\233\255\220?\257\345K?\246\265\003?XAm?7\225*?\210\306\237?\240\2175?\322\033\230?\235\371??&k\226?\251F(?t\346)?\325\3365?5>\203?=\361$?v\275\212?\314\345\203?\351\374|?X\0051?\270ig?C%X?\353\362\202?+\225\227?pf:?P\031H?\3442!?\260\036f?t\177\260>\243\335\031?\324\262&?\372\361e?\260G\204>W\344\310>\306t\344>]\335D?*9 ?=q-?\2155Q?.j\311>\037\215\210?\007ia?\177+\t?R\310\025?Y\3148?)\223-?\274\247l?\361\341\034?\360\330\031?\024\347\003?Si_?\377t_?\345\220S?\n\224*?r\375\207?\307[\206?!\370\250>\367\212A?IJ\007?\330\324\032?\3669,?\253\205\271>\274\332=?\371\375\\?\276\003 ?Us\024?`_\316>\353\022\022?~K,?\357\316K?\341\2656?\246\035\\?\003Md?{`@?\034\213q?\263\r\301>\021\025\022?Q\2336?\036\332\027?\234\305\027?\357\014\022?\007\354\\?P\232\223?\376:\263>@\360\036?8\302V?\342\025\200?\203J\000?\256,s?\272-\216>\226^\263>\226\370\\?/\037\032?\265\300\005?z9&?\3767\014?\265\310K?\331\260\226?\207\335\364>\310\366\003?\325\3062?\212\300\266?\236\237\244?\034\002K?J\355P?\234\205O?\375\232O?HM\352>>\323\231?\236\272\373>|7\206?_FJ?\n\005e?\237\266\236?\302\257\221?tB\217?\372\255\213?\234\013\206?\263\330e?\334\312&?u3\225?\203\267Z?$\325\005?\010\2651?\336\225B?\037\246\036?KBO?z\274\014?\206\267\004?\203Rf?Y\n#?\314:+?\264;^?\342Z#?\3627\222?\020\264H?\021H\221?\255\363%?v\006\005?\214\362n>o&S?p\363Q?\005\344\311?\034{D?\310\363\223?\2013+?\263\343\331>\277\230\222?&\315s?\253\322\220?\030\316\317>\361\237\212?B\244e?\345\021}?XLM?\247`\022?\027\264B?\237K>?\350\300f?yC\246?)\1778?\rp\017?\265\030m?.=\024?\337\213\214?\234kQ?%\r\242?\353\337\263>[\005\213?\374= ?Q(h?k\265\006?UB.?-]4?w}\006?\346\256\r?\205T\200?\205}r?\263@S?\205SF>\256*\004?\355\0275?\337\\U?\020-\215?i\307\025?u^\214?\370\305o?"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_1"
  input: "transformer/residual/residual1/conv2/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/residual/residual1/conv2/InstanceNorm/mul_1"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Sum_1"
  input: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims_2"
  input: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual1/conv2/convolution"
  input: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape/shape"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\246dd\275{A\231>&E\323\275$\265\030?\333\210\016<\236\230\260>\327\341\202\276$z\345=\'\0018\276Z9(\276\013\351\017\275\036K\254> \023\307\272~\003\236\276\007\335\244\276R\rA=\367\031}\276\351\236\350\275\356\263k>W\303\006<J\273-\276Y\256\224\275/l\023\275\304\362\313\275\241\004A\276\206\034\252\276\021{.\276\026z)\276\\g8\275\031\307\214=5\244E\2767\242\212=7\177\345<X\003\000?y\305\336<\224\027\254>\334\200\003\270\312\267\225\274vU0\276\230\366>\276\027x\234>\251\226\365<\227\265A\274\020\337<\276\200\207U\276\235B\214\274\336\003\'=ZO\017\276\242\357)>\327\320\362\276;\223\247\276[N\331\275\214l\020\276\363\024@>G\257\202>\314\003#\276\342\215i>|\264\211\274\351\225\026>\034[\211\276K\000\r\276FNJ\2767\2741\276Q\254\003\276\245\264\003\276\331\271\010>\303\307z\274\311\004K>!C\310\274(\223|\275EQ\261=\254@\030\276F\354\221>e\037\002=\026\261z=\024Z\201\276\211b\001>\240~\255<\003\256\271\275\3304\251=zX\326\275S\023?>=\361`>\241t\240\275\367|\033=\216\023\317=?\276\377\274\203\301\177>\252GA>\317?Y\276w\240\365=f\t&\275\277k\204>\014\030\n\275\202\016\363\275a\022u>\255\306\202\276s\006\274\276\034Cc\276\013AE\276E\203\231=&*x\276\347\250\003>u\203\211\276\255\205\"<\000?\352;\231$Y\276- \225\276\312\342j\274\220\002)<\014\001\340\273]3\227\274q\267\357;>\360J<:=\177>\273\312\304=p@\271=m 5=P\207#>\305\023\216>\022\253\224<\276\232\315=pO\370=\021+=\2769\231\210=c\360\252\275\214\273x<\032\352F\274 \270R\276WWO<]M\214\275\252\340<=\347\364Z\276\327\234\207=\356|W\276\026u!\276\257\226\315\275S}\374<Y\266I=jY\214\276\330jO\2768a\235<\316p\004>I3\024>\t\353S\275{\027*=\350w\232\274\314\2365\276\211\370\356\274\234O=\274xF\001>_\362\005\2768\316\335\275\254\337#>\317\345O\275\211\016_\274j,\362\274:\213\260\275{6\323=:\201>\274H\027\007>\313\307\211\276\372\277\373\276+\334\223\276\007eV>\2539;>\002u*>\204.%>\232\304\303:\t\212s>\337\217\227=!\216\302\276\245\270\332\275=\353\033\276\265R#\276\006T\350=\342\276\016>\236\035\010\276$\202\301\2754\347\315\276\223\204j=\032p\214\2767\307\223=\356\322\006>\351\030\215\275\303\200\224>\272t\367\275\240\301\220>q\330|\275\335|s\275\016F8>\210\324\332\275\210\014\335<\371:\370\275\331\206\240\275\006\215\027\274G\033\027\274?I\226\275L)\225>\243\243\346<\243\034|=\375H[=\317X\003\276\325\377z\275\345\353\244\275\'\364\377=\r\317v=8\257\240\276\344I\004=F\370\214>\303\242\252=\213\200\227=$\341\216>\340\"\216\275\225\247\003=\303D\r=\035\272)>\307\224a>aAx\274UAz\276\340\217\205>w>5\276\035\001H\276+\336.\274\025\204(>6E\340;(\277\215=\364\223R\276\323&\207>\373>\337\276\t/\020>\260\352k>v\347$=D\200\315\275jDV\274=\010^\275\324Q\262=\356\255#>\245\033D\275\215\265g\276\303\023\310=I\027\027=N)\220\276\270F5>\203\020B=t\276M>z\324}=\006\256\013\276\366\301g>&\376A>6\277\004<v\032Y\275\021}^>\203\357\204\275\017|\">\334\263,\275\244\000\261=\256\322\010=\261\360L=\370\t\235\275\250\277O>9\377\316\275\231r\373\275M_\020\276!C@>\n\010\007\276\304\315\201\275\242\312O\276\214\0223\276\313P\277\275\214\215Z>z\3340\276\307\251H\275\200!\346<\354F\345=\2149x>$\036k\275p\2521=b\203|\275r\027q\276\034\260\201=_W\001\275\361\352*\275\221o\'\276|\232\332\275\215\2259\276\350\263\264\276\316\207m\275\021\\\274\276q/R\276\307\321\333\274\20241\276\372\340\264=\216J\177>\364;a\276`\303d>\237\240p\274\334\304R\275\211\3418\276\313|h\274\320G\261>\302\301\270\275\202\025\030\276xz\242\276\255d\250\2749\227\207=\n\021\203>\244\270\314=j\365?=\216\037\"=\243\021\027>\221\201\217\275tz\331\275o\tp\2763?\375=Y\006]\275\213)Y\276\244\006\257=\335\032\300=\232\364\032\275?\204\037\276D\214\001=\272\005\333\271Y\000i>\3571\r\276\333\304\003;\261L\220\275\016H<\275\215@\210\276\2201\365\276N>5\276\265\002[>\263\020\364<\346\224\362=87\255\276\275\207\034\275\"t\r>F\331\342\273\277\246\303=\005\t\332=g\234\337\275\001\355:>\301\021>\273\3145\242\275]g&\276\270\243\n\276\301^\323\275@\037\005\276\304\315\214=\222L\214\27696\261\275\251\201\245\275\310\223!>x\020\010>\352H\201>%\272\014\276\301\253\304\275|\322\213\273\357|_\275\226\352?\276\233\233\306=\025d\315<4H\013>\230/\211=q?\016>\336.O\276\204E\260\274R\333#\274\3137\034>\333\035\200=\272m\201\274\264\244\273=\033\024\243\275\237\323\371\275\364\013\375=Kc1=*g\230:m\346f<\t\275\225\276\313?&>\260\016\212\276\034\337\016\273qx\376\275!\006\356\275*\0101>\227\344\245=\350\313\241\275G\235U>\242NG\275\325\014\243\276\203%~\276Cx\031\276\3031\215=M\221\374\275\243\3135\2763\177\205>\333\274\221>\352/Z\276\277\235\275\275\204]E=@\327\200=#\211\032\275\222\355\r<\370\200q\276C\244\004\276\030\231\250\274\t\262\n=\004\034\333=.\323a\276\260\267>\275\253E\254\276wW\350=;?\226\275\275F\205\276\340\017\r\2763\376`\275wU\246=F\247\217\276\032\264\346>p\344\000\276\224\344o>\311\254\243\275\210H\242>v\302\224>\265\242\211\276N\221\240\274\022\312<\276\224{%>>\256\031=>\331?>!i\272=\177\032\206\276\035\365[\275\360\271\367>*|\214\276\251\225U=\322`E>\326\260k>\252\256l\276N\231\260>\221\315\205>s\276\360=\021\257\233\276z\026X\276\2003\010>,\222.\276\354X\032=\376\373\223>\021\335\333\274\247:\'>\214O\345=\306\036\323=\242\332!> nw=\013\267\004\275.\001w=\377>\313=\354\2011>\303\017-\275\r\367\036<_Z7;\332r;>w\202\252\273=r!<\350I\232<\222\352\034>v\277\321\275\211\247\'>\246#\035\275\273+8\2763\222\017\276\272\216Y=\274\333\030\275O\217\001\276\243\220\376=\334\017\247\274\376\366\252=\240\033\262\275&\001&\276\302\247\212\274\354\200k>\266y\270>\303\326\205\276n\215\335=`R\027\275\310\214\016\275\231\226\204=k\341_\276\247r\001>\364+2\276 YE\276\305\310j\276\033\333&>\321Y\312\273\305\031\301=5T\206>&(\200\276\014]G\276\340\244\352\275\374XE\276\002\240\353\275\025\230e\276\303d;>9VZ\276hc\017\276\010\254 >\310\250n\275\333Iy\275(\t\213\275$\261\226\274\204\245\352\273c\261*>x\305$\276\374\346\360\275DZ<>\211\225\301\275w\246\030\275\352S\217\276=\340\227=\0375\261=|\375\034=7\314!\276QA\211\276\357\314\365\2744\003\272=\364\364\004>\275\373,>\330k\253\276@\0306>\374C\317=?\355\240\274\250\236P=\0257=\276\027\262\241\275r\274\337:\212\271\311\2769&v=\"\2175;\310\243j\275\361\270$\275$\2321>k\234\023\275V\241\022\274\321\2754=\245\201\267\275l<\377=\257\022\024\276\364\033\241>\270\223\272\276\323\266\227\276o\357\252\276R\356\261\276\2157\000\276\364\276\221\276,\344\216\274\302\220\350>t\314\303=F\316\217\273\321\226\017>\315\246P\276%\032{\276\304#\223\276\340\222\361\275\243\261C\275\021m\257=\022Z\336=\200\033\242\275g!>\276\361B\217\276\227\213\350\276\321+\316=\034\025F=6\253R\2762Ip\2766\303\275\275\020=k=\2653L>\032:\351\275\20327>\231\314F>$Z;\274\320\373/=\321\031L>\317\263Y\275\376k\210=0\272\351\275\302\314\021\276-\020\357=c\376\'\276\360\025\247\275\303\302\226\276\305Co>c\320\207\275\345\213\023>\347Z\352\2754\321=\276\206\273\246\275ZU\001=\002L\215=\340\005\002>;~/=Il+=\277V\013\276\244\023\257<\2277\360\275n_\320;\210#\324=\322\346\325\275\326\254\224\276\357\246z>=\026d\276\244&\205>\355r\201=\271\341\263>\346\316\365\274\036\321\273\276!\356B=8k:;~\314y>\267\020\240=\242\204\340<j\222d\274i2\226>\206\224#;\325\006\227=\321``\276\270\206k\276yk9\276\350\315;\275\321v\225\275,f$\275\006\232\201=i;\220\274\302/\022=[\240\207\275Z\325\250\276\023A8\276\0361W>Y\221B\274\373l\334\273?;^>\332\207\321=\325Ld>\2630\253\275\0004\363\275\025\026\177\274\373k\217=r\347\217>\300^h=39\206>,\0160>\366\326\375\275\025\037\022=71<>\311f*>\250p\274\275r\037\231=\'\243\020>\033\r\002>\366| >b#\316\275`\247\313=pm\263\276.A9\275K!A>\273F6>\322\220\202>\031\322_>S\263\201=\007 \007\276O\220\204=S\334\347<\032\177\246>E\207\207\276\'|\201\275FxX\276P\377\260\275\261\340/\276=\2555\275S\0256=\021\215c=pe\217\276\016k|>\313\2046>\2718N>\263\265\177=+\310E>\205\000\260=vZ\205=\237\363\037>f\027\264>L\001\364\275F\375\022\276\231\215-<\324K,>\370ZZ>k\352\200=b1\222\276%\024K\2763\237\227>}\336K\275\334S\033\275{\323\321=}\236\216\275\317\364\022>\344s]>p\256\322>\007\315e\276\204\362E\276\231\232\360\275\005\177v>+\241\207\274\370\025q>_L\254=\342H\026\275\216\206u\276\030]a=\254\236?>\"\001E=\243\365\236=fp\306\276B3\r>\314\277\256\274\020\266\307=\314\215>=\340t\005>!K\r>v\214\266<\342@\232>_yd>\353KI=|\006\363\274rF#\275k\n\200=\224\355q=\2016\337\275\003\340\032\276FLV\275\024.K\276\246\343B>\261\216\035>8]I\275\035\301m\276j\266\304<\3615\203\276\303\362@\276|\223{;\272\323\010>T\034>>\210$\205>l/\300\275\363\032\320\275Pi[=\251\213\266\275u-\357=\256S\242;\226D\364\274+[\034\276\311m=>#\223,\275u\035\276\276g\223\013\275\251\265>\276\321O.>\327p\026\276V+\227=\006\274Y\274\210\235\216\275\013,\353\275t2\223\275\3775\003=\362\370\256<\352p\202>\237\001\004>\223Lo\276\021\3013>.\\|\274E\307\260=\036\030K>\202oq>\255\325\212>\233{\003\276\324A;\275\331m\034\276\353\274\262\2758\002\211\275\030\372\323\2766^l>\3403\207>\322_\327=\345\301\335\275\010\257k=\300?l\276\264 7\276\240\226%>\325\307\020>d\240\351<\010`4>o\221\301>\3316\206=K\375\344\275*\323\252\275zd\254\275\327\251\034\276\320\251\325=\277\327\365<\024\331\204\274mER>\212\251\t\276\3261\007\276\314\266\t\276\260\004\213>\207\3733>\200\211[=\333\251\251=\007\224\357\2754\242\177>l\001\213=4\246\341=\310\221\014\275\347\377\236\275Q\353\351=\347ec\275\247>\356\275\311M\237=\3334\023>\230\214\220\275\375\274\245=\203\324u=\270\212\302<\354\257\205>\242q\366<"
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Reshape"
  input: "transformer/residual/residual1/conv2/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/residual/residual1/conv2/InstanceNorm/mul"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/residual/residual1/conv2/InstanceNorm/Sum"
  input: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims"
  input: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/residual/residual1/conv2/InstanceNorm/moments/normalize/mean"
  input: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/residual/residual1/conv2/InstanceNorm/ExpandDims_1"
  input: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/mul_1"
  input: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual1/add"
  op: "Add"
  input: "transformer/contract/conv3/Relu"
  input: "transformer/residual/residual1/conv2/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/MirrorPad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/MirrorPad"
  op: "MirrorPad"
  input: "transformer/residual/residual1/add"
  input: "transformer/residual/residual2/MirrorPad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\201\200\200\233\243|nXi\315\213\304xy{\2141=\242\225i\273F|K|\241m\217\236z\216\254\245o|0\237y\177\240nj\235x\244f\205|\222tzkc\202\263\216j\247\205\250i\204\210\227f|\205\216\216\221\216\207C\222KeTiy\232\204=l`<\242j\254Z\221Z\202\203\210h\233oezk\255Qc\263\220\022\260\221KHj|\206\263e}\215i\217\217V\206\227\275T\224\267\212\237A\302\243\220\207\224f\216\306nr\215\253\'\210\177\202u\302z\272cl_x\203\233dc7}\226i\212\212Yl\224gH\217yr\203ndkt\'\214kh\210v\207\241FlGz_dmG\201\225\253I}\215RP\331Mws\243ha\224|\232\242d}bbke\205oq\205\201\213d\242S\210o\246\247np\230U|f\204p\226fc\203ts\241m\245ra\177V\237P-\201\244Q\254Rse\304B}\232myzlXx\177Byg0z\202p^\324D\203\177rQ\227\273mm\226f=\213}\260\257\314W\325ow\206x\321\007Z\255\316cyX\277\241X+\213\203u\217^elt{O\212\204n\254ylj\257aM\202mu\256Z\272RveN\230{x\207vq\204K\262^\252\200Vy\243zsY\217kN\\\212\207\223\217\244V\203y\202\177e\245\232GYvv\217hez\231Pr\204Y\210{~MJ\201r\213\214z}^juo\200^n`S\215nH\236U1a\251nn\265_(}\353u\212\241[0\320UgaU`\206j\311\201\205\202u\345Y\210WY|\\\211\256q\354\200\236\204\212d\215\252tt\233B\237+vw\241cji\223\250J\\\210aps\207z\\\221~hk\201`:\222hpm\223x\200o[\234\201\226\206\213\211\226c\224Yk\236\231a\177\213C\216\2111\220g\221Z\251}\212\223\225z\245bpuy\260\\\205_{{x\236p^\213Su\225y~\\\222i^en\177\226\215yu{\207r\207\204^\237wocjE\203\222\213\212VF\2257\246\210\230i~Fy\256\200i_r\213\224\217r\214\232nzq\177[\267Y`\202\216Hd\252Iq`\226b\220jI\212xPqP\214\230}1\201\224z.u\334f\252\200T\205\177k{\235\206e\240jw\221r\177n\200\\Y\200=\200\311\211Shb\205xh\211\213C\212\227jtflfuqiq\252\222uw\202Y\221V\264\211s~gOJR\251\305\272s\222\210\243S}\247P\214\\Eqq\263O\247\201\201\227\243\210\222y\\\222pZXh\201\216wus\231[jp\213[\312\237\260g\177TV\256\205\210\224m\200T_z\224dhfv{\231i\204m\207\203\215\211~u\255|g\213w\222Szm{\213{f\214\231\220wc|uou\200W\212Om\207\253xgr~\217|\245\221v\204r\216zhB\213hU\244aW\243vey\206<\225\036\207\245r\204j\2259d\211\251\204tzO\204`Bim|\240muZOfl\240\213\237avozt\240\253{\252d\202v\226\221\213\177{qqY\226e\225\242t\232\217q\256n|\210\255]J?\212eM\233\202M\201K/v\253\201X\253x\227\204oS\260\201\232_\251\215\215\241\202\247\240\205\213kMw\207wt\253][K\211\227\233{rXvW\206\212\212L\205guh\233\302r\211\210\251\224\\\317\203xwR\201\225\250w~\2018\232\200>o\230`\234@\211\205N\215\203c\220\261px\215t\200\251q{\254\215kdz\216\240s\201\207\206k\204\203\206L\204\223}u\226\213\201\232\177wU[\242\211\231\240\223|u_H\217\227n\220F\210W\216\222u\232\212\232q\260uz\217i\226\216q\243sp{u\203u\256\177\207xr\202\212\216\236\250z\177y\240}\217\201~eu\267\212\202\224q\206\\o][Yl\226k\250@ne/\242\207\252rsf\205p\250\206\200q\205z\255\271swX\203<\207\2470T\245ny\226la\216\220c\232r\201\211\230\200k[\300\230@\243^\201V\234kv\250|\233\265~B{\265n\205\237rK\206Uc\266\223e\203dsMosz\203UX\223\201d\206|h\231iik\207J~Oht\244\213~^\243Zx\215\216lNhhlKjt\243C\301^W\242\220qf\206\200\216\227ya\236\\X~r\200_|\232\226p}q~my\237\202\217\210}q\226\206j~\210\201\203x\215\211\220\227`|\201e\216\225~{}\213\223fo]\231\211k\206n\177\214\217\242e\1773\207fF{\243z|\270Lp\200\227\277\244\252K\212~ET\220~\234\263\271\204\341s\224\210u\312\005N`\302cu8\277\217hju\254]S_\200p\214\246Z|\226k\240rcc\211gTyop\265U\210b\214Qu\210zXb\205\202it\205V{_\212t\230\202HM\231|[\215\214\221\236w\227\236qwziov\234\224X\211zjkk]\216s\220\210zr\237\204B]\203y\205|\213wqX\210\216\223dw;\210{U_|VUD\243pb\220b<\205\303xy\201_r\246X{eH4\206r\243~w\215v\224N\224_p\177N\177zw\223su\200\204skzv}ss\212f{n\211[s\200s\2151kzzvg~y[o\206``u\205Kljx`}\226\207\203`\233~\230s\223\211y`ygk\241\203u^\206Y\200\240\027zZ\213u\240jxl\226t\254lrw\215\210oFv\214mm\225gH\215\177\231z\212}p\232}vu\222\203\177\233\202\205tk\202\215\207\200\246\274}_\214c\221wfssU\203Nor\227\235\204z~\234\206pfw\204\246m[\225\205\233\233\215^o\253Tbjubs\201emv\203m`}L\227\212Rbju\210{Q\200m\203\211\210\274|\200rW\205s\230m\225\205\211\237u\203\224vpb\223wi\254X{\251\203C\223\224\234h`h\253T\203\204W\205|rwr\203xu\202\223sf{c\220\203\243u{\203cV_v\234\221o\206h\241\232nF\211Rq\210>{c\251\203\235hi\202|r\214\213c\220\177vV:X{Ouv\211wQa\211\212\235\227\302wZlU\221j\200\212\200pd\226e\211z\226ON\177\210c\226kw\205y\200~|\255uh\203dysjc\215{\201n\215\226\224\202e}\214wmlv\177\\p\225\243{\202l\205\203m\222\257q\202[\200\215kdw\222q\225jl\246f\205rnO~0\244\215rjyq\\\177\227\204xV\211i\223natt\220\207h\212t_\200c\222\250\216es|v\210\236|\213\216\216\240k\223\211t\202\201t[2\262f\210\200s\214|Rno\211f\346V`?\210\222J\214lb\223x\206\223\373ab\247kf}es\242\200qQ\260\270\204\221\232{\262k\241eZZ\211\\\206\263b\213jq|\210\212~^~[\202\203fl\235\344v\201\240u\203\201\224\212\205T\246\221u~kh`\236\232\204\224fbsYthk\217A\204\220f\220|r\212\220ck\200\200q\243gu\264j\177\207w\212\245}ov\240h\211}\177np\256y\230\224z[_xem\\~}\251\231\227nfUa\205\222\203\2468~J\223\313\200\217l\245\201\276q\207\233k\207\250\201\221\252y\221ozo\211tv\230j\223\245\206g\240\223\221~\220\233\240\207[tc\302tp\177ex\215^fWZz\217\206\271dS\226L\261\204\261\224ka\227\200t|wq{x\262\266m\222H\201s\201\2506T\246u\214\221yfw\224Q\230\217\252~\222\257Qh\253I\215r\231\205:\251\214\006_a\315\205d\335a\2036\232RU8\352e^\260[P\210\211\227\227\203}etd4r\213^y\240o\235~\2618|Kph|y\253xRQ{gu\266\236\206]EU\244PAz\240O\253TI\236w\210P\\m\222\226\233k\212R\216hmylv}\212\225\211\204]\203nnuxckt\220t\205\235\207x\212\200s\226\210\253de^t\242S\177Z\202\234\220Fh\225v\301\217dwYuw\317~d1n*h\214\235y\200\207S\210Q\257\267\201\236\226AwH\225~Vq\222\274\240\300aygw\220 >i\266\013{r\321p2\254smcfy\220Y\230\234\211j\224q\307\215ue]`y\221ye{H\177cyv\251\211jcV~qBu\204BDU\222j{sFN\257\223b\245\211h\316\216\223\300d\213|H\2049\203\230N\207\222Q\241mQ|\212o\217\202q\240\233ZWrr\207W\234w\214T\205||ji,\227`V|NZ$O\242wb\227f8r\371Ueb\202.\304v\2428F_VS\302\247H\217\230\222z~2\215\217{\210\206j\270~ily`Z}s\\^\217tr\177\202\242V\241\206kaSwl\201Sjg\200\211\201\216Fl\203\213NM\211N^x\245}x\212z|\265m{\177qM^\213e\226Y{_Uch\252B\201|\263\233\205jpK\221\177\252\215jm\205\210r\\j\220gs\265YRg\200\202||bg\246\216qv\204\201z\241\221\217ncrj\215g~\261\2273o\241\235Sr_\224ng@P\177\232\221[\202|~\244\215\211vx\237RA\203c\226\233^Sg\244x\\or\177wMrws\201\215\202\203S\224v^v\215\210vqZ\2176\235\210\215\235\207g}V\231r\247n\206\210w\247W\204Y~XZ\211\210l\220N\246\232yN\213\272\2300r`\300a\237\223\\l\205]||vo~\266\233c\211PK\227\177\264zw~jvsc\265\177~\205<\231}\2573BQ\207\224SgV\243\220\265Z\236\225^_\215\214\251\203f\322\244\\l\213pr{\250\213\220K\204\220\253\231\251o\"jw\200\215w\237\234HX\240\224\260lsDIr\221^\226]\220\207xtf_\250\221gqk\237\215Yp\215^\215n\230w\235rtl\215Ts\204p\211F\216\245\230\210\256P\257oKh\236\206wXxue\206z\247q\215un{li\200\212I\242\023\220f\203jyo{\205\220z\206_\235~~pg\204\234\223\203k\227zj\251H\244\213\243we\212y\234\234p\223\215\243\205O\243^^v\202qx5\213o\215\221\200p\277ay}rR\253\232nE\230\260Zpqxq\240\343\214\303iI\275Uo\211tT\224ms\233D\212y|\217r\303S\301I~d}JJ\261s\221Mzq}\314\210SpE\223gCq\221\341u\207\205kwu\227\220\207cQhR\207whW\272\247]\243m3\226\214\214<mmCl\230s\223yt|\256KTh\221m\231Yi\252d\245[q\204\210\246}l\252d\246c}yp\311vzb\212\267\230jqWv\240\210\213vs\203\225]]\220o\221\231lyq}\215x\215\242s\217\225\243_\177`\217\203\214t~t\204y\226x\221\207\240\210\210\234yx\231\204p\225\217\211l\205g\233}m|\240\211\177\203\213erh\227\222bgl\213o}\210\203\204o\214\217\201ooL\211l\203s:\205x\202Pi\232\214A\213gwssv\226\240\234d\223f\213\200jtn\303a\207\244k\223\215\264\230\230\220w\201\221\247c\211\212\212h\232zh\232e]\315m\207\226[\217\270\226\177t\223\231\177\213|ra\231l]\227\217i\221\206r{xHRpn\232k~fr\215f\211H\177^mn\240wr\242\200H`\321q\227i\216d\230\216\207\211w\\\2248y\213\214\217\213\222\207^\223\\\224Ys\221\204\224o\212\214_\221\212\256i\224\\\224m\235\206\242Q\224lk\237f\224V\\g\254\214\251uYs\233S\240\224\205\207[GUy\206v_gvy\206g\227\247Is\217x[,{e\212]\224c?U\210|\203\233\214Tpq~\230\254z\204Nq^\311j\223mPYW\266\207\203k\204^j\216\211}~\212w\177u\236lNprg\247]\272OedHz\224s\217}\177\241L\232x\204\206i\177\210\177\226uTbWm\220f\212~\225D\212\204\211\231om\226Z<\213y\217Bxr{bc\177[\211r}d\\m~\201hh\207Mpsp\204\204TxYY{\242\234f\231g[ca\235j\274vPf\205\303Md\241)ANK\343\216\221\231>Ysv\272\231\225\177{\213bz\225\203\310t\202\200|\211\245\236}\223\204O\227C\217\215\235\177\244fur\212|\207jro\200pr\210\210\201\220eYW\252wq\206\225eqi\206\211\201mh\202w\207t\200]s\203\177X\216zG\223oq\216vth\236y\223\215\211\226\214c{m\210\220f\217o\220j{v\177[\202Zw\205\205\217Ynlfhu]o\210\206oy}\203\216\225Z\241vp\200yNsx\215\213bu\203u\232uom\177an\204\203z\\\215\210{\233p\204\177{\211y\217\202\234xgv\221Wj\247a\221\202~nxeWlZ\201\210\\{\250\206N}\235\200`q\244s\225{s\302\177_z\220{\177\205gs\243d\201\205XD\225d^\203\247\237x~~R\216g\204v~\202\215`vn^g}\240ii\212|{\201]u\235e\226\201\202\202|nwv\234\261\225\231\261\202\227apd\\[i|j{\206oz\251\301qm\211|\233Sw\215a[^w\216v\240|\177z|{aq\203\220xu\202|t{\225tY\223\203fk\205\203w\210dks\215kk\206\212\211\216|~\200\234\202fvs\200K\177}ml\217p\230v\233n\211v\234{hzd\213dk\264\232z\216}\212v\244\307l\177\212\205\211\\\230^\210wh\250i}\305un\202\206\206\202{l\275s\204u\212JU\224\213\224nyR\212\207n||\217\252\203\202q\204\177^\211Z\221Z\210\204ur\225\266~\230oa\225\224\222y\214\207n|]|p\213\206u\223\244c\247YvA\274M\205[}rv\221\207\224\210\204\020q\303\215\216\227sbqL\210\214\202\224\026\250\216|\177\214\271o\204\260_F\213\224\202oijs]\235\221\177\226xc\212^z\210\220s\206be\234y\266dxy\230\177\205\262\203\214gP\224\225|hwe\214}sat\253r\216c\177\221o\201\214b\224}\207\214\214~\231\256\214s\202\234w\206\201\233\201\203x\242o}w\221\223gm\211\200m\205m\246\226rohi\201\204i\231\203\205~\224e\203s\230xO\203y\216\204~\225\177\221r\232cl\217\210\207\217\177\220ysc\203\227\214\220\211\216y\203\230\210\210\214\255rq\210\213r\236}\201\200z\250\247m\201yol]|}\223nk7\247j~\203t\204u\217\206}qg~\212rzgel\242\200p\177}xMrwLj\231cs\205\205t\227\231z\241doo\240wsv\225\236\200\257dpY\213\221\231\247\222\234\261z|\217\275\235lo\230i\200W\217m\245\216pp\253yzdu]mk\200`\177x\213~\215y{{\224Z;\227Y\204W\177\200|\307j~\262\177[u\200\210Gf\203\207\206G\326x\222\207\202\207\233\216\207\204hi\203\202mi\220\211\211\177_x\222}\205ktxv\204w\230\201\215\237\230\235iq\211\241v\230}\224`\213{\201\226]~\204\207\204\213\236\220\211ik|y\223}\210\223~Wyu\201}d\213\241\201\244j\227\220QJ\207\221\225Jf\203\226\200g\224W\204e\210\210\244\323?\271nd`\330}xj\210f\316Vqz\345|\207\211Prz\223eo\210\201\206mki\214\202|wWjps\253T\214el[rmwytw\252\226\205\210dfult\211\211v\202eqk\240\222hym\216ur\207\215~[}hqM\220~pR\212epry\205u\217}qQmv\220}t\201\213\\`zs\221\201][\177pZo\227xmshwl\222n\241\221\215dq\242ip\177oNbG\216\211\205X_`\201e\203\212\311\212wof\207U|im\204v\212\240\205m~\201\\\204\211|z\213\212r\210\207vuY\203\207vr\177z\200fw\203x\210\200bn\206fts\222\203v\200e\215vZ{\221ztqvem\214t{~~Y\210\217N\200|]\204\227j~v\201\221\215mwu\224\202\210vr\224jvh\201f{m\227~\217\243qm|{\204\222ge\216\210vr\221u\213\214vv\243\206z\214crotjo\214\203\217p{\202\203\177\212\220rr\231a\210r\215\217g}\223{\223\227k\215\257\205U^uq\204\216t{\236\202jF\215pov\226mnX\217urw{\204\240\200\206\201\220u\206\232~\213V\230i\236\241S\212\237\217o\202^Q\221\214h\200\201\243c\223\205\200{Zy\222\216\200r^yyqv\221\251bzS\207w}fh\232\210\177iv\213wa|\210\226\221S\211\226y\224}m\204\\^ity\217y\212q\242\224xPy\205\216eg\240\250\234ZuoP\235m~|c\220[\217U\205\261\200\207\204iX\200\203^\223\225zwb\206\232admox|\212\221\202\207q\206r\204\227\213p^\201fpvrzl\230y\233\217\215v\213l\224\177t[\214\206u~\203\224~tt\213\203\234\217\177\177\215sy\212~\204|\222w\237}\211st}\201Q\216\215{p\233t]\226~[l\227\207\221R\230y\217v~ot\215\234q\245|\177ty\210\212\212V\177~z\221\212\210\220\203\212W\214\220\215U\222\203\204OO\217xj}|\213\217gom\207S\320a\203]\201zT\210z\232\313\225\200~\337\177}\234qDjS\230\211ti{l\230\203|f\215\177\215\257oXp\216o\201}k\203\212\211\221\201\267\212i\202s\177\177j\200\231\220t\212\212\221\221\203\205o_p\244\216\211{y\204{o\206\211x\223[_lk\225e\220ysjw\205\214a\232]\205\213\213\177\204\253\203}\220\211\213\261\207\233\233xj\214w||\225\216r{\222}\210\220lzgjc\200jz}\210\231u\177j\201n\213l\236\215Cyo\224\317\223\212g\212z\216[\216\231\213\200\244\202\223\232xs\203\222|u|q\202\204}\227\207e\251\207z\211\217m\226\212il|\262\214UxrS\214R\202b\203\203uY\250wu{q\227^\231vt`\202\223ild]\213{\236\227\177\214b\210~t\204QN\221l{{\216\214\210\235[\244x\217\214\236\235e}\204H{y\200\206M\236\204<c\206\307k\204\242\203z}b\200\227A\274sh\201k@\205\243s\211\245\223liqvo~j{\272\210\205x\241^\202x-\233U\234\202y`}\215Z\222`w~nTPU[Nx\255o\267uj\220\204\200~\\\213lt\243xtd\204\203l\205pX\213n\271{gdroo\201|j\211~\256\222t\233w\250{\224p\233p\236onD]\242Fs|\221h\213cz\216n\223\226Z~u`/z\235_^W_\224\215\232p\201\200ITp\215|[X\246.\206U\314d|\231\200\2476\255RfmAU\356\227\325`BW\230mZZ\222\232\233^k\207\212|hm\247m\205n\224\205\212\206ku|wq\204kMze\215j\257xo\206_}\213q\214\217HOwuos}cx{\226t\241\221X\212\227\217\230]~\225Fkp\\wT~uf\177\236qx\200\\\210s\223ziqlu\200tk\236\211|^wZrmyMu\205N\203lfY\247K\201nqm}\217\274de\201x\223(\243b1Ch^_}w]\231i\221\216\261,z\203w\230|b\220n\222m\223\207|x\204s\\\205y\204\207z\231s\203|\206mSw\203tQ\211Z|\210\212rVu\232\200gZteQ\225\221sstvr\205\177\177~i^\204\214X\205[}oVkr\241^\215\230\211\244\210al`|\211\220\210uu\223\201\202|\212\227Wp\237\207bfm|\200\177\207rr|ou\220h\203\256\245\211uyna\210|^\217\231U\227\261\224hnhjkmds\226\200\205c~\200r\\\203{\203^\233y]ssMx\211fp\221\224best\177Mz\177\222ows\203i\177\177\211t{rcym}`\215{\253avq{\221}p\307a\201q~\253;qf{gp\214m\205\234X\212\202\224]\211\222\201K`b\243`\202w\\o\204]s\211\244f\200y\233opm_\203\210\206dpuyz|w\227u\240jeq\205\244\\\201S\222[^t\220\221\201\261\241q\232]k\212\203\245p\240\246\222~lra\211d\235n\211sz\214|v\272\177N|\206f\221o\204\223rj\222\210\253\215Nwmq{w\244x\213rr\202fc\224\213\201S\204\211\217hk\216m\236z\241x\210d\217d\224ecua\225F\216r\222\203|S\243pv^r\240uhZ\236e\240\200\255d\220\205zM\200U\221Px\235]lncW\210xu\203\234\245\206P\235~\177}tg\231\215\226W\236zl|S\215k\221lZq\223\224\246}\221\202\220X\177\220iMvv}k@\207\206\204\216\207c\206\223\201~du\205\240\222\221w\214epx\212\215\231\267\210\204qq\210vbhrX\201Xg\307Gc\217|pe\253q\243byl\205cP\224h|sr\223s\312\205sud\213~?\205\177Syt\203g\177k\230gQ\177c`{\202\225\221~\206\237r\220\206Oy\221\212N\\nxw\200j\240\200s{}fsv\220\200\230up\224\210\212\200m\240\206\225\202\203\211t\224\207{rh\226|\207i\224\241lUkry\207}\263r[y\2043f\211c\237\243U\203c`\250r\177q\204\245\233\255[q5k\230\232r\246z\225jv\203\255\204\226\233\226\213\222y\212\177y\234\212i\227\232[\240\204ge\213|kz\244}fpw\241cX\177\206\177\256v\246\177\205\217\305\210v}\203\260|\221\204azq^^}\223\232j\223?\215\211|\202u\213\256\031\213u\222z_\203[\207\266~\257>\240\344\232\227\266\227\2530\212\231\211\265^\207O\233gh\255Su\311P\214~|\215\237\272ciw\235l\272t\216pj]_\206\211Z\217rw{~Q\264\216Ec\\\204\220Y\214\201\201jndmi\215\203\271\253\177Vx\302\222\251qxk\206\242{\204t^\240O\202\204\247\217v\212\231Zfb|\214x\225|Q{\203W?\241\274vb\304r\206\251\203~\177f\240\211`\225}\225\210eD\235d\242J^[\225Jq\205{uNhw\215ul_gi\206\200b\270\2065lg|-):=\203R\240t6_{\210l\231{\254cR\233[\211\212\224MtP\256y|H\245fe\331\232\224hWWE\213\250\205~\242n\202\227\203wA\215\203\212\276=\273RxsZyxp\246goiP\206\232_\202z}~\211\212wiCKp\216y\227\205\220R}\227m\231\205G\243lFr\200\244\230\212\210}MR\216^\227^z_GvjwXL\202LnZR\215\220Fv^Kk\311\220Q\323LGoK\203\213\241V\000l\245\2757\360>\023r\241y\260\207\305\315\206^a\270\271\260SPx|\207\267\247\233\333I\215}\207dw\247\204\227\277A\2716r\233\221n\214L\244?|}\210h\221\\drX\201\203q~ivP\240Z\234w|\177ur\237tz\207^\243Sv\210\212oznp[\235\202W\211i\257\207s\241p\235\211\210\207\210\251\224_\206y\200\237i\230vwB\221\217\236iwY`\201o\220fgue\207`o_d\214<z\212V\211\231O\242rmqd_~\213\210|Z\202\211o\220H\177^|Zv}\204Zt~\212\207xux\205\250xR\220m\230Z~>\226/L\245h\213\237zF\243jZm\210\225\211>\206\253\211KxpbS|qcuV\201\263\227I~\210{vh}\211n^yszswlO\215\242\222e\221\245?\252oYlswza\233sad\203\320\206V\311\212}w\211\236\225k\222z\241jkx}\231\245\262\237\206\225v{jq\200di[\254wX\215j\222\260\324\214@\200i\244\217k\240\377\340\216\230\251\253\217\204kz\240\210v\215\301t_zn\\y\177q|\206n\226QO\305\204s\221L\206p\222uSkwp\245j{\221\221\211\241ye\233Ktfew\216_\213]\255dyZk\222^\177\241Yqh\241\231p\233\213\226v\246\243q\223v\212d\\\235q\221tk\233db\252+y\214\216\202_It\250\213if\223[R\237\216\224{\223\\\204\263cw\202\220\207\251vv\202gF\217e\232Mby\207\230\177\320{\267nO\223\241u[\255|v\261Esom\256j\206\2743\236Ogm\231\\\261\210|l\224\222\212\224W\222\021d\220\221\3020fUjD\262or\227\244\252\212\177rn\233l\221\342QK\233\235|YKt\2049\242\206V\227\203i\202T{\203\230zl\271W\244}\212QZS\217c\217\231\222v`dq\207\244\213\207J\310\220jr\202\254~\202\200ov\234p\240j\237\200\205\236\206e\233\251\221wX\203\202W\233\240j\222n\246d\202\200\231\216uTum\206\226\177\224g[g\216qz{\234\216kwica\207r\217\2061}ow\252\212\205v\226\216\256l{\204bk\203\227\243\222yp|\220\211}\210\212\210\221{\223\224\225\236v\177\221qp\240\214\211p\224\203\217qe\205o\210^\201m\265k\\b\213\204\217ow\226\200\223\226\220z\202\206rv\227r\210q~]l\224\213\201d}Xs\205~\202_\204\215Y\226\260\222\2507\202s\224|^\2345\247\260\262u\217\204\261)\205\216\236\305n\213\212\252\247\261wq\212qjq\253k\246\213yh^^\212h\203vy\225QY\207q\210hsb\226}\215X\251\212X`3z\244\200\232g\221\261j^y{\204y\224\261\227mf\314\220\234hc}\230\232\206}Vk\236\215v\226\234\227{\205oRh\203s\211\206\206rP\207\237^p\244\245\203u\245\220\216\234s\206\214k\222\245\201hc\212wl\243uL\227jdcl\262\202pmgpj\254\205sw^\236\210\212\244n\267]@Ir\210\207A.oid\251e_o\220\217p\221X\223\225g_`S\273\251x\253]\253p\211lywy\241\210\217ckTK\223\231zk\207c\230\242\\vE\204\210\235\2446\210dm{}sm\227\235T\230\210|\210\226^~Y|\207\237v\204c|Y\223\217\202\202e\213cp\243\206}p\256tVYmb\216\264\243\216t`j\207c\240hx~N\210z\200vt\203GadV\214\213fe\\Z<\211\203h\222kV\220q\232\200^c=x\233\243t\261kVy\256\204\262\205\244\266\226re\216\247\255\221O{Z\245\224t\205\232N\221il~{\214\212~\204W\235ly\262\232j\206}\221~-s\221kwx`\256f\206rT\230\205\207Y\225^\201\207y\233\213\205xme{q\223}h~\215xc^ju\200vZ\202r\220z\177\206\210\223xyv\210\237\216c\201u\215\217|\213^vTv\217\247\205bc\213\201o\244mc\220z\217ilq{\231Is\235Ux\223vd}\244o~vw\224\205Ti\205\231ovr\212\204l\177\177peu{vv\234kql\227n\221}w|\242ymjoko\206ur\260wr|\224i\205\216\235aQp\256s\\l\236\213\205\200l\177ff\235\224\205ta\215p\201wc\232lyq\217sDh\202J\262\214\247T\223\227O\212ii\214\203{\202kw\210np\224\271xh\227\223\177z}s\215uz\210\230\213py`\210{\254\266s\201Pu\231A\230eqP\200zg\227\200\232\200\211\206Wzp\216\255~\301\262\350~\214\213\213\232\211un\250xa\220\204\221itR`s^\177~qq\242js\242\246\224@g~^\201rcqzh\214ss\206\213\212\231k\215\203rrdpt\232r\213y\233e|_a\205|g\204fo\177r\212\212g{\211w\270\225v\224\203vy\210\177s\222\223k\217q__Sk|f\216dVU\243\206M\203\206eO\214~\233d\240\200u\227b{f\223\266\222\224\221suO\204\225\244[\\yy\277m\245\207\261\204S\212\201uK\252\216x\2211\207|a\262xz\202StTj\203\212q\312\177vHu\230\205\227\210\203\230\207\177\227\240R`Tf[\242ka\220\2707W\241v]v|\243\272_n\212\252xt`lrg\221\211\\w\207|\204b\212}u~o\245r}\225j~zrjRZ\221\215px~T\202\237\215\216`\222xTh|\334vx\236\223Ybu\234y\227l\212\240\206s\217\271\227zms\212y\242\237uhn\225lz\221\233\200qnuf\235\240\215iLNS\245_vp\302\231WrLP[\234hv\2436kf}\373\226\201t\201\214\206X\225\220ery\222\231\227ky\205\220\207arx\212\207t\220\232i\237\210w\235\204Hx\224\\Z\207\240rmeh>\216R}n\266\201u\235\215y\210xd\257b\241muk\234KtTy^\222\222k\201d\223U}wo\212\202jo\217nu\227\204\204\251T\247k\213\254\236qV\217iS`\214ypj\231\203\035R}\277x\255\274\231p\177/\224\2215\264\207eYR1y\243;\224zkb\202\202\2308h\244\207\273}S_\235Yk\203\236``\204\211s\177hs\200{EcrrqVp}\240\212\272\177\310\205\222~ps|j\212d]\243\213\221u\201~crcY~b\253ut|qiC\215\245euu\254\242q\313q\266\211\205\206\272\224\265hcLnzdv\301\217\033\216Ihwg\333\223PeH\207!\224\231PXO\221q\214\247m}ZLGnq\204RY\256Qo\230ji\216\255x\201OW\213?z[iM\237\233\212\226UK\212\242m\034{\230\\\252\214beJ>\272gr`\257\200\200\250OzY\216\217\246_-bg\206\251\256\203r\235xm\212\240\217\241}\201\206W\205x\223o\211g\247k\212\214\205y\211\242\177_z\227Mu\252tNmKM\212\326\272\230yxW\216Q\260yl\233C\206vvl\211zwQ`;nr{]fxG\246\211k\310\263D\205\216\216}Uj\016s\214\206{\363\036u\203y\225t\201\225\263tt\200\\\330\300\227\007cS\316r\205W\276q\213dPdx\223rsxT}{\201\273\255gIt~\234\"j\227gs\223L\246\224\245Q@\220\212\224^l`\227\201\204\251\203~{Kr\250tn\243Zf\224\240FoWkNPoj\226\207\205\224\237\263\204nom\206\205\214\217wx\202\234{w\177fBo\305\276\230Dv\215\207a\215f\\\205pn|t|\232\277z~{GZ\224\213]f\254Y|\243\262\255\223Kf[\216Fm\214m\245a{R\217PR\227ed\251[P^~an\250xU\216\206U\214o\233\204Ot`\255p\211\250\201W\220\201\177X{\200YpSe\224\203\200\300i{T\200\231\214\211\331Y\202v\210\215bk9\\f\205lCi\250Am\205\215Cy^nWxV\240Za{rn\213Zn\227\313\217l\265\242\203l\206jl\177\201b{\204n\202k\203X\233\312`ZHm\265\020yQ\213_U{\226\312s\246^k\233\210h\211\245\344\210\267Iwex\220}\215t\205K\312U]\177\233\237\224\211\\a\224\\\177r\204We`\200\301\252zR\202~]\207e\202[}a\224\204a^\216\212\245d\216\243\217kZ{w\227}\232Z\212Tye\203kw\203F\2102s\\\223\242ia\234h\276\210^\244\202yZ\232m~\227\251U|wSW\230Z\224er|Rd\221yWw}f`\247\201\204q\220\214\177\245n\225\206\234\253eu\202o~9\216\177\250m=T`\261\237r\204\265ze\227uJH\211q|\260\021\222|w\302\202V]\223\232k@}\200\245\344\266anrwg\211zw\320\247Lt\255\\x\213k\223gUP\201\234R;\246\177nJ\260\250\222O|w\247vdsg^^j\217dSz\216w`\212\211Nzj5p`\246I\221v}L]xoYs}\227j\220\271\256|f{hp\233\231\216sZ\223\240\213C\242\213\222{\215o\214m\227\225\257\214jp\207xRr\246xd\230\221\204t\226\216mq_ou"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.830039620399
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.865318655968
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/convolution_eightbit_reshape_transformer/residual/residual2/MirrorPad"
  op: "Reshape"
  input: "transformer/residual/residual2/MirrorPad"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/convolution_eightbit_min_transformer/residual/residual2/MirrorPad"
  op: "Min"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_reshape_transformer/residual/residual2/MirrorPad"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/convolution_eightbit_max_transformer/residual/residual2/MirrorPad"
  op: "Max"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_reshape_transformer/residual/residual2/MirrorPad"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/convolution_eightbit_quantize_transformer/residual/residual2/MirrorPad"
  op: "QuantizeV2"
  input: "transformer/residual/residual2/MirrorPad"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_min_transformer/residual/residual2/MirrorPad"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_max_transformer/residual/residual2/MirrorPad"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_quantize_transformer/residual/residual2/MirrorPad"
  input: "transformer/residual/residual2/conv1/weights_quint8_const"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_quantize_transformer/residual/residual2/MirrorPad:1"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_quantize_transformer/residual/residual2/MirrorPad:2"
  input: "transformer/residual/residual2/conv1/weights_min"
  input: "transformer/residual/residual2/conv1/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_quantized_conv:2"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_requant_range:0"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/convolution"
  op: "Dequantize"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_requantize"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_requantize:1"
  input: "transformer/residual/residual2/conv1/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/residual/residual2/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/residual/residual2/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/residual/residual2/conv1/convolution"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/normalize/Mul"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/normalize/variance"
  input: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1/shape"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "b\331M?\313lJ?F\2436?\302\214v?\326*\272?\271\262b?j\017c?\260\177\014?<]\244?!5-?y\376Q?\202t\240?\224mV?D\330\220?\217ri?\333\007\212?\216\301\217?\2541\361>\305\215&?\214\007Z?g\275\210?\014-G?\376\300I?%\265I?t>\034?\023Tc?\332\262P?G\024\007?\334#/?g\371a?>\325^?\222\014_?1\3239?\357C<>/\230\232?\020US?Y\251\213>\2360\257?\235\2417?a\367a?!i\300?\361\'>?\303vP?R2K?\006/;? \333\235?2R\236?\030\251]?\'}\275?\313w)?\024\314[?\237\"\272?\374\376j?1\267\246?m\243\n?\326\260\002?\235\336>?\207\3416?\235\037\216?\267+\006?\273T&?\355\250D?\nF\242?\036)\277?\365&??\n\265??v\\=?#\355\224?\3008\333?\257\233\236?cw\240?\345\001\234?*\220\\?G\"\201?\311\200\030?\204\027Z?vjP?\316\013\240?\332\237Z?\237W{?S\246\246?\355h\374>\362%\014?4\005C?\237\016\230?\312V ?Z\000\211?>QV?`\266\t?\2062u?\023\231y?\263\263\377>\330\324\r?>!\250?\242\255\207?\257~+?\226\r9?\3266$?\312\0019?j\207.?p]\307>\257<\270?6\007\211?\313-\202?\027\342\257?q!`?o\\\211?\365\022A?\342\346{?\255\"-?f\267\244?\204 \206?\230)D?\236\301/?]ac?\315\374\242?\013R\252?^\346\031?\214\r\033?\302\236\241?\331mw?\204\340p?\272\n\031?\276\324P?Y\326I?p\003V?\311,\215?\030Yz?2Y\036?\227\361E?d\020u?3\241$?\235m\322?\370\211q?\002FN?\364\261+?=\364t?Qf\006?\010\207i?iaW?\217lJ?\357\263x?\240\003O?\n\276u?L_\234?\350F\036?-\037#?|\343]?\020\256h?\325W\371>U\010-?\023Qg?\nK\000?]\033\207?aUd?\025B\317>vo\031?\310z\226?fZ\220?\236\361\220?\"\033\211?\177^h?\371>F?\260 S?\364\032\244?\006:n?\\\n]?\201Au?\241\323T?\325\351Z?a\"n?\314\254\200?\367\0325?\234\231\234?\030Ez?\321\303\261?\2317A?ZE\377>\221\317\"?\265\320\264?\363\345\227?7\254\006?\332`\201?9r\224?\362q+?\267\007\253?\345\000\035?%\354-?\334b\216?.\274\213?d\321\215?z`7?t%!?h\326\242>\331B\\?@\333C?\2615\327>G\257\245?\210f\224?\301y\022?\030\370\233?%j\006?$\334F?\251\306\206>@I\036?\027\201]?\r\334\251?i*\312?\250|\303>\247\246a?w%\320>^\036\270?\003n\224?@\010l?\302:9?\354<;?\206\265%?\300@\202?\332\200\235?\2167\204?\225\234\222>\026_\315?g\004\007?\237RJ>\0232I?PJ2?\007~t?~\362\034?Q\276\236?\222\263\205?\344\036\t?!4-?c\360m?;\371\027?\303J&?\"\372\344?2\363\027?z\tk?\272\\E?\3051/?:4\317?\273\215\017?R\r\022?\n\231\\?\316)F?OI\202?\\\035_?\272%7>\322\335^?\362<Q?\031\001\205?m\265\030?E\336\032?\243 \201?\006w\034?\377c\035?\337d\235<\345\255\217?\322\361\352>z\233=?1\032\212?\227\255b?\021H\'?\244\330\024?\366x\023?\251\236&?/\231@?\207jq?u\365b?\326V{?\236\314\231?\304\326\330?nT\202?A\227+?k_)?O\262\235?c\025\210?\317KU?\014\"\312>\003\216W?\201\344d?\353\005}?\226\253\224?\206\000\346>\357\220\036??\033\265?\360\343\252?\307\264\\?\\\207,?\224\255A?`\261\036?\353\230N?\236t\375>\327\250\246?\0071\034?(\177!?\262\357D?G03?\205{#?G\274\026>\245\267\"?\034\206\216?\375\207\244?N\332\272? \022w?\205W}?)\223\002>\351\242\320?\244\204\230?\000\215\214>\362\001(?\364Lq?\242M\232>\"}\217?\371\026S?\020{\275=g\275`?\342\345\272?\254d%?\242*\206=\256\246w?t\213\030?,be?\241k\177?\326\003\217?\367\226\251?\200\240f?]\226\205?[T\251?\220\202$?K\036,?Rh ?\253\373\340>\014\032\207?4/\246?T_\273?;\032\205?9\2212?\377\0276?1\325\231?\035\304\210?\207\273\013?\312\331Z?m\017\034?\271\241 ?\371\215W?l\352#?\262\263\032?\221B\002?ys&?\320\310\216?>zP?\341:\324=z\2008?*\326\352>\265\2301?\334\0017?\354\324\256?\037uH?a\305\214?\301\\k?\0271!?\0101\313=\272\245\306?\304\230C?\0331\223?z\312\316?ny\217?V\244\216?\341kB?o{\010?\007J\330?\227c\245? \021\201?,\023)?\316$6?\215\004\370>\354\2000?\\\355R?\205\375\211=\001\354%?\353\214\302?\266\334\221?,+\352=\017\252=?\375\322\035?4_.?\360\377\200?p[\240?\306q{?\263\014B?\237\031\343>\356\014\311?\024\356\035?\216\266;?\242#k?q\013\227>.\323\200?\031\2323?\206\210\234?\323>z?\330\014R?\237\220\026?*\026u?z\225Y?~f\200?\213\365B?\336\356y?R=#?\034\217\245?k`C?%K[?\346\207)?\026\277;?\2064N?\007\257Y?\335\277D?d\260\014?}\227\270?\214lT?\301\245\232?\301\332\220?$\242\211?\020\265#?Bh\215?J\354\232=i\006g?\266:k?K{O?A,^?\006\361\254?g_\266?\267\243`?\2760\n?\361\303\016?\335A\227?Jt\202?\030\315\035?#\341H?\334\333T?\302)\370>\222\016f?\235~\224?n\333\341>\306 \007?\207\252k?3-\204?\335\225\201?\001\025\n?\351\0368?\214\367\316>X\311{?\003\356M?\372\324\221?\274\003\200?7\242\224?\177>\250?\274H)?k\226\026?\346\005\307=,\271\032?\323\n\243?\237}\210?Z\263\215?\324\326i?\331\277x?F\335Q?m,\326?B\271\224?8\023%?z\203\020?\327\267#?\334\237U?\300\321W?\025\003\377>\364f\222>\261\3571?\013\350X?\216\311\200?st\354>\324\340\314>\352\177\201?5b\272?D\325\025??\374\021?E\213\177?\206\010N?\177M\035?\013W\257?~\002\'>\025\341\023?A:I?%\355\216?\252vc?\270\236\245?\r\\\242?)A\202?HOl?\215!+>\".\275?\357Jh?zYV?\324\377,?\265h.?0)\033?\3209}?S\215\276>\312\344g>\364\226\370>\333\307\303?\267\330\315?]\242P?\366\271P?\033z\325>\034\366\177?\222J\224?\357\342n?k\211[?M\202\204?\332\300+?{\327v?\231\3168?\356W1?hO\357>\270y\023?-a\226?\240\250\220?\367\252\225?\344\033\234?@(t>\2340=?\024\277\250?A\013\233?\351Y\025>]\010{?\'\265\223?\207\204M?\317\240\221?\316\357\023?\273\271Q?^kX?O\257\375?tg\215?\214\204+?h\025\214?!\025\371=\335]\212?\310YR?4\347\002?\316\027\227?8\331\360>\2273\261>\2516x?\360\037\204?\212\2311?J\212\370>\376\220\217?\231\263\353>\214\304\236?\204\"\225?\216\222\213>\314\320S?\030H[?Sk\333?\002\332\346?Y*S?v7+?\017\304\370>\t\346\332>F\350\230?\243\022\365>\002\032\224?\241E\252?\nF_>g\262\010?\261:j?\245\270\014?\352\377P?\204O\"?\2159I?\'W4?K\303m?A\364\213?x\330\371=%W\324?\033\315\362=\326\036\'?\'\312\017>\032{\033?p\324L?\377\356t?`\020\376?$xz?^T\230?X?-?\347\254g?\3331K?\020\326 ?\177\307k?\234\371\214?\230]\014?\362\030Q?\231\3607?h/w>1*\032?\270;5?\264\324\307?\323;\273?\244\275\321>\240\357\036?\373\311x?[\273P?\350\342)?\016av?j{7?\372 \311>Y\214\226?\024\003\002?d\035!?J\215\212>\263\232\231?\260\010}?:\017\272?\270\232l?G\340\231?\3570\200?\216\033 ?\0307\303?\255\240\253?\216\272\357>L\343X?O\252\222?dHi?|@\204?\013\266}?\265@\304>T\302_?\374\020\341?\234\262\210?\017\366k?\000\323z?V\024U?^\005[?\031%w?3\255D?W\344\206?#\326v?7VJ?0\236k?\251\252k?\204\224\014?\013\204\211?[\007\034?3\372\225?\253\342`?vS\227?z\014@?\220\006\345>\t\375\200?\221u\247?\t2\232?\262\r1?\271RH?c2Z?\212\200,?@2\200?[\3676?\372\2044?\344\026\\?\225\315\202?vS\217?\004\362h?\022\345<?\225\245%?\363\324\034?\300\211P?\245\224\243>\337\364\326?O\036B?\374\305}?\374_\254?\376\t\205?\355Zp?\030\275C?\2610d?X,b?\226\367\263??K\215?\332\303X?\364+\005?3u\326>\252.\276?\261,\257?\227\2627?\2034s?\340\260\024?\356\274#?\215\313&?W\336\031?\345\303\036?F\312q?GXF?Z\377V?\302\217g?8\023:?%\317\221?\321d2?\036\263.?\272Q\305?\222\001G?\306\344??\\9d?\315\010\255?\034\337`?\347\323`?\"\'\273?<DE?\013\361\203?\364\000F?\212\342\226?^\335N?*\315\372>E\301w?\031\277\216?qvf?\221\301^?\013\026\016?@c`?\005{\021?C\367\207?\216\235W?\n\377+?\350\017\004?\232\025b?\251\237\220?\374^B?J\335\000?\2552\032?%\177M?\275\325H?\006r\000@\032\"??\365\323\033?\365*\232?\350\227\025?\370\245\317>\343\231\211?\375>\241?\213\002\020?\014\240/?jm\021?\177\305\030?D\217\212?0\020s?\324\321\024?\r\274\023?\212r\366>\346)\002>\360\006S?0\014\036?\2136\r?\027:\003?O\215U?\2317\302>\267\207\252>\246U\331>\\\216\020?\320\307\244>\227l\374=\007y\362>\263\313&=\316dk?\000<\201?9\325\323?\343\301\270?g#E?\257\3308?E#\366=p\267[?\345\n\352>\316\201\006?-\212\213?\010\253\253?\273\367+?\216q\344?8.[?k\311&>\325\025\203?~\\\210?\333=\276>\032\264\005?\314\206\027?X\032S?{\013c?}-+?\t\211?>\023\207!?\342v\222?\365\246B?c6\344>Hv\020?0\320\237?\322\362\n?VXi? \352C?\032\254\244??\014\306?KYv?\260\277w?b\234\002?_\277\024?y!\007?\306\3148?\354:m?D\242\242?\201\253\240?\225\205\321>(\032V?\275\323\t?\316\202\310?\331\331\230?\246*,?i\243\024??\214\205?\344\001\367>\247\226\265?A+\211?\203\351!?\234C\206?\246\236\321?\256\037\201?\000\255\244>"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_1"
  input: "transformer/residual/residual2/conv1/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/residual/residual2/conv1/InstanceNorm/mul_1"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Sum_1"
  input: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims_2"
  input: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual2/conv1/convolution"
  input: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape/shape"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "Oo\"\276B\026\351\273s/-<\223\317\230\2763e;\277\017|B\276\003\365\327\275]}\235>\344\354\360\276e\304\267\276]\266\373\275\341\316\333\276\251Q\322\276J5\230\276\334\354\252\275\211\257\201\276\314\345g>\371s\r\277}\370\231=\002EU<\357`\006\277\351h\001\276/\356\357\275\334\343\037\2767F\020>\320\366G\2732A\226\275\363\355\255>\315a\026\276\006\363\251\275THj\276\026\010\214\276\024\325\007\276\235\374;\277\312\267.?7Q\307\276x\023\020\276\3204\371\276\233\303\004\277=\322\303\275\3242\240\2762\335\233>\224\005\241=\231\035\007\276\234\264\217>\244<\375\276\247+\225\276M(\002\276x\n\206<\"\227s\276f\177\341>\323\207\350\275\224\244F\276\'E\n?\202\305\302\276\313\261C\275\277\364\221>iY&<\350\234\252<\006\357\345\276=\361\236\276=\240\353\276G#/\277P\240h?\312\260\r?\037\020\220=:\227C>4\253\361\276\212S\324=\032/\300<\274\017\016>3\260\250>\210\344\256\276i\255\215\275\365\226\310\276\260\215\217>\221\276~\276\277\035\233\273\351\364f\276\033\013a\276\373i.\276\330\037:\277\034\2455\275\010\347\210>\005\371\361\276\311\321\234\274\376\013\223\276\263\237\307\274\025\350,\277\255\214\014>\272\013\013\276\366\263\235\2748\t^\276\363E\242=!\'\331\276\334M\023>\333G\230\276\2641\023\276\237z\251\276\351r\271\276G\030 \276\271n\321=\222\302\231\276\354\321\201\276\320\260&\276[/I\276\2219\240\275:}\266;]\313\265=\315\303\235\276E\235u\276\336W~\275\344\024\237\276\322\250\344\276h\305\322\275\311k\225\273\300\232\022\277rH\206\276\273a\362\276}k\305\276\252#\026\277{\3271\276\214E|\276X6f\275\212\213I;\354i\246\276\376\024\346\276\006Xc\276\377O\270\276\tR.\276\204\212\270=\354=\016\276\302\265\271<\203\004h\276\2531\312\276P\3676\275\016\223\332\276Q\036J=\021\353\232\276\212x\030>2\2531\276c!\367\276\365\032 >\266\245\222\276\225!.>n\200L\277l\276w\276!\224\245>\257j\026\277\241\370\265\275q\351\330=\004\022\237\276z#6=Bbl\276U\"P\276\350\352\272\276\215\033\376\276\213\321\020\276f.6\277o2\240\2760\206^>\037\033\017\276\326\263-\276\017\341\263\276\'AX\276\266\022\222>]\356\220\276\200\"0\275\351\351\214\276\010{\215=\301\377i\276P\243\236\276\330R-\276$\336Y\276\257\346\212>\353u\231\275\233\034\325\276~\331:\277g \211\275\340\313\216>A\304\032=\330\375\317\276\007\027\034\276\266\243L\273w\366\003\277)\344\251=\333\251\205\276k\325\313<t\314\032\276\232L\346=\242\275)\276\371\023f\276}W\230\276\035\007\'\2774\316\037>\362\353\016\277\301C\322\274\273\376\002?\"\025<?\207\232\020\277\031;\367>\2703\351\276\357\203U>\251L>\277Uv\305=a(\273\276\372_\003?y\247J?\235\010\303\276v\352-\274w+\n\277G\275 ?\003:#?5\372\232>l\237\347>\321\301\320=J\205\254\276f\342Z\276%\273\332\275;}|\276(y\n\276\017\3019>p\226\200>\013\310A\277\370\201\205>O\271\225\276R4\317<\372\217D\276\307\310?\276\360\261\315\275\340\252\243\276<\2170\276 i\310\276\031\027n\276\213~r>\035Z\256\274\262x\016\276\365\346\303\276\340L\225>\034\257\306=\371\254O?\233\022Y\274\202K;\276\351 \300>-\\K\276\344\300g\276\271\006\260\276G\315p\277\304C;\277\276\364\360=JU>>\250M\266\276\363\357A\276\313@\033\277 \023\341\276\204\207;>\007?\202\276\207\252z\276x\276\356=p6\031\276\371n\260=\325\355/\275\276\034j=C\331x\275\247\235\211\276\340\212\363=Hq}\276\312O\336=V|\272\276\377\345\257\276\332.\310\276\024\351\276\276\205n\202\277\2502G\276V\257\374\275\262\340\354\275-1\206=M\223\235\274\362\251*\276\347\360\277\276\"\035&\2774\345\262\274\305\030[<_\"\336>\032v\026\276\003^n\276?fY\276g\t7>\321\\?\276$\033\201=\307^\337\275\256\277*\277\214\210\367>/|\013?; \035>\336\300?\276\252<\315>Q(<\276Z\317\266\276h\304\341>\267\363\327<\252;\362\276\251~\330>\304\377T?\000\350S\276\0264\034>SQ\013\2779\236C?<\234\020?F\314\003\277\002 O?\tN\225\274t\003Y\274I\306\326\276\300%\225>r\352T\277o \317\276ul\350=W\256\222>f\374\"\277\360K\014\276\017c\325\274\224i\251>\335\276R\276\206\352\232\27606\032\276\214%\021\276>N\302=\316\302\225:y\003\016\273\315\003H\274M\177\264;\304\235\202\276\360q6>\267\205\204\275\222\322\350=\334\0108\276b\312\303\276)\013\027\276nV\325>\237\343\263\276\257T\301\273\372\237\270\275\334\240\266=\016\2420\277D\025\365<\2332\005\275N\335I>\302\376\250>\226\277S>\024D\336\276\245r\377>\302B\032\277\210 <\275\022}\273>\257*\363\276>\264\231\275\0101\025>,\"A>=<-=\333s\206\276\217s\017\276\265k\340\2767\303\330\274%_*\276c\277.>n\231<\276\203\374\307\275o2\005\276\223\243^\276\332\033Z\276\203\271\244=\001&\254\276O6\272>\302jb>\221\005\300>-G|>X,\232>t\2473\2768\211E\277S\317\037>\006]\334\276aM\232\276\276i\233>+A\214\276\310\340\244>\0023\205\275=l\255\276\200\225\327\276\271we\276\213\374\'=\2708\201\275\210\037\222=\347C\316\276wD\276\276\232~\022\277\2014\326\276\000 \252\276\213\227\243=g\003\320>\251\226\n?\323\032\332\2762:\350\276\302\365\371>\261\367\352\2761\274y\276H\271\257\276\271q\206=f\010Z\276\275\232!=j\235\316>]\332\370>\275\334\016>\336\336Y>6VC\275\324`\226\275\374\354-\276\276\273\264\275B\341\205\274\333\206\316<\211g\035\277`\225\220\276\223\006M\276\216\352\222\275/\327?\2762w\363\276\260t\t>\305\\P\275\"\035*\276\"\325A\276\274\201\r\277\326\234\203\276\266\241\375=S\035\004\277&\020\214>\351\354\301\275\215f\014\277\2544i\273N\247\324\2753\203\204\273\346!\003?X?\220\276\273\240\000\276\231\021\207\276:V\206\275\226S\200\276\355\214\372\276\226\021\340\274\246\003\327\276\013\375\266=\'\"\213=\205\331\017\277\t\354\333\275b4\023=_\221\177\275/\017\003?\357\276%\277\372\200\231\274\252J \273C!e>%.\346\276\363\320\013>\356\\\202=\270\357\t\275\177\201;?\013\246\272\276Q-\007>]\243\247>5a\275\276Si\251=\332\270l\275\250\275\037\276\215J\025>E\363\232>\337F\252<\306\016\326=A\356\200\276\020\236\235<\306K\010\277sv!\274.f\223=8E\252\275\222`t\275\034\204\234\276\244\315\004\277\365\3054>a\342t>\205Xz\275-`\003\2767\364%\2775\335w=\300\030<\276\345\266\342=\263\000W\276\331*(\276\316\347\234\275\010Y\215\276r\'\313\275~\304\006\277l\306\325\274\\\266}\276gg\335>K\016\235\275\225\253i\276\021~\377\275CbG\276\235F\317\2760lL\277\306\342p\276\353\177\001\277\267\321\212\276\274K\353=\3272\242>#\317\333>\303\370\210\276\220\330:\276.Mo>\254~\206>\276 \211\276-\001c\2768\316\337\275\201\367%>\211\271\010\275\025PL?\257\373=\276\255\274V\276\24277\276h\362\035\276\24370\276\247\302\342\276\001\030\373=\365*h>\232\272&?\337\317$\277]j~\276k\246F>\346\320K\276y\354\035\276\210f\364=\312\341\266=\3034\006>\265\223%>\304\014\203\276tn\216>>\272\002\276\375V=\277\215&3>\203\0140\276\356A\366\2760\365R>\340\217\214<\331\346A\277\257\262\231>Xc\004>9\326\003>U7\223\274^\245s>\032l\302\276\335\027\t?\217\300@>\226\366\004\277\334\232\220=\334Y\276=QQ\256>\251i\026?P\3746>cZ\207>Z\323,\277Sy\306\276\350\222\002>\256\271n\276\321\246\237\271\207\231\035?I\035\'\277\224o!\277\020q\n>\316\225R\275L\374\213\276\272\"r\275N7\242\275!i\223=\000H\235\274\010\033\026=\332\321\037\277\372\271\225\275\270A3\277\030\257\265\276g\300\'\277\326\350D\276`>\220\276\034@\300\276\273\267>\2763\331\033\275r|6>\243V6>\2416\003\277\363\307\321\276\036\354\367\275U\333\016\276F&D\276\215}\251\276=\023\210\276^i\357\274\223,\014\277\363y\233=\264\220\312\273\3231\254\276L\250`\276\345bD\276\272\336j\275%\021V=\265\313\364\275Q\275V>\220\315x>\3647\207\276\247W\261\276\257m\227\276\310H\032\2763\306\366\273\270\322\366>%R[\276\226\326\223\2769Z\213\275d\264\001\276{\322\005\276\333\220\023>\026\323A\276/,\276>`K\370\275\014*s\276\200\361c\275H\302\252<|\034\234\276\332xz\276\347\363\255=\331\273\267\276\r\333\240\275\324\202\035>C\260&\277\316JM=\351\203\004>\235\267m\276mHE\276\260^\336\275\020n\226\276}\310\352>\010Sd=j\361$\276\250g8\276\344\373\026\276\270\016\332\275\340S3\277\372\362\302\276\3033`\275\301s|>\267\377\016\276\005\260\234\276\310\3723\277`\310\253=\017\261\230>S$*\274\203\300\224\276\224\250\020\274\347\033\251\275O;q\276\2379\"\276i\301\260\276x\276\022\276\275\263N\276d\236\324\274\215A\000\277\206\324M\274\306\215^\276v\275\033<\233\233\341>\261X\260\276P<\'\276\314S\267\276P\253\337\274\032\315\025\275*nb\276\372v\225=)\307\235\273\221\271\t>\315\222\272<\332q\215\275p\352\227\276`dQ\274.h>\277\233/\346\276\327\t5<\310\243\001=L\346\363\276\0106\340\274\371N\252\275\021td\275O\314.\277\035d\202\274\2444\270\275\360V|=\366\273\310\275\315&\245\276\035\207\323\275:*\014\276\201\252\215\276\213\352;\276\033V\377:\026 E\276\350\343\213\277\276\373\302\275wm<\275T\235k\276\207\035\234\276h\215\202\276[\010,\275\332\225\273\276.n\241\275\247jB\276\214\344\361==4\033>H:=\277:d.\277\010W\317\2759\364u=\\\020\275\276\027m\314\276i\023\273\276\322#\243\276\337\272\254\276t\267\247\274\201\316\"\276\336\255\233\275VE\350\275\376\226$\275..\201\276\210M\273>\361b\256\276;R\260\276\322\210\031=\231\375\305\2765G\341?\243.E\275\275\375\235=\363p;\276\212z\246\272\202_N\276\"L\367\276\024\2038>\003\333\354\275\300\360\022\276\t\336\026>\270\274(\275\1779\005\277D>F>I\216l>\263\204\376>\362\270\255\276\361\034\023\277\345\014\271\276\341\222\213>\241\313\322\275CGn;\334P\204=\355\273.\277\360\3477\277X\036\024>r\022\225\276\241\035K?\377\263\030\277\037\336\003\276\304a\376\276X\022\265\273\206\300\244\276\355\227\310=\244\001\331\275y\036\250\276\234Q\032\276\177\302\026\277\243\251i\276;\022\331\275d\377/\277\336p\227\276W]\326>\006\306\007\274\026\362\030?\224F\\?E\'\361\276\022\276P>(M\204\276 \"\353\276\037\022\253>X@\372\276\271\332S\276\370|\313\276\344\303\212\276\274Z`\277\206\377\311>\241\2603>\372T$\276\022B\363\276=4\241\276w\n5>Iq\025=M\304\300\276t\013\034\275\362\252\234>\204<&\276\302Zk=k\221\214>\320[\372\276\273\232\305<H$\\>\374e\321\2766\320n\275\305T\'?\361x\327>\206Y\270<\177\351!\272\267\254\014\277q7\027?,\337\033?\201\000\265\276\346\324Y>;4\331=\005\226E>\225`K\275^=D>\361\210\370\276%5\027>\013\336-\276&\226\026\276\251Y\254\276"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Reshape"
  input: "transformer/residual/residual2/conv1/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/residual/residual2/conv1/InstanceNorm/mul"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/residual/residual2/conv1/InstanceNorm/Sum"
  input: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims"
  input: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/residual/residual2/conv1/InstanceNorm/moments/normalize/mean"
  input: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/residual/residual2/conv1/InstanceNorm/ExpandDims_1"
  input: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/mul_1"
  input: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/Relu_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/Relu_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/Relu_eightbit_reshape_transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1"
  op: "Reshape"
  input: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/Relu_eightbit_min_transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1"
  op: "Min"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_reshape_transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/Relu_eightbit_max_transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1"
  op: "Max"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_reshape_transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/Relu_eightbit_quantize_transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1"
  op: "QuantizeV2"
  input: "transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_min_transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_max_transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/Relu_eightbit_quantized"
  op: "QuantizedRelu"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_quantize_transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_quantize_transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1:1"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_quantize_transformer/residual/residual2/conv1/InstanceNorm/batchnorm/add_1:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual2/conv1/Relu"
  op: "Dequantize"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_quantized"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_quantized:1"
  input: "transformer/residual/residual2/conv1/Relu_eightbit_quantized:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/MirrorPad_1/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/MirrorPad_1"
  op: "MirrorPad"
  input: "transformer/residual/residual2/conv1/Relu"
  input: "transformer/residual/residual2/MirrorPad_1/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "Q\202\240\233\201}\206\243V\261d\234\242\232\226~\246pxn\215\177l]dk\214\232\215n\203\230\210Vz\252\237h\222r\210\205[\211d\242\\r\223\201\243\227\227\242\223\212\236l\303\255\226m\204\245cg\211k\240\223\221z\317\243\201\225\316u\225\225r\276\240\274\202\265i\214\210\206\243|\250~\274q\332\224\\\215\177\216\242\201\224\210\232\203\213n\213\213U\214\212\205dU\200{|\230\214\257q\210\222\221\224\263\276bP\272z}\244{\215p\357y\201fst\232\217k\330\264\256\205\247\213\221z\214\207:\246\202\207vy\274\227\262xx\255\226\210\207n\264\233\234\263\272\311\230gi\276\312_wI\222\205\202\300W\227j\227Y\215\210\234\242\235\303\241\220\227\214\221\263\236\255\207\270\201w\233\231u\206\215T\223Z\242h\202\211|\256\241\213\255|x\220\222\256\210\224m\260\207\251p\236l\210jc\264z\202\220\234|\177w\204\204\254\273Wy\235\205\253\202\242]\311\212{\216m\226\241\210\260ZU\224_\236\267\300\255\203l?y\204\237n|e\251\227\206\261l\203\211m\274o\260\236\230\230\246\201\215\202\266\206\237u\212\260\236\274\230}\237\236N\214\230\211\215s\227\230\242sjyd\203u\215\272\246\200\236\201\230\254\203\221?vg\222\240p\"R\205\252\233V\240s\225ll\336^\241|\232\225\223{\242p\312\226ndo\300nw\202tw\232\252\242\224\221\222\247\205\241|\226r\260\232\251\254\263{\225\247\251\220ut\246\211\214\241\227Vp\240\252uT\265\201\200\211\204h\202\253{\272~\201ui\217\215o\216x\271\253\236\230\246\221\224\312\223pliU\222\200w\222\\\260\206\316\245ohill\311\223PWwx\202\241^\227\277qa\177\257\253\260\220\253\256\223w\236\240\371vr\241*\331\205\206\225\205\213\303R\215\226\241\301U\251\201\207\230Y\275\317A\217r\377|\243\263\223\250.\324\272\177\212\206d\205z\207\225\260\241\266\207\217\250\226\224\200\222f\210\217\221\227\223\205\223}\210mz\200\214\222o\205\251\221\201\220y\237\233w\225m\206\177\227\231~]\203\177\201v\212\216h\231_\206\261T\261xs\206\222\210\253\177\233\224Wre\207\253~\237\201\254\265\217\206\240~\203\206\226Y\211\226\200\264\216\270\262\255Qc\271\321wno\201\224\177\225t\277\303[\210\206Hv\202j\257|\255\215\316\203Z\245b\234\242\264\216TM|\241\200Pp\260h]\226\206}jG\177\252\214m\266|\240\204\245\315T\255{q\227\204swq\255\227_[\177\207\307\235l\222\204\220wa\210{\300~\223\221y_\211\205\237\205\206\205\252\216m\216\206\332\221\204\231oh\246\255\265\212\211x\207\250\222\214\202\216\200\256\212\225\200i\205\234\202\241P\177\225~\260\226\246\216\225\256\246\226\244r\235\211B\251\216\276\211\261\235v\214i\243\240v\212oy\210a\200p\252\225u\220~\265|n}\226\205\213vQ\224y\230\235w\237py\274{\250\216\214\233\215\206\214\222\177\233\222\222|t\215z\244\207\217\247\243\245wv\233\235z\212x\235\242|\223\202\227w\200\224\200\252y\224t\214\206{\202\221\207\201\225\232\277\236\206\244\222\177\205\207\227\233\233\232\214~\227\207\200\261\231y\214\177\233\214{W\216\211\236\236~\201\246|\252\233N\227^\241}~l\203g\241z\203\205\204\264\221\214\220\201\227\240\252\226y\201^\203\224e\216c\242\236\254\224\\\210\242\234\253\251\256{\216S\272\230\247zQ\200F\211\242\211\241\271\205\314\264\261\250\214R\250\213\201\206Z~\232\220\206\232\262\222\233\213l\225\235\231{l\201\214\202z{\272\224f\211\221\177\226\211\230\202\307\200\224vI\233\232\210\216r\235\304u\237\235\277\252xl\200\204\226\261\203\240\236X\246t\214\226\220\250\205\226l{\204\241\202`\200\177\200\226\210\211~\226\200qh\212\217\206\225\203\221\215\203u\203z\220{\224\245\232\230\223\212\253\232}\227n\260\211\233_\205\211}\226}zy\251\225\216\215\237x\223\275me\224\206\237\240\257b\234h\264\216\212\177d\200\214\226\200\276\247b{\207\257\236\213\203o\177\205\204\212\201\224l]\231xr\\o\201\233\245q\274t\216\204\235\214\305\255q\202\264\235x\272\177\203g\327~\213c\207}}\225\212\325\255\214\203\237\247\202\225\223\221J\216\206\213r\222\267\236\220\242~\241\245\242\233\204\256\204\211\230\260\256\235m\212\252\253\232\213\232\206\250g\253o\231z\207z\217o\224\214\240\253\260\243\202\207\205\236{\251\200\307\236{\241\263x\237\215Wn|\212ry\207\207\316\215\223\241\215h\232\226\226\216\215\203\254x\251~\255t\222vj\220o\215\221\251v\203iu\203\246wtm\202\212\200m\211W\211\222\215\221\263\210\204w\306WY\214m\256\215\251e\260qg\210\224m\203\226w\243}\211\222v\240t\211\224\212\247\202\210\225\226\241\233\234\237\215\226{f\222\217\240\244\230\203\216@\233\222}\210{\213\225\207w\204q\202y\213\217\240\240\207\217\203\207\210\205\201X\231w\232\232gKd\206\254\206`\212\202\215im\246\206\222\204}\234\213\227\230\205\301\200x|u\222\205\215\213\200s\234\215\214\301\231\230\246\215\233\230\240z\221\213\271\217\260\211\230\227\234\243|\211\244\244p\234\202wo\234\201\204k\235\225\203\224\217\177|\230y\266\257y\217h\212\233\177\227j\272\216\200\224\236\201\204\300\206myT~\210qz\200f\241\202\264\212o\206k\240|\222\202hm\224y]\246h\224\2567gH\335\240\301\232x\270\245u\230\223\270|\203\232~\261k\215\265x\205\2563\204\250x\254\207\242\221|\215g\253\300d\220e\336\200\240\225\213\257d\275\222v\205\220\236\215\202\207\224\225\273\235~\245\267\243\235\204pp\220\226\213k\236\203\215\202p\210\237}\232~y\217\216\227\240\213y\252\201y|t\217|\212z~\205\222\210\222x\215\201\200\217t\231\206\203\234\214\206\210\203\231\253\222\250quu\202s\211\201\204}\233\235\214s\255\223\213\235\237\\\227\240p\232\201\256\203\255\\\177\245\260\226\225\244w\264\214\254n\233\326t~lYu}i\214~\207z\324\200\177\235w\266\216\245vVVv\243\206gt\233\211}\243\215m\177u\177\250\204i\237~\244p\202\251d\244r\217\222]\235\221\215\253\216{lw~\300\235gq\237\211~i\237\206\274\201\224\221\232c\222xw\203\227\221\277\231r\216\223\316\261\213\250u`\213\211\235\231\237i\223\202\215\200d\210j\232\177}w\242c\211{\225Zy\254`\274\237\232\205\254\255\234s\221\213\203\230U\261\224\262r\250\220\230\215c\236|v\233w\207\240n\203|\227\266}\227\222\227\212\202\222Yo}\207YU\\\214\200\214Y\236\230n\245hi\203~{|jzsi\223>\231q\216w\223\222\244\206\244\243\206r\227\224\202\245\220\224\246g\215\207\205rm\222w\225u\201\207\216\177\201\213\210\217\203\224\204\264\253\202\263\226|\215}\177\226\223\224\216Z\230r\210\264\253k\207\224\227\177ib\211\200\205\217\227\222\233\227\210\236]\217u\206\207wz\216vyr\222p\200\217\224t\201\227\204\231\225l\220`\243\244\236o\222\325\233i\276T\267\213T\255t\177\235\224s\230\230\241\212z\257l\257q\273\200x\337\230\301\210\224\203\206Fl\220~\252_c\241\214\206\222\243\272\177\202\204`\237\255{}w|\204r~\250i\215xn\217zhzy\241wzY\244\205\227st\216\233\270{\246w\256\212\213\202^{w\300\210\240\252p\237V\216\241\243\255x\245\215u\235\267\216_\217\203~}muc\223\211\204r\210b\202\177{\247\230\216q\215\223\215\230\220\276\264|\241\236\232\210{\223m\256\215\233a\243\222\234\257\217\235V\234v\231u\213p\251\232Yli\221\230\240\230Wt\202\235\260\265xky\207f~\226\243du\213\276\250\201\177fz\227\204\225\204\222me\217\202zt\215\222\236\273h\243r\225\211\242\203\354\241q{\306ey\254\216wk\365\210\237S\200\200j\211{\331\233\247s\227\200\204\222\231\2147\246\220|s\252\311\234\212\246\206\233\311\301f\257\224\221xe\313\263\270{\261\312\275o\270\234\177\256B\242X\255\256n\277{\236~u\261\307\225\224cy\211\225\213\250Z\273\300\211\220\307l\243hMbl\225yvy\227\205\222\213\230\270`\207\212\220\274\217\224\241e\245\241\216\225\222n\177\213{\200\241\256\215\225b\206\206n\223\266\223\240\246s}\223\220D\235\206\302\306\260\243z\235\202\207\210u\241\232\257f\231\210\223\225\224m\214\222\213\253q\224\242\234\244p\235}\255\225\250i\260\223\216\261\253\244j\231gZk\202\255\252\252jr\016\227\206~\226h\202\213tz~{\231h\220\216\231\235\200\177y\232u\206|c\214\213\242\217\2164I}\241sa\234\224\213{o\246\205z\237e\232\213\202\213\204\337bzt\200\224\217\200\202\211\226\230\230\212\264\240\230\276\216z\271\236\216uT\302\210\257\244\227\206\216\240\236\214\301\265i\231\206\177\215\235\207\270T\230\240\242\242\237\245\214\306\202\316\260\233vn\261\203\210\245\202\241\272\212\252\221\221\203\267|\212\205D^\217\211\177b\201\275\212\326m\230\226\204\234\215\210oSL\224ut\234\200\211\222=\207et\305\277\222\207\225n\230\222\255Yo\207\270\274\250\201\227\260\205\201\2045k\241yV\232\264\226Q\203\\\300\335|\264_\347t\266\201\206\277v\330Yt{|\263\204\213\211\232\250\361\301\177\247\257\252\226\201wyz\203\234S\253\217\227t\201u\242\211\225\203{\247\227\231\245\216z\256|tr\201\235\212\221`\227\220tl\277\177x\213\247\233\201\261s\240|\247\177\221p\224\231}\251Z\224Z\235c\247\231\203\207\222\340\216\206\233\230\223\315\237>\305\246\211xv\300p\273\204\262\321\323v\310\203n\240\216\274w\233\222\254uE?\230\214Za\225\256\212\337r\233}x\266s\226RJ>W\311\255/\213\213\216\234\276\243\223\215_n\232\206P\244\220\247~\213\254\201|y|\206~\236\214\223\245{\210e|o\303\254sl\215\230sk\247k\305|\221\245\206g\250oyc\213\214\256\230v\207\223\335\274\231\231ru\230{\221\203\261\233\214\223\234[s\232xl\202\207\227\275y\253ygk\204\251T\227\177\217s\233\262\240Sw\202u\272Z\302w\277c\261\223\232\226n\253oh\213m\221\254vy\204\241\324\224\224\232\237\224\217\252lrr\220c\\r\202\235Uh\250\223c\252mtx\225m\233\205|\202U\205O\252h{t\177\260\255V}\261\203\232\225\232b\257\211\237\224a\214\233\202\202Usv\250\202|u\264\220\213\241\211\242\206\213\217\236\321\223\261\242\226y\212\224\213\244\212\271p\273\214\205\237\251\217\204\235\215\212^|\226{wa\256\211\222\257\224\246^\247li\217n\240\241\177q\217\202~\234\217\223ar\233um\205\206\262[\240\304\242\216\216\204\221\236\345u\231\213l\261g\235\215\303\244\302\234\335sJ\304C\273\215\306\216\203\263o\262v\200\227\245\213L\207r\277n2\222\230{\262\225\231\326e\221H\245\257[\311J\210\211v~{\224\246\214\212\247hm\237\204n\222g\227\264\254\251\215w\237\260\234s\211\212\226\216~_\233\222\245p\177\233\225c\252u\233\242\231\227j\233\216\203u|k\204uk\200\207\231\224\213\207\227l{\212\226\223\215\233\212p\210x\225q\266l|~\225\243\220\247\223\227w\205\205\256\241\214\202\211\243\202y\210o\251\225\220\231\236\216\212\220\250a\236\212a\214\237\207\214\231^\262\215\212\222\211\201\215\227|\327\213Z\221\214\237\216\232u\242\247\200\222s\237\203h\205\200\216\205{\200\212\215\242\207\271by\207\232\211\210\221\211_\234\177\210\237\202\230x\275vu\177\203v\235\215\204\246\222\234\217\241\223\233p\236zi\244\210\210t}\217\240\241sw\250\217m\201s\254\253\220\243\251\206s\202\202\223\224p\231M\236s\224\257_\273o\235\250\210}w\251u\300\255\202\224\217\243\225\240\233\231zLhryc\206\207k\211\210\244\206\206\202z\242\240\226{\205v\230\210\261\216\211\203\262\223\217\202\214`\230WY\232x\226\235\217\224\213\204\210\225j\263y~\265z\242\243\237\210\206\235\223\230\206\255\211\217\217~s\200\204\203\206\233\235}e]}v\252\216jx\236\241\177\225\214\204\240\177\215p\212\222\230\216ww\211\217\251\245\226v\243\231\271\254\206|\243\212]\232\217\226\240{\224\203\244wu\213r\231\205\213\252\220\207\240\202\200\234\215\235Dhy\205\177|vv\210\237\226`\232\210\222|\202\257\201\221\202\257\241\207\202\232\220\244\213\212\212x\253Z|r\207f\202\235\220^\202\221\205\201\221~\230{\225\224~\232\220~u\213\215x\222w\244l\223\262\263O\245\201\247zW\273[o\213\220\215\210\254\227\237w{q\201\223[kut\241\213\233\203\250\273\237\247\237\205\201mP\244\253z\215\221\221\230\244\224\274_\206y\256\241\203yq`\205\256\231\276z\225_smm\234\252\244\214\244\234\225\237\253\232\210x\212\202\325a\231\215\234\201\223qu\201g\233[\226v\235\224j\242\236_w\216\345\205\234\263\221\212O\304\252\214\225vB\203t\203\235\241U\254x\210\257\220\200\210\216uy\233\211\242\243}\202\210\225upx\204\220t\203\244\206\230\233~\261\210z~{v\201\200x\207\207\217\202\207\223\223~\201\202\207o\246s\213\207w\212\224\211\250\245\223\240\210\211\206~\255h\244R\242\262\252\242\264hh\251y\235y\300\224\212\240\321\244\213<\277\321\254hmjz\230\217\245\210\247\346W\214ag\214\233a\203\245\231\236\233\201\224\215\214\214\246\232\213\243\232g\257\227@\217\201u\201\206\210p\242Qx\226\222\177\217\200{\232\250\243g}rg\213w\177\213\210\231\253\211\201\233\202\304\225p\217\223v\\z\233\210\305l\211v\202p\205\215\236\234}\215\230\202y\214\214\300~\213\220r\205\234\215\247Vz\221u\220\216r\226\200\262\230\234\256\203t\225u\210\237\212sZ\220\220{\215\210\234\244\247\210\221\207\232u`\247\224\262\200\252\223\202\207k\233\235\203\242um\225h\201\201\236vs\214\177\230\212x\237\236\230\243\207kq\237\201\240m\233x{\244q\257\237\210~t\225\251\206\216\254\220\221sf\217\211\204~\204\220\221}\217z\224\233r\207n\227\250\202\204\230\253u\214\221\231\244\205rz\214\200\177z\212\222\220\214\226\300\226\211\245\215\201\214\226\217\230}\204\203\205\216\210w\234\224d\227\256\241\254\200\203\200\212\201\242m\262\250\322\237\235z\231l\257\233\203\216{\214\246\230~\244\235\253\247\206\213}\235\204|`\242Vw\220\254X\234\244y\271\223uj\204\204t\235\340}\222`\271\226\200\213\232\200[\204\210\246i~\327t\250\242\223\234^r\215\215\220\211i\200\212\224\227\230\260\236~\215z\212\225\236\201o\213\211\213\221\202\205\230nr\242\177\227\235\251\237\227\251\234\214q\260\206\256\212\211\231\245\247\220\235\204\246v\202\215y\220\204\220\234\230r\211\213\211\216\227{\211\242\227\224\204\207iq\215\203\215\216\223\213\231w\204^\201\210\220}\257\223\230\204\224\232\211\212\233\210\235\220\236\223\233\230\230\210\202t\213\245\205\214}\225\207\250\245\215\223\222\211\233\233\232\213\200\203\255q\200xu\224\214}\262\215w\243\252\241l{\213\251\205\220\301\231i\234n\304\237\213eww~x~s\224\211d\236p\237pq\204\235\216q\275Uyg\234\210~\214\216\220\230\243\214\272\224\205\203\243\205\215\200\214\202\223\236\244\252|\223\212\231\270}\177\221\251p\244\250\204\203\215\207\210\202\200\220\231\202\205\201\216\225\212\205\207\245\233z\200\230\224\200\225\254v\225\212~\256\211|}\263\236\236~\217\232\204\237\257\231\231\214\240\231o\252\253\206p\210\203\224_\233\232x\216\202\230\203\230\213{\271|\240\214\217k\237\224\230\205\231\241\253\212\231g\225u\227qe~]\224\222\222\202\215\211s\232\224\217\220\216\263w~{\214\177\225\225\231\215\210\215w\227\314\224\200\210\216\242x\246\205\213qw\211\200\215\225\234\223\212\214\200\177\214\232\231\214n\177\207\203\234\213|\227\223\241\205\243\226\211\207\205\260\237\217\226\210\203M\236\224\206\235\212\217\220\213\177\215\207\210\230\211\230\232\217\215\215\214x\213\215\223Y\222\203\215\207u\222\177\215\237\217n\207\227\217\211}u\224\212\226\225\236x\226\205\251\216\204\206\234~\204j\236\211\227]\245\211m~~\226m\204l\202\244|z\225\214ozpd\204\207\215\231\210\225f\210\257\203Q\247Z}dj\202V\177\207\204|x\237\242\235\237e\204\200\230V\201\204_\266\\\227V\250\226\227\220\207\213{Fw\220\205|\177\207\200\214\260\221\251\207\202h\220\235w\222ws\202\230\241\177|\253Rvn\237\225\260\236w\222\223\242\230\236\227\215\225\246\204\257\201\246\217\241\220\205ht\210a\226y\221\205\226\224|\225\206\211v\207\310\216\233\216\215\227\206\244\213\210\223\210\202\204\200\202\233\210\202\203|\235\310\233\224\245\\\204\217\207\202w\251\202w\203v\220\223\177\231\206\225\205\214r\243\205\202\273j\201W\177u\203hp\210\210\245\216\216|\230\205yy\206|n\201\225\220\207\177\214\221\235\254\227\202\205\221\210z\236\233\244z\211\251\214\226\217vg\256\200\232\207\233\225\212\217\247\271\223}\257\276\222||xw\227{\244\177\225\222\214\260[\206\241\201a\201\236y\203\227p\230\221\226s\217`\215\273\217`\245\215@\222\204\226\207\224\210\207\250{\220\237~w\217y\214\215\214\200z\212\205\256\216h\243\246\244\237\240\215\201\224\200\300\237qy\251p]\200\254\227\276\207\206\203\243t\201z\200\244}\223\241\225\204\216\234\270\220\202\251yz\214z\241\216\260{\247\200\225q\201|\222\250\217\215\214se\212\232\222\204te\203\254t\215\241\214\242\232q\200\254\203\203x\251\232\254{\234\206\236\202f\233\201\210\252\177\206\235r\207\206\203\227r\222\215\211\233\230\236u\201\233\222rXqp\205\245i\210\256\204\214Z\202hyy\243\226\201\225z\232[\242q\201\201\215\177\231}\221\202\250\205\207\232\201\223\217\205\256w\212\243\232w|\214\220\232\216y\215\223~~~|\222\210\214\211\260\232\220\245|\177\207\214u\225}\207|s\206wt\233\241W\222\241\226\221p\204\200\217o\235s\261\244\321\231\217\207\237\211\246\222s\223w\217\241\223\177\212\212\213\226{\232\221\253\211\230L\247^\275q\264cn\255r\236\260\202\255\241\216\213\224\236\227\222\207\275\234\227\225s\211u~\237\260n\205\217\210\314p\222\234\225hn\224\220\221fx\226\216\226t\300}\233\201\207~\220\225e\261`t\220\217\222\214|~p\200\177yy\201\226\202\225\221b\232\177\206\213\215\240\212\231\255\240c\232\203{\221k~f\253\236\220\217\204\212\200w\237\235\215z\241\262\212\230\211r\203\206|\217\207j\177\205}\216\177\205\210~u\236\202\247\252\217\222\215\227\221\226\235\247\245\200\245\206\221\215]y\231\255\233\235x\235s\230\277\217\244\200\227q\204\234\212\202\214\224k\227\213\210\241\207\234\326\207\211\217\242\257\177z\250\237~\213\236\215c\217f\262\245wdzv\212\205\177t\217\210\206\224j\253q\220\205\235\247l\245c\211~\232\210\257\213\225\210\302d\177\303\240\202\215\277\223\251{\177\205q\237\226\276r\233}\204\237\203\235\223\264L\317\277\211\234\261\244\211\201\217\235\215\251\261\201\275\241\245\214Y\312\341\235\206\230\212oy\273\206\216\244V\245s\202\271\217\237\231\226\222}\244\235\226\254\200\241\240\247z\254\245\211\214\214Ryh\237\240\177le\233\201\205\220\205}t\206\225\262l\214\210\220\270\250\256\247\177\227q\214\236}mw\215c\211\220\215\210\223l\210q\205\226\261\257\250\215ir\236\214d\216x\277\237\235\207\211\260\223\205\224x\235\237\266h\210\207\213\223\220v\237\254\240\212r\205\226\240\256s\250t\250\225\250\220\230zu\234\243\211x\242\204Wu\242\255\241\241nr \207\225v\243\206\203\201p\204\227\201\230\206\214\246\223\234\224\205\205\212w\211\205K\217\215\244\217\215u^|\232~k\221\244\231\215x\206\210\206\252{\231\220b{\245\261v\210\207w\206\202\217\207\227\204\237\210p\211\241\240v\224n\246\254\214|i\236\213twt\201\203\226\261\224\247\234\210\250ia\221ws{qz\227\246\253\206\201\207\236\214\302\252\224r|\221`\240\260v\234\201\223\242\223\214\232\216[|\204(k\204||c\201\177\177\325e\232\265v)\206\204\232\255\213l\204\201\244S~\212r\240\262\216\253\232\223\237\200b\223\232\245\201\205\214\220\206\240z\234\256\207\203\221g\210\237\201]~\243zj\225t\251\244\241\225\203\324\206\262v|\247\231\316U\206\213u\242v\205\216\235\231\272\234\203\227\326\216\204\235c\221|n\215e\250\223\206i\203t\232\237\224\200\250\234\217m\246}~\260|ue\206\210\231\215z\220\236\201\212\245{\211\212\223\203\203\215R\226\230\241l\206z\223\245\250\217w\217l\216s\337\322\260\263\233\253\207\222\222\202y\311\225\243\277\247\266\306j\317\374\256\272\217\217kg\221\225x\237]\253x\212@\261\271ve\311\224]b\253g\234\255>\212\177w~\214y\256\316\213Z\277\217+\246{\223\217\234}\263\232|\177\235\206e\202\223\261\214\213}\232\207\223\260\206\207\254\247\244\227\216\247s\232\203\302\253~\213\221\214cv\265|\304\210\205\230\231p\222d\177\226y\205\226\207\213\213\233\323\217\210\242ok\210}\201\231\324\211\225\220\224Qe\243\215\204}\225\237\226j\246\234s\212ztk\225\177\177\247\204\251\226`z\234v\233|\260\201\271p\250\210\243\210x\247z}\230u\226\224u\203\217\213\252\200\222\220\241\236\213\177\206j\235\220tjqU\204\\p\207\237\206\252d\251it\225\257\225v\253\214\226K\235ho\203\231\241\240[c\211\220\227\211\231f\241\211\223\211u\213\225\212\204Sw\204\267\213\217z\247\220\203\233\210\251u\205\216y\272\206\242\203\227w\204\235\235\215\236\256\212\245\227i\205\222\216\212\251y\204p\232\212\211l}\220\244\240\311\221\236\230\254l\212\223q\240\223\232\236\265z\241\230\215\216\177\235\226\236r\263r\251\242\212v\213\200\224w\203\264\251\240\220{k\217\202\262\247\304\236\213\215\237\221o\230V\241\212\267l\242I\212\242\207|\267\227\236e\231\231\257md\202\201\217\235\254\210\320}\177p\236\212R\265Rn\205\205x\250\240\207\224\201\242ky\243\203\214\224}\232\230\232\240\251\226\231\232\236\214\206\202\221\226\210rl|\251\201k\241\210\225\311\213\241\231\211\313B\225\237\\\217ut\211\220\201\244\235\216\242\203\266\241ut\220\221\211v\300\204~x\212\227v\223g\215\210\210\230}\200\223\217~\215\231\273\240z\202\204\243\225\210\222\262Lv\251\223uFo\254v\213o\276\234M\256d\177mrq\256\205\226\233\225\213{\253\321vJ\245\231\271\237\246_\232\312\204\222\200\231r\202\243\201\233{\206\222\213p\220\231\264H\220w~\211\244\212\214Q\210ww\244\217\220l\366uf\201s\203\235\177p\265\215\302\212\244d\231o\241w]\220\245\232mj\210\235\217\217a~\274[\233x\257\230t\241\222X\221\303\206>S\205\202V\220m\241\253g\260\217\213\227ys\202\266K\243\217\225\227\225\200\224\226vr\231y\206O^Q\205\216Y\241\217\243\241\207\235~\216\242\204vUm\213p\225}j\242\202\226k\214}\210\224\206\216\260m\202\221w\301\255iM\225\206\233\201\231\267\335\245\270\254\211\330n{\262H\317\201qt\207r\200j\224\205\250\277\203ol\204^\224\231\215\221\241\275}\217\221\205\235\230\205ns\225\225\226\215\230\237\217\225\242\220u\253\211\300\257\201\223\203~P\213\220\220\257m\216h\236}u\213~\234\226\204\225\201\232\252{\211\220\217\210HQ\241\222{r\213\205\205\242{o\241\204\211\200\236\270n\203|\232\255\224r\237\230\247o\244\222q\250b\237\210zi\235\264\242}c_|\223\271m\256y\210\241|b\205\226\211{zt{\233\243^\243\243\226V\220\177\217\265m\273st\220\271\237\201\236\250\257a\223\246\212\214f\236\236v\212\247\236\224\237\343\204\224\250~\221\224\230\357\253\205u\206T\207\215T\222\222\275\322\317l\270\256\243\202|\215\214\273Z\257iIi\200\260\223\316W\341\237\237\211w\267U\221\241y\264Cy\240\253o~PrJ\177\215f\251H\214\236`\240\234i\203\243\350\206\277\263\221\240e\352\242\245\216V\000\201}}\252\305 \305{e\242\207~\241\214vo\252\204\242\257\200y\201\223p}}~\220n\210\244\233\232\246{\270s\211\204iqq\211p\206\207\240\207\263\245\241\214\225\212\217|\230\227n\246\205\235\204\220\231\247\237\237\225~\246k\224\215\267gdf\210\217|lK\325b\317o\257\207|\236\201\017\206\245\260M$_\216\203h|\256\274z\226\253]\237p\231\312\254\224m\257p\233\220O\250\177\334\235\275`\301\344\315R\237\212.\252Olk\226\222{\227fw\227\330{~\226\204\256\226\241\201i\235\233\234}\247\264\262\262\234\245\207\251s\277\236x\225\217\223]\200\247\204\277r\230y\203n\226k\243\220\220\221t\211\256\217\205\336{\231x~\202\240u\214o]\244\206\177\237\212\225\202\301\263\232\242\235}\221\204|\220yzc\225\210\232\232\242\241\242\253u\215\231\221\177g\247\204\300}\267\230\177\213\205\260\244\224\233o\\\220{\204\224\253`\221\201y\220Nx\200\253\214\272\213\211\240\232\212\207\201\215\206]\250u\267q\236dwp\220\217\222\211\212\264^f\224\220za\220\223\206\217f\233\235\214\214p\211\270}\221~\225\255ws\225\216\267{~cw\216v{\215\220\210\210\223\270\216y\240\233~\205u\231\254Z\212\177\201\204\220i\223\240R\252\233\230\235\204\245~b\210\212i\204\235\273y\245\242\204b\206\233\224\215\225\213\200\231q\211zy\241\231S\202\205\211_\"\235Ax\275\274gZ\313_\370q\241\232\207\205\236\230|r\310\314\272[!\234\204TT\252\234\2413\220\231\241\336n~\215\177vk\271\244\214Q\206\222\204\276_\316\220}\234\211K\200\273@}S\226{z\200j\224X\210\251\274\257\214\247\253\252\254\177\231K\276\206\242\205\225\231\233\256\250\226e\303}\222wo\225j|\252\207\237\\\223\223\177\214dz\233\236\203\207\203p\210\214\227\246\245\204r\232\215\204lz\220\210st\254\216\206y\232\211\223\225}\236\213\227\233\232u\221v\200~\236\273\177y\205\213\223\235m\220\237\200m\242\216m\203o\202\215\200\200\225\221r\263\224\241\214t\217\255\254\222u\270\201\203\251\307\215g\235x\252\272\225n}\234\217\214\236v\204\234\267\221|\220\211|\212\212\220\177\263M\201v\215\216\225\200\232x\206\214\202\307\251\200\205\321\215{\214{\222\233\231\202\256f\260\206\215\213\212\202\202\221o\236\241\217\200js~\212\212q}\215w\204\215\264\203v\230\230m\230\276vXk\217\232e\241p\246\254p\243\223\236\233\222\207\234\237]\205\226\261\214\246\235\236\202\223t\225d\211^tg\231\265p\254\231\226\206\241\232\213\207\211\206\215kd\216\205\247\202}\276\220\240~\177\233\222\220\233\237\251Sz}v\256\266\201A\237\236\225\311\300\332\226\213\226\215\224\240\204\223\215I\247q\204\257\255\242\217n\260{\271\266y~\210~\211}\227\271\233\204y\177\202|\232\207\241x|\205\213\225\202\221\215\212\230|\212\222\231x\202\270\254\215\241\202zIz\223{\260\206\225p\206\213\202\210\210\230\216\221\215\206\226\217\206\210\202\206\177[y\234\226|t\242\210\210\225vx\214\226\217\221\223\201|\221\224\226\240\201\206\214\263\221q\231\237o\215c\235\235o|\257\230\214~\201bs\242\224\205\260y\220\232\227w\222\214\205\227\223\203\177\255\205u\225\221\200f\210a\307\213\202\254c~\204\257\211\204\250\270\226nu\212\225\206_\237\245k\206\224\251o\234\302\224\211\240\232\240\210\232\322\215\212b\212K\223\220d\203\203\235\310\317\235\266\253\211\212\202\256\233\265y\323mQ\300\235\231\213\256m\224\237\277}~\241h\257\246`\257\242\225\246\232\217\201P\211Y\202\200w\241N\223\240\201\222\207\224\206\242\333\216\271\216\222\245\212\315\204\253xiQ}\214\207\255\255T\234\206l\303\214\207\237Th\207\211{\221\261\207~wx\202\230\233\221\205\232\213\211\237\256\240\200\304|\177stl\206\207\215{\201\247\217\227r\254\224~\227\211\211l\202\223\230\224\200\206\206\212\224\236\221\231\217\205v\244\244\312\252cte\237\206zX\241s\264\204\234\217\221\231~5\215\255{X?s\223y\177c\233\246u\223v\201\246\227\210\324\222\237s\241\205}\231K\210\210\276\224\245u\267\252\214|\237wX\230y\207\204\215\245\212\216\224\212\262\221|\205\202\231\207\213\220\207\214\253\270\223\200\246\254\250\276\217\237\213\204\200\302\234\206\214\233\216jw\241\217\263\216\212\205\234p\212S\223\250\250\213{\233\274\230\215\332~\206\200\217v\202l\236\267\226\177\267\201\232\216\203v\227\265\222\206\233Nvrz\225\201\204t\212\231\210\227\302\207\241\227k\202\271\207\205~\237\216\275\203\252\207\235\204\200\251\224\236\237zr\212\202\220\227\234v\206\206\177\221p\211m\222U\230\231\222\235\215|\204\222\224x\207\231s\206X\232\201\206r\211\202\250\211\215\271\201q\217\212\225_\225wyn|\251\210\200\200\200\232\251\177\225z\230\236\205s\213\204\260\211\210gu\212~s\177\205\177\217\200\252\211\202\233y\202y{\202\247o\212\214vt\210p\207\253P\217\200\222~v\247opv\220`\225\236\250\177\206\237\222c\212~x\217\205\222\224\237kx\177u\214\223|\217\247\204\213b\251\232KxvQPu\212\265\231\231\232\230\265\256\257T\205\253\264UU2\262\215T\207g\255\267g\233a}\314o\213\257\271q}\221\254jiw\201\225\250r\316[\262\224\203e\202o\'\2618~\261\201\236n\201\177{\224a\215nm\260h\260\213jzko\200\255\256\235p\274\243b\214|z\226u\207m\212\205\227u\222J\212w\217\215Kr\217\273\234\215zx\236\204\217\236\251_\202\220k\223\210\177\244y\206n\216\232\246\221\220\207\235\216\215\232\224\232\236\246e\225\205P~\266\311\220\215r\206yr\177\267\205\252\210ks\247\217u\201\201\231\245\257\210y\252\305\250\240\227\224\204\245\327Z\267x\206{\247\223t\217w\234\235~{\220\253\226\221}~\202\250\251\227\205q\206~\225\206\260u\262b\205\201y\227\242v\265\204\266co\317\315}\236\371\231\241\207n\241{\245\230\312Z\306{hy\214\236u\255D\306\210\235\262{eju\213\226q\222\227\227\236\303\232\213\203\277\221\235\244b)K\177\241w\233\213\235\243Hw\255\215\211\207~\223\245a{\235\310\214\273\222\273c\230\237\221r\2208F}\223\233\212\221\200\207\210\224\213\223\\hm\235\204h\203p\246\270\217\305\207\230\225}\250\277{\206\235\302Ru~p\255\240\206jvg\222\326\306\267Gv~\221\224\021\202y\271\217\232Q{\266\237\227\226e\225\240\323_m\214\206\201\217v\225\266\243~vw\212\223\274i\270\202\245\240\243\257\217vw\220\241\221p\260\217Uy\261\273\221\265p\205 `\232o\265\220\223fq\225\226}\224\220\236\251\224\234\230{\207\216m\203{D{\237\263}\217~aq\213uk\212\240\244\234\210\216t\244\246\232\235\243_\177\264\255b\240\205l\216p\205\211\212\226\235\210\205\177\306lc\254\227\305\247v\232c\231\230\202\222\234\223\214z\240\253\220\240\235\213jWo]\275\207\204\247\231\222\250\245v\205\256\225\265\207\221\211\237\202\210\255\275_\223\245\252\220\211\257\254\214j\204\246i\221\271n\223c\230-\235\227c\205~\204\261\332\241\356\342\247i\241\235\241\244o\227h\226\314\212\216\224\254\231bd\230\213\253]\220\252y\206\253\222\242\240\207|\217`\213\205\226g]\255=}\251y\264\244\256\242\250\344\213\332n\211\270\231\360[\261khww\216\221\261\273\207\240\236j\314~\210\242jrho\225\216\266\225\220b\206j\242\262\217\206\235\231z\254\260\231}\302\232t\207r\214\256\256\230\177\234q\222\220q\244\235\211\225\211\215[\215\240\240~\211\177\223\230\214\220\212\245d\213u\317\225\323\303\200d^\201\240\214d\217\201\274\263\277\230\267\211\247d\221\247]#\030n\232\245\207x\216\246~\216il\255\210\203\320\255\251x\236S\226\2126\211\204\263\203\265h\301\243|r\247ii\212{\207\232\250\204\240\243\200\206\265sw\205\220\274\205\210\230\206\233\250\241\250}\236\246\222\266z\246t\213}\317\234\211\242\224\231{w\263\215\267\232\217\231\230k\233O\222\234\266yt\225\306\240\216\354\205\206\216yU\206iu\267\301\221\251~ed^\220\210i\200\224\224\201ka\216\226\246\253\237j\211\232\203\246r\245\212c\177\246\203\245\205\256\224\312\177\271\206\252\204\210\272\207\235\231r\213|\216\231\235\245\222\203\221z\245q}h\245p\222\236\250\242spwo\242\206\214\226~\222w\211\221\270\213\210p\303\222\231\232\204`\204\216\242\223\230FUn\205\243\217\206v\253\205\240l\230\206\222\244\244V\200~\326\211\231J\216\224\201\220\220\231ez}m\251\206\210p\234\201\177\246\246}\255\270{\222\230g\200\226\224\210\222^eu\264g\217x\214z\201\220\247n\214\265\251_\177\216t\215\237\233\212\311\177s\200x\204\215\235\210\244w\177Z\234\317J\213\217g\246\216{q\266\227^\270\217\240\223t\232\227t8\203b\254\243\222|\220\212\272[\234Rs\224q\210\244\231\230\216\240\232\217^fw\222\226\232\252\201\216\222de\212o>{cj\300\221w\237\237r\232xU\225j\205\213[\223\206\244\241\177\202\251\307\222\240~\233v\201\213v\202"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.13558042049
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.963787436485
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/convolution_eightbit_reshape_transformer/residual/residual2/MirrorPad_1"
  op: "Reshape"
  input: "transformer/residual/residual2/MirrorPad_1"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/convolution_eightbit_min_transformer/residual/residual2/MirrorPad_1"
  op: "Min"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_reshape_transformer/residual/residual2/MirrorPad_1"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/convolution_eightbit_max_transformer/residual/residual2/MirrorPad_1"
  op: "Max"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_reshape_transformer/residual/residual2/MirrorPad_1"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/convolution_eightbit_quantize_transformer/residual/residual2/MirrorPad_1"
  op: "QuantizeV2"
  input: "transformer/residual/residual2/MirrorPad_1"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_min_transformer/residual/residual2/MirrorPad_1"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_max_transformer/residual/residual2/MirrorPad_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_quantize_transformer/residual/residual2/MirrorPad_1"
  input: "transformer/residual/residual2/conv2/weights_quint8_const"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_quantize_transformer/residual/residual2/MirrorPad_1:1"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_quantize_transformer/residual/residual2/MirrorPad_1:2"
  input: "transformer/residual/residual2/conv2/weights_min"
  input: "transformer/residual/residual2/conv2/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_quantized_conv:2"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_requant_range:0"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/convolution"
  op: "Dequantize"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_requantize"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_requantize:1"
  input: "transformer/residual/residual2/conv2/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/residual/residual2/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/residual/residual2/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/residual/residual2/conv2/convolution"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/normalize/Mul"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/normalize/variance"
  input: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1/shape"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\330\304\202?wu\206??\360r?\\\323\222?\363\307\001?T\362\200?\377\236{?\006\350K?\231\357\224?D\305q?\311/:?\364e\313>0\013:?\320\020e?{1B?\375{\177?\362\222\244?(\371\210?\313\256k?\366\205X?J\236\201?\201E\217?\314N\236?\333\312\204?\243\006Z?b\370K?\355\343\212?{_A?\207\010\220?g\324\227?: 1?!d{?\217\240\201?\353Tb?\306\354H?\320b}?\232e\243?v\263\335>\034\236d?.\272\204?\344`\227>\003iQ?\300cF?\270\362\033>\2253u?2\373^?\031\243\020?\214>\224?\035\244V?\006\276\033?\372n\242?u\325l?\264\374\034?\235\')?\201S=?k}c?\207\320u?\311i2?\216ae?S\314\342>\332\305D?o\341{?\256\274\\?\035\350\206?\360\351\203?\250\211\201?\346\207\310>L\354\244?.\272\352>>\220\213?T\302L?\252\364E?\242\266c?T\265(?\337L)?`\342\006>E}E?\255H\204?~PM?1b\'?f(r?\2177\313>no\272>\346\243Q?\036\220|?\003\361\206?vXh?\214\332\263?\353\032e?\025\371^?\032\371\237?j}\202?\354\276I?\027\273\254?\2311*?\253\342\236?\340\270.?t\235A?@Wr?/\013\252?\357&{?w\247\214>\200+\014?\250;\204?e\250J?y=\215?\241.\002?b\262\205?$\251c?\211\036a?\"7P?\2416;?\253\306r?\014o)?\355\322\312?\227w\246?\315\020f?{\2743?|\261A?P\267J?\321Q|?\n\247C?\200\0279?\201\347f?\375w\252?\246|:?z|\246?\365\346N?}sp?\n\262\217?\204\327*?\220\245\227?\"L}?\3679p?:FG?\007 [?\262\215m?E\355\216?\244\004\361>\375\332\030?ozh?\005\277B?s\002+?\025OM?\367\243\210?\266\000t?\\\370\\?\021\010}?\025\361a?o\"\210?\231\273\204?0\353\202?\020\213&?\340\002I?\327}I?V{w?\261O\242?\307^\200?\371\371q?CB\241?$\301\205?\3338\206?\363lO?]J\254?/\344j?\277J\227?9\233\204?\375\021\215?X\"\267?\377\307Z?\217r\315>-\232G?\022y\034?\255\357\201?\000\314R?N\333I?\036\226\262?W\250=?\220\204(?]\201\263?\330\216\257?Vb\210?\237w[?\255Yq?~\030[?\262\234\223??\337|?4\344:?\243\016\236?\013?v?\247Ml?O\346\242?\026,\357>)\311\010?x\303\001?\336\032\322?\324PY?\1777\370>Q\004(?9[^?\013{&?y\332\340>\333\226\n?\256\265\257>\360\2715?\260\241\206?\250}\235?\360\020]>\037A\243?N\237\325>\351uB?\027r^?)\337c? p\330>7\010\261?\271p=\277\332\220\210?\234\263G?\2467\321>\304\024F?|\253\014@,\326\341\274\265\214\313?\361\244\371>\376\024\035?\277\313\204?F\311\037?\356:\203?\3517(?\341j4?\035\250\226?\266\006\317?\352PW?\336\274s?+\234\223?G\252\271>\021`\r?\021CQ?\177\260*?\215T\224?\232d\230?M\274f?\203\':?,fH?\220\000@?4L{?\216\352\253?\014t\207?\364~\002?%\025??\255\3565?+\333\216?\010\214\254?{Qo?\252\266q?\350X\200?\226\275f?\373\250\253?\361\021\220?\343\220\255?t\n:?u\035\210?\332E\367>\3428E?QnW?\341J\212?\010\303\363>\333?\034?\342\304\203?kVx?-\301_?\235\332\207?\307\031\215?L\335\003?x,\363>\025\227\025?\3674]?,Kk?]\227\313?\312\036S?-\370Z?\003\250:?.\357h?3\035$?iX\223?\323|D?\200\216\251?\214O!?E\016\030?y\364\372>\007\000:?\353\203\255?\003\2625?=\002\373>\275\327\006?\325\307I??*A?7\240i?oJO?\371\303\211?\300zL?\326;\232?\343\357Q?\200\250\331>sj`?\0215\212?|\035Q?\276\0264?\366G\244?\014\211&=r\301*?\205\254o>\265\267\217?\020\267<?\221\266\313<\240\372\204>\025\273\215?\377\354\236<\0309\367?\240.R?[\371\200?\241\316\205?/\223B?\307m\231?\276=\204?\030\303\013?\233\010\227?\260#\204?\342\276\206?\237\304\236?\"\"\375>\347%\017?x}\031?:9\272?\305\327r?\001\220\216?M\"\210?\332\310\\>\010\016V?\274\000\273?\234|\257?3\354r?\nT\213?\271L\237?)(\201?\255-<?\020\234\201?!\0014?\271\316s?\t\366\177?\1779\253?]\365\226?\367O\231?\2175\216?x\370\235?o\365\213?\022\253L?@\325V?\324\220%?\247\023F?o:c?\024\264\201?D\370\256>ar\026?E\246V?\227\363\245?\000\016\036?n\216\242?\333\207\225?\331U??\362p ?2\365\371>\362\256\260?Z@!?h\330X?\326\010w?*&r?`K\252?\352\r\222?\013\321\271>#\223\211?\217\356\220?n\027d?i`{?7\222\221?\022\310\271?J\235\237?\303x\201?\337AS?\311T\226?7\340\233?\353\366\200?`VE?\332\306\245?\205I\034?\302\366\324>\242^-?:\010\206?\366)\261?m\222=?\332b\207?\372\017\221?\233\202\204?\274\253j?\3746M?\014\235g?\334\321\244?\006\223R?\324\374\223?BQ=?\323|\221?^\330B?\327\210o?;\"\207?:\303W?\222|O?\257\267@?\361Ru?\270<l?\346\007\226?\321\315\251?\320uH?F\251J?\201\250E?\364l:?\226Uk?\363\204\342>\001\344\326>\326=\"?\177a6?\262~\214?\366\016\256?8\231\221?B-\225>T\006\020?\370\213\027?\263\320\214?\332\341{?\363@??\212<\027?\331\346\316>A\345F?\330\265`?\354\033\033?]\232\206?\006\331\256?.ox?N\205\177?\035\021\250?{\265\237?M\303y?l\016v?@\361\013?\240\300\253?\240\337\177?\360Co?\265RY?#\224l?W\270\005?\303\001!?\305\005Z>\310\334\225?\352\272F?3;}?\314-I?F\321\243?!\256,?\'\232a?\033\253\240?\247\357T?&\333\236?oH\201?\217A\244?\3747\037?\374\036\226?\340\3566?\313\215\207?\206\304\225?2\3412?\240\004(?\2162A?\037\333G?KzM?\241\274\177?\002\027e?\224i\345>\300i\'>\nn\256>\274\"\030?\227\250H?\257pW>e\"3?\022\273\023?t\277T?\316\"\234?[\263T?\031\001\252>e\274\337=s\264%?\267*\326>\322\\)?\"\245\022?\273#\351>\210\024\261?\231^q?\016j\372>\366\266>?\024_\322>\224ES?\376\243<?\350\360\243?\236\305\255>p\337a?3\\^?\222R\220?Y\356\266?\250V??\032\220\201?\333Y\240?:\262k?\267d\230?\254r-?\017\246\r?\325\037!?\305#K?\225\217e?\027N6?P\032\376>\001A\254?\320\260}?P\320\310>\007^\230?\034\260\205?W\252\272?{\250\214?4\224!?\017\340\223?\0238\274?\351\3451?\321E#?\3347\307?Z\306\200?\331*\223?yf\211?\333\224|>\265\241\273>\320+\274>\264\246\032>a/\235?\306\tb>\000\024f>T\3117?\203\312\003?\201\007\213?\314\333\256>\343\355\230?J|\241>\350\314\272?Ah\275?\353\273\372>:\240\013?B\251A>g\256V?\370\352R?\256\017C=\037\222\020?\003\342y>\t\365y?\304\301\033?p\222v?\254@\233>\334m\263>\0043B>\230\"\346=\200\364\362>5\224\365>\3643S??\207\205?\333\240\347>\026\002\216?\333\243R?\237`\374>=:\030?\213Q@?\313\266\246>\227\243\305?|\027$?\342\304\277> c\322>\247\226\003?\302\350f?V\225a?G,\274>\035E3?\357\357??\206\362g>hrU?\'\354\315>\t\372^?\357\024\002?\212TC?\226\323*?+\306-?\032C\245>\342\2461?U\277\251?\000e\235?\311\353\235?\004<>?m\007Y?,\256t?\'6\200?\247\030\207?\341\367\014?\264\335\371>\266cB?\376\006\206?P\251X?\233\211\034?\022d\001?9\233A?\010\275\251?\220~f?W\207c?\214}/?\333S\200?9\212\032?0\212\033?\014\n\222?J\367\215?JJx?\277\241\256?\365\346A?\232\030\210? b5?\320\350(?\375\205\306?\207\340~?\202\273\213?%\t{?\316\245U?\363\010\214?\036\3410?\265\362\277?\274\2114?e\370U?\225Q\263?\265\251\216?\221l\200?\277\025\206?\253@\302>\255\220a?\212\021\302>\372\320\255?\017\350b?\311\354q?\301q\236?\033\271u?\355\222\201?\335\347\243?\353\006\247?\005\325Y?\022\244\230?4&;?\014\023S?GF\210?`3\214?Ym\026?$\325\227?\001\255[?I\264s?e\037\203? \353\206?\016\254\364>\026\3062?9U\254?I\350\213?\323:P?\272\352;?\253UP?\360\253j?\251Kw?\020\312\202?\300lr?1\000h?\222f\212?E\003u?\274]\217?Mf\025?\317\332t?\206\323Q?\2300\233?]Kw?s\243$>\014\006\311>\031\014\204?O\2508?\202\233h?\025Uz?7\223>?\345\377\214?\233]\354>9_\245?;\311U?Lyd?\3002\240?A\205\206>\257\340\251?\311\"*?\272\001p?\37233?g\210%?\221\2177?\313H\210?9M\303>\223\224\006?x\271\203?\007\002\177?Mp\225?,\224p?\337\2529?\271\026\327>i\300\252?pq\202?\346\212~?\305\177v?iRr?\273\306\276>l\316b?\206\204c?\302\035~?\021\3337?R\367]?+s\251?\372w\032?\333\245 ?\2734\201?\r]m?\004\331\t?\347\326s?\203\235\222\274\301Q\203?.\254R?g\2404?\234m\242?\260\017|?Ew ?\244Y\205>7\335Z?\016\000Z?\251\216@?\322\177I?\274\262W?\300e9?G\360\367>\252\236\022?\365\237O?\rAm?\306\373\252?n\326\351?\310\346\211?B\354_?\220\025I?\213l\"?\267\320s?.OV?\236\030\342>L\357\230?\274\260\027?\r\313\004?,\316\243>\304\353y?8\334g?P\231i?\354a\221?\344\357\274?\306\344\030?Lh\r?\210\367d?\003x3?\334\246\213?@\006\215?\341\342\033?\n8\213?\247\314K?t\330\226?\340V\013?\032z\262>\013\371\304?\330^\377>\241(\260?\373\351\214?L\244\200?#\005>?!\\4?\367\340\337>\031u\302?\255*Q?\017\371\225?b%\232?\005n0?\017\306r?\255<\200?\033\301\251?\303\276\277?*\271\204?\233p4?+\203R?\216\331~?\245\310W?\353\234\014?\256\276\342>@\007l?,(\245?\264p\213?\301\000S?)\332\275?uB\230?F\010\201?S\253\010?\343\357\304?\311\370G?\\\226\230?4\303\035?a\200}?{.\235?<bA?H\263B?\346\202\247?:dQ?\322?\214?mvI?"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_1"
  input: "transformer/residual/residual2/conv2/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/residual/residual2/conv2/InstanceNorm/mul_1"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Sum_1"
  input: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims_2"
  input: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual2/conv2/convolution"
  input: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape/shape"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "IJ\375\276f\253\306>\"\370\324\275S4\371>\214;N=\337O\225>h\030\212\2769%\301\275aE\345\276-\306\305\276\357\323\325=F*\325>\036=M\276\353/\240\276\302\344;\276\367\\O\276%\\L\275i\367\304\2764\223\377\275\243\246\223>Rx,\276\025\216\006\276^\324y\276f\031\240\276\366\251\206\275\210\206\201\276`d\r\274.\277\217\274\0139D\276\000mB\276\360\274\204\276\336SF\275SW\253=\344\345i>\226\352\305\274\3124v>\375e\303=\323\266\026\276=v7\276\252\240\254\276\226w\004\276\257fP>\3005\254\274\3279w\275\2679\246\275\216\266B\276{\177}>!Z\033\275\334B8\274B\271\255\275\024/\266\276K\307\254\275,S\232\275j\336I\276\210R\252=MU\327=\233\2015\276\334\337e\276\311(\024=\335\221\243\276G\337h\276>1\004\276y\224\214\276\025\305\272\275\010\312/\275\234\324\327<\324\203\315\276\371Hb=\311iW\274s\033e\276\314{\">\356x*\276\227\340d>\377L\237\274%\244\005\276\004/m\276]\256\271=F2\266\274\240+\204\275b\325\251=z_\371\275\232m\\=\3533\200=7\000A\276\277\035:>6\013\364=\220\320)\275]z\252>\341\301C=\246\373\233\275\016\'\013\276?\225\202=\313\365\203>k\233\307\272d\220\377\274\344)\226\275\255\300\223\275\211\037\372\276\246<}>Z\264\203\2755\033W>Q\231\004\276qm\237=\363#\223=&\266\247>\350\215\367<\277mN\276Q\377\242\276\t\366\236=\275\314\234=\276f==\r\243\022\276\003\373\241>\342\370\003>s\2768\275\252\302\345=\244Uq>>\0066>\257\360\207\275\017M\303=\216\210\036>\330\245{=\252\244o>\224\"\027\276\220/\266:\362\214)\276l\\\'=\2403\352=\313\263\273\274\346q\014\275NZ\375\274C\213\221;R\355t\276U\354\363=\242j);\262\274\274\275\"\217>=h~\230=\274r\214=\201\202\366\275\340\332\010=<\310\235\275\347t\013=s\234S>\200\274C;\034MO\276\346\363\010>\250i!=q3\226\275\336\360J\276\374\314\243\275\356\227\301=\357\223\301\274m\356\327\275t\254.\276S\014j\274\035\214X\276\261\235\334\275k\331\210=\001;%>7\007l>\365\022\234\276\\Y\257\276:\237e\276\3528<=U)\250>\233O\225>\200#Q>\256\304\010\276]m3=\337\312\004=\303\251,\276>\032\204\276K[\337\275\0276\251\276\356\366Y>\243\034\344=S\252\016\276\271\036\370\275\334G\303\276\301#\005=\366\2641\276\000\255K>\374\361R>\245\214\303=\250Y\310>a\224.\276\346]C>?\316P>\231b\314=+p\331>\025\320\310=\212\364_\274\256S\007\274\263\333=\276o}\326\274\014\010Z>\370\035\220\276\214\344\237>*\022\212\274\022\372\237>O\342j<\346\315\224\276\014\367\322\275B\0062\276Q\004H\275QuX\273\216b\020\275t\251\002\276q\2428=h\335\225=y\017\202\275\337U\254=Z\204\241\275\213iH=s\264Z=w\365\">\235L\016>\206\353\023=Jw\211\276\201\302\364=\326V\014\275\327\302\271;pw\017<y\024f>\202\2667>\342\253\341\276\'\362\316=\366\341\037>Z\365T\274E\312\'\276\"\310\300\274\304y\212\276\242\3011\275\373\316a=\216\372\033\276\3716\030=\221#\356\275,\215\n<\201\337c\276\271y\244;L~\013\276\336\\\254>\226\002\373\276\232D\036\276nJ{\274e\233T<5 :<\204\235\261\274\004s4>\270\354\"\276\031\354\024\275\267\225\352\275\007\246|<8\325\236\275\032\017\201=\205\236#>\025\316\210>\276\010\334=\026_\004>\020q\242\275@\234 \275\nH\031\276^&\020\276\006\215\030>\221jN<\037T\202=\216\262C\275.\266X\275\024\207\370=\247\035g>\205x\223=\036\031\202\276\373\375\026>\300\014\227>AC\250>g\021Z=\321\214`>\350\242\212\276\371\342\261\275\366\311\325=gz\325=z\341\216>N\237\216\276\333\220\262\276x\370\223<\325a-\276x\006:\275{K\210\276\321\3130>g\353\030\276J\204\377=\247\311\024\275\2578\177=\n%R\276\255\256&\276\010\036\212\276$\315o=>>-\275/a\001<\340\236\205>A\302\036\276K\244\237\275yH\022\276\246Q=\276GB\377\274\2158\273<K\345:\276\256t\007\275ha\245=\263\327\270\275\362\027\272=\027\376\254\276f,\017\276\332\261\365=[\370V>\346x\362\275Q\014x>Z\303f\276\255\312\215\276u\031\006\276\343?\235\275\264N\316<rk >\366\350\376\275e\357\366=\036\276/=\377\020V\276\230\316\020\276\024\375\263\276\0055D\276+\341\224>\243>}<\245Fq>\377n\231\276@n.=\016C\313\274\034[+\276\330 \346<\227M\247=\037\022|>\026\306^>\327\237\206\276\202\365\245\275\241e\245:\037\235\216\275&\252Y\273e\217&:%\302\021\276\256\002\262\276h\022-\276\031I\350;\351j9>\221\312\001=\366V\220>\214\001\022\276\206\262\026\276\324\337\265\275G\2413\276B\332\264\275o?P>\246#\346\273\205\033\377=\022.Y=\237\330\237=\324\336\260\274\350g{>\3478G\276\267M\022>_\222\213\274CqT\276\245l\236>e!\004>\326\353\035\275UP@=#)\006>%e\347=\374\260#>G\340\215\275i\021\002>A\220\252;\000\270p>\266S1\276\031\274\263\276\263\034\365\275WB\373\274n<\007>\025hq=\331E\245\274\244\366\346\275\305\272o\276+\202F>\327\274\035>\246\372\362<()\252\275\222\201\205=\334\004\337\275\252U\356;\246\207\377=\\.\235\2756Y)>Lo\010\276,\372\020\275\326&\023\276C\224\304\274\322\034\332=\360\203\323\274I\324\000>#\223\374<4Ur\274\332\323\024\276\233.\037\275\335\302\302<\237\220\206;8\203\311\274y\227\027\2768\034\242=-\003\206\276\334\034c>\202\357\321\275.\227\260>\r\240@=\001\230\">D\031\263>D6\r\276\254\224\230<\214\377j\276\330\211\267<\317\253H\276\350=\346=O\364\353\275Q\371\354\276\322\024\217<\321\371\014?\035c\265\276\030,\212=\316\'y>\220\220W>\376J\213\276\277Q`>x\r\253>\007\246^>\327\002\202\276\371\335\027\275\222\367s=L\344\232\276\354\350z=0\024\244>\337\327\242:%L\217>\013l\010>\234\2658>6/\200\275{\3352>\306Ao\275\342\r\251\2731\324}=\375b6\276V6\364\275M\332\021<\n\364]\276\000\r\230=)5\227<\263\202\321\275\217\"\002>\313\253\020\275\356\356\035\276\264\315\310=\252\300T\275\211\361\037\276\323\276h=\345m\320\275.\327\371\2747d\001=!qV\274\257W/<Oil=\313$\036=\362=\370\275\301\026\234=\245\371n=\177c\243>\217v\230\276.\014-<}-\277\275R\344\206\276A\277\226>\317HL\276*0l<\241t\251\275=\210Y<\034wt\276\312\241\353=\020\260\262\276\206\370C=0\320\210=6\311\235\276`eh\276\032LD\2733^\225\275\246\252\322\276Fw\204\276\246\332\234>\257\020Y\276)\027\221\275\203\217)>\014\353U\276\331\244\216\274\337\344\177>Gh\330<\314\241$\275\006\236\r=\207\217(\276V\214\'>y\227B>\363\037\253\275\036\177\030=)_9\276\213P\177>\3162Z\276m\371\210>\345\324\210=\227\373>\276\203\315\025>\356\016\225>/^\205>\335o\246>;\317P\276\222Y\271=\307(\250=)\235\306<(\260\236>EV\266=\'\023\326={\007\231\275\326\301S\276\242\314\305\275\307\035\372=\241\2246>j\260\313\274n|4\276\327\033A\276\265\330\024\276\343L4>]\327\247\275\365\375-\275[\r\t>\330<\340>.\300\213\275\3103\251\275%\262\317\276\001\250=\276\331\000\203\275\261\252Q\276\316M,<\020\374\255>\344\225\214>P<\215>\255\"\030=%\276\245\275\306Q\265\276\277\021\335\275\307P\376\275#\214\262>\255\240\230>\274\032\321=KA\212\276\346\276\246\273O\034\334\276\375*\210\276q\370\254>\313\217\251=\334c\000\276\201\265\361\275\211O-\2767\253W\276\030\307\220=\345{r\275\266\207\224>VJ\267=\344\025\'\276$2\010=\261}^=\200x\241=\356\322\333=)\315@\276<\206s<\362!\036>\333\014\345\275\006Ak\275\037q\220\2765\267\226>\334Y\306<\234\344J>\205\330\341\275H*\321=\255w\236=Vd\017>\347\'\303\275\370j\364<\330z\350\274\206\206\366<\361\033\223\274\\T\206\275\337\2405\276\257\003\177\275b\210\002\273\305\220\226\276\342[\237\275\340\351\024>_-\243\276\335\277a>W\0347>`\"\275>\310\233\247=[T\237\2764\221}\275\266\342,\274<\352\002\276m\2770\276\013X\316\275\266j\'=M\326v>\035$\365\274\317}C\275\224#\340\275\334\255\013\274\333\347G\276\225\364\251\275\330\314\200\276v\350\022\275o\355f>\345\240>\275\264&`\276\024OX=\270\010\265\276r\2032\276\265\367\n>p\271\027\275<d\202>\270\315`\275\261H\200;b-\022>\034.V=\211\"r<\260\025R<D=\347\272-.;>\226\250,\275\203\207\205\274\371\231\246\275L\202)\275\365\360\016>_\232a=4\334\244\275\201x\240\275\240\247i\276\232\205\210\274\342\271\n=\032L\376=\270\"H>\206\354\025\276_\241\253\274\247\376O>F^\212>\031JE\275K`\366=\352\313\277=N\276\214\275\221a\263\275\2425\331\274\316L\026>\335\227o>6I\272=R\330\237\275\217]8\276\3767\263\276\016\035\233\275H\000\211\275\240\310E>#q\303<)\374Z>\221\210\357=\265\251\274>An\000\275\222D\216=\335\213\237<\302\224O>\246u\010>\210\3272=\313\333\327=_\354\311<\305\013\231\276\2206\n=\330\250$=\373\354\221;Y\237\037>\201\323\202\276\251\n-\276oX\247>*\327\023\274\322o/\276\324\214\361=o\304\200\276\223W\265\273\344x\223=n\241&\276~\265#\276\221!8\276x\340\'\276\237\363\273>f\375\024\275\225\034\235>\0309\210>lbY>\316\251\247\276\026/\010>,H6>T\315\204\276 X\031\274\177\340\217\276=\2636>}U#=\2651\325=(\337\211\275\\5\207=\243\206\034=Z\263\331=\256SM>\260\304\254>\225\035#\275\010@\305=\230z]>k\330\342=!M\262\274E=\032=U\243u\276\277\240r>>\027\222\275L\007T>\343\035\245\274\325I\325=\233\264\231\276>\010\230=\2559q\276o\310\223=b\215(>;;\341=\317D\263\274\365-\001>\307j\356\275NEp;\234\001\031\276\343\336\245\276F\362\255\275R\001\343=\t{\004\275\207\315\333\274\347\340~>\260d\036=pt\231\276\"S\344\275d=\213:\222\311\201\275\211\236,\276\343\022\013\275R;\305\273\211[c>\325\303\035\276\265L\324\275Z\242\247\275\266\314\003>\216\217\213>\202`->Kk\244\276\271\311\003>\343=\254\275\025Q\245\275_eW>\305d\354=\225\331\203>\2149\200\276\250\354D\276\332\005.\2763\235\342\275\253<H\275\034s\245\276o\223;>\376I\207=\370\360M\275\302S\327\275\307<\264=\3411\233\276\212xh\276\331\3462>S)\035>a\3042\276:\364\207>8\357\244=Y\220\254=b\205\257\275G\254\002\276y\355\020\276\013\372\336\275\342h\350=}\311\204\275\362\360\317<G\331n>\246r\024\276!\351\317=zg4\276\037`\326=\267\232K>\315\036e>\030\272\023>\371o\037\276\225\351\242>_\356\210=\307\271;>\022?\315=\306\'\030>%@\351=\310\302\t\276\372^\354\275!\373\245\274O\005\n\276\310q\321=\275\361\327=e\224\254=Y\002]\276\036`\036>w\263p="
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Reshape"
  input: "transformer/residual/residual2/conv2/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/residual/residual2/conv2/InstanceNorm/mul"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/residual/residual2/conv2/InstanceNorm/Sum"
  input: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims"
  input: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/residual/residual2/conv2/InstanceNorm/moments/normalize/mean"
  input: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/residual/residual2/conv2/InstanceNorm/ExpandDims_1"
  input: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/mul_1"
  input: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual2/add"
  op: "Add"
  input: "transformer/residual/residual1/add"
  input: "transformer/residual/residual2/conv2/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/MirrorPad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/MirrorPad"
  op: "MirrorPad"
  input: "transformer/residual/residual2/add"
  input: "transformer/residual/residual3/MirrorPad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\202n{m\207\212wc\215\200i\250X\206hPgg\204\225V\215^\206`\206g;<nt\206l`\242qy\223\235vm{`lpw\230nj`_\200\242\265\225o\225mm\232\303}\230\241\201\253\304\232;\235\236\226\236n\240j~\226\211\215r\221\227\237`\234\244\204\231uw\206|\220\202\220\212\240\216\262\243\215\201x\243o\236_{\251q\252O\252\177dn\331\305\333z\244s\\\202\223`\262\2509w\205\315}D\234n\254\225\221\177a\302WD\202\227\315\257]VK[\235zh\206?\203Kop\214p\214p\267M\271{Y\254S\226w\216qut\252\242\177b\204}\241pOc\215i>o~&\177\226qg}x\215S\\V\225Nu\201\226DlvohpE\204]ejw}qwY\245\247aR^\236y\206\310e\260X\272\227\224}v\254\261\213<Viy]M\202mwLXtryXm\235k\213\207zS\252t\251\203\233g\245V\224\226\215gbxT\212f\220\210\215\245\216\217\200\214\223|\206w\227\243S}\213\226j{\220}\177\246OlZ!\234Z\217xT\201|qxJQ\202oJ_|x\226\202\\\216W}\241ySgp\247|\200Qprpr\213F\202\257\223v\233VTu`\232\223{\202\210\205\205\214\230\237\202\271f\1778\231\220:}Jfw\212I\213{\206Oz\202\245b\225r4\\co\217|hwz\244{\211Qfz\211d\232a|\257o\206\221:\200\227\227gs\250zT@\236\243j\221\243\202\243h\231\243|\220=\231Vmt\224~s\344+hj\255\212PTn\221\213ss}}#\210\211\250o\236x\2137Qb/vB\017\233\202pzLXH\212R]\204z`\177K\222owujZa\205\210\216\227\200r\215~U\2455\203i\227\216\252?\202kuH\177\301B\334\204\230\220\224TdfZ\216{\224~v\246\221\274hq{hfj_\225wmg\316rN\215Lzrefxcx\214\211cu\\\214dqG\211\224Y3\275\223\203t[\230\236yr\\\235|rQ\346r\200~L\177{\247\215\235T\216}\235\300J\206\225g\037^\2066Aa\234\216nvjpz\205z\205e\271\205aKnA^UMW\231\203Z\232\203\230\222i>\210\213\220\227d\214\211u\237\203k|n\211\202}\200\223\\\203O\232\230LwP\214\200o\207i^\245_\266Prn\230\236\253\225~\214avioc\213u\217Ko\\z\235\214y|\204\240p\251\262ng\225\207q\226Peq>z\212\267\265`ws\245\264\272]my|\251\246~gx]\206\212qpG}\202\205\250\247`fugvq+\204x\237|y\227\210Y\207}e}bxb{Y\177\234]\207\211\240u\243\212\177\202bf\212<\203l[cf\203\264g\201w\216cRU\235k|x\221\207\211f\211\207\251\214y\264i\225\210`hGZyv\210\242d\333[sq\214\220\244vx\231m;\244\206\310\226\216r\257\222\221lU\237\221\221j\235V\254\300\226\221\215~\230e\241\224\226~\244|~ct\225\223We\241g\213_\216\232\245\232q~\217\271a\246d\235\211v\206\221\250\215\213\201_\222\201S[\204uTtw\275\231\224\232\177rB\314\224~w\216\233vKe\234F\217d\206h\212\244`\217KP-eb\216[\272\211\206d\247kw\276\014Ro~r\226auo\177\213Wp\241\223\200v\212\235\244_\252\223\246\212\242\177;dd\204A\222_:\250a\225\235\263\266\260\214R\200m\221\260|\255\235l\231r\225|e\212i\240\223\211\264\260\204\231et\223ydl\207\234\207x]p~y\231xq\204o~\202\221\227UU\201|\206othG|\217\256qk\240Sv\212\235~c\221b{cms\203\236\202\221\211\245\233\203b\251v\236w\234\206\256\207v\201\264\235l|\234\225zx\231x\206\235|wr\205\202\240\177\215ws\250sxs\211\203{\215\273p\213\255~`\202\240Bg\214ul\231\235\216\234\242\352b\202\236\227\253pz~\242~\233?\251l\214r\223a\233q\210\210\314\202\227qb\262\246`\200r\224~[wr\220s\233\206\220u\222l\217\224\225_zu\245J\211pS\222o^zWv|\206v\204uYsZ^\177]cv\221l}\223=|\261}oo\223\210tjg|\204\221zv7gO\234{bd\251\213\201e\246\322up\205\262\215d\220e\203{z\277A\241f\213ez\203y\231\212yZZxfwdoz\244qYv{ne\200\231\202\213~zg\231j\203~\235v\225T\212g\211}kx\224\200j\221\216\207p\246d\204\240\220]a\226i\234\204\212\232\243\177[\204O\256}\201y\\_\206r\243\223v\254\200}yKXwzlao\216\237\214\\\201\203\212\254}ir\212\211\177\216U\203\204ho\213J\212\237pl\216\177Xpr\255\231v\211|ui{\227\307Z\310]\216L\205\226y\230C\200\205mn\216\212\201ml\213\217p|qdZ\211}\220\211\204n|\201t\200kwm\231\217\264\177\200\240~p\200mi\220\227\204\201\241\202sW\231~pU\214\244\247r{\214\213\222q\230\212yl\253\204\200\230\203wSUt\223Rp\223o\200\202D\245\221C\231`wm5q\221\217`\257\177Z\231\220vYbrt\223xZq\207q}\214g\225\203g\221\201ic\177xynz\227s\210o\206Cyiu\202\223]i\206pb~\231d\231\201\213\177\212ro\232axh\230z~\214x\251p{m_zs~\220\202x_\265xsn}\204|dk\202o_\203\177zzb\210{x\\\232\241rs\212\204\220\252v\226\250}H~\240\206\231{\203\262\177\217[\202\254{yAt.\217\240wSl~\216\031\207}jOq\226\203~d{\204~\222\224\220^\251\211p\210qWe\212`p\210~y\211p\234\227zg\213\210\223[T\205mh\207\210[~t\225Y\207\202y{o\222\224\210|}`\203|~\224xk\241\205\256~zi\222\215\216\207|\222UfZ\244v\211\217\210\252pg\211\231\200v\207\224\210{\201\317\204q\246G\223sWn\227\201n\215}\251\250q\227\275\215\223in\200\216\234hf\211\233\221\210vqpu\250\250\216\240\235\205z\203k\201\177\225\242h\253jw\201\205x\252\201|f_\200\207\216e\206\237x\203\211\210\203\205\201}mhX\205R\200irr\216\202\223t\221i\232\210Ck\225\224|\204\222\231\227w{\217\241\232\202\211t\201\211X\202oQt\220\230\214s\331[nK\231\241\200p\213\217eN\217x\233s\201Y\264\250\244xf\212p\221\206\250\177u\250\234\241\212{\212m\221\247\210\233\243~\237n\210\202\244\220\232\241R}m\272U\240\226\210\207\224\277i|X\207f\221os\255s\251\202\206\233PCW\237E\205m\230z/\201U\207xp\266\261\230\202\226\240\211c\213\251X\216\210\205U\244\234\205\222\215}T\216\203\252o\267\222_q\263e\210\2329g\210\235\177F\204R\215l\244fi\245\245\210\200\230\227|\212_\222?z\216FpR\236s\273\225n\215\262\202\232\207\261\205\254taivsy\210\206\223p\217|\204xvp\212\200\207\214\213\177\217ypp\203\210_~L\236|xx\177otz[\200\206\230n\236\211\220nu\220|\201R\230y-p\235\234e_\270Y<t\320ut\217t\205\216qcqv\236\223\273\214_Zf\320\220}v\250}\265}\233u\261\243L\201\242\230hV\223\213\211\263|\204\217\231r\200\205\207l\204\255f\205vz}o\217\224z|\371yBf\245.y}\222g\226\240]\240v\366M\231 \254}qS\210\341\225b\026\306^\323\217y>\213o\226\204\272\234\250\242_e\277\177{\\\206p\217\207\221\201]\202}\216\234\233\206d\220\2238\215^}_\204\2215sVmF\206`\225\222\214\217\235a\211qF\222`(\223\271h\206\241f>\226oM}\215haHF\224\237W\207uE{=\206\263\234g\263\217{[\233\267\213\230\213\202\216\236sO\206\230\231\251]xh\203N\200\234t\253\207\230l\215X}\205h\204\242\340|Zu\201Kw}\230x\273\202Ox\210\201Fu|gbX\213{s\253p\227\251YXz\220[\240\225i\200\231\225u\204\235\210\262|\222\213\225\245ZV;\226\211\262\214\226a\201\226\227w\270\275\206d\203VG\247xs`a\241\203\225U\177\177\204\214}unw\207f\212g\224\210Oi\227`\204\311Su\240b.g\220\277\257un\203\216gv\256\312]\252R\2219\241\210y\255f\212r\215Gly}Rn\210\271s\202yBihxtzlc\210jq\216{\202\222\223\266\222o}\243e\231zw\225~\215a\214\232\234\202W\222\203\227s\257\226\262s\211\226\226\177y\203\217mn\223\211\244r\340\221J(2\261}\206\320\206|\243BX\376*w]U\212\2431\262\214\204\272[X\276\235m;jh]\217\214_a\262Uj\222b\265\203\203k\232|`bo\204i~\230p\213K\223Aqapu\263zRk|g\211\246f\263\210\220x\212\225\262\232[remp\217\211`\262]{iG|hc\253\225wd\264\212C\204K\206\201wi|\213B\212g\237\246\203\210\220\215e\240\232\213\225\036y\221\222\245\202z|\024\177\231t\207\3024\270\205\222\200q\221\210ekeL\204\226J\203\223g\210If\224Evl\301\212TIq\231e\206\214\255j\250y\211j\244~k\235KZ\225\237L\231}\274\233klh\274\275Cfh\200c\201\220r\212Y\233Z\225\226\225\210Z\314\303td{\200m\200\253\222:j\313\246\303wpk\216yZ~l\257<e=\252w\265\264z\247fNx\235]x\234zb\215e\261qB\2224msl~\225wU\314(\235\202\213\225\204Hj=aux\205\212b\300oX\224\220\216\230P\237X\215\200~pg\226#\240\202\250\234z\271hXUU\211\236zsXle\212\226o\233\251ld\213\201sNrrwD]\216\201x\232\230\204\226izs\212f\203\212Jx\275\237~\217\221\250\236\221|vy\207\206ta\202\217\216\216\232^\223z\211\217\233\310QqH\232\325xmn\241Qz\225\210\303\202yk\315\240\256\211[_O\236\225\266\216{\313x\250\255r\214{\\\200\202\323\221\223\221sop\307\223\254\266j|^\335\221\206\221z\230h\215[\212EZ\201\223\210]\275g\257\262\256\210\003k5\323)\232nW|&r\201\200\274a\225\214\240Yt\245jD\266tZ\300\210qZ\270\251\213c\222\226\240\241{\233z\247\256.\177\222M\264}H~o\240\223]\273\206Lk\210\265\262\273\270z\200u\233\r\272Jw\016\207\202\257b\213\265\210\311\224I\273\242k\253\226\221\246\211\205_iW`\247\214\236\247\244\216\304\202\202ssi\205yfoW\252\234\177e\246p\203}}\213\202\207\231\201\215x\203|\245?p\220O\216\220n\216b\200\207kwhouP^}m\240t\235u\221|u\205v\213\202x\223xrn`\216\247\217\202r\233\207r\226\321\204t\212o\225\226tc\213\222w\213\206\212j|\233\204\216b\207\225q_\204\223ew`v\215J\241{w\206\220\222\237zs\246\220\222xrn}\221\221\231}\257\202v\203\246\274\205\227\300q\303c\254R\203\237c\202\216\317s8\236r\213\200\274u\202\235a_s\225\255\234P\226\242^\200\177}xA\216\216rd\177}\203a\200u\227\177d\242\203\216f\234~zu{\204}h\234|v\212RzyrU\212\211d\233\243mx\231\213\210\204\234r\225\203\206\214ev\226\232{\224\234u\202ij\214d\227p\251W\224\202vKR\274it\246\205\234\210\203\247\226j\300\221}ej\211\201j\244^tcmze\204\205\223ZE\223y\202x\215k\230x\216\212\213s\203i{^\200\205ahq\205\202p{X\261J\213\220\201^]\237\250\241\201iut\225I\220y\213v\207=N\211sP\206\210x\'\270cu\211g\202zpC\203w\202\245s\207\214nv\243\210d\234krl|Qm\207\202wxXw\207\335\256yD\220\233yt\237zvV\257g\262\216\236\207\207l\267z\204qG\205_f~d\205\234nyn\200wi`\223}Gq\203V\216~z}v\213qdUl\206zp\254\200v\233Z\214\2133c\214\263\224\214\201\222TU\201\244^\243\207o\213,\177\222\252w(q]\236n{|\267\264pgl\251wP\205\214\221}xm\200fMvLzg\220`\231\244knE}\\\037\241LL\206ar;\265\212dpq\177\\\206\205\207\202fk\177s\207v\212tmf\210\222g\224;\230\177\251\214\214Q\251\210nq}\253B\250\217\204\211\224\203pgw\231\210xwy\215\231\207\204r\244th\204\207\214i^\235\325xn~gt\214msurn}\177t\207z|v\214~x\216IO\234\221\206qz\266bq|_\200{|m\272b\220\224`|~\255j\254a\256\202q\331O\243\206xk\202\177Z_\177\210~\203ws\222x\210rq\240\202jNo\213dD\177br\226lS\212\216\230\212dI\205\225R\245_\214\216fud\211\216\232\201M\201\236\222\177\205\201~tu\245s\204\213usl_\201\\\306Uk\210\220\201\245\223\212o\177\215Qit\254\211wNxYtqo\177v|\252p\251\235ji|\247l\302]\223k\212kk\275\302\255fm}\256]x{wl\236\200vT\203{\225@\265\231K\204\232\203\231\215NMfW\203g\225|\235\213_XT\221f\235\211~\200l\224Y?L\241\236v{\241\231`\225\200\205x\222{ebwv|bt_\225l\230j\224`\\{z?]\210\231x\201z\227]\223q\200\232\212\234cU[u\207uyf\234f\332Vv\233\237g\237g\225\220x^\207~\253\210\201\207\207\215\220\212Z\202\217cm\255r\202\210\227\231\221e\216_\243z\214q\243wtco\234\233]T\232f\211y\213\201\210\217w\213k\260\204\223^\222\242|c\304qp:\217a\220\243\205{_\254R}m\214\237\235W\200aBaB\234\206N\227\243Ir\260\212\204\210\214\217\231\210~jjs\\f\201\225\224\273\233t\200hy\204\250E\230[uzz\220?\212\205Y>\303\234\225\230\211\214\242\215v\237E\251zcg7\225\202ZA\206\207\031\226G\200\202\250\221\226\234\231od\200\222j\231\221^\201n\221\213|\230\254\252y\231\267\214\226\226\221\225\231ho^\231\255\217\211\210^z\227\204\242\220ou\177\202\214\207hPqq\205l`\200pm{uq\207\223U\215v\211\177X\243d\211[~v\210\213\225\200\203\237dhf\246r\244u\256\217~}\177t\214z\232\207\205\217\201\226\213v}\220}o^x\226quuo\200x|\201^b|dg\203\205\210\222mw\212\227S\202u\226j\240\200\217\224O\303q\242W\211Gr\211r\231tidgpt~\202j\215\205moud\226lb}\212n\241r\246z\250\223\230\177jv|y\236\226\247x\234usuf\200`\221ls\226\222fqttj\200O|\217X\212_U|c\177\230\213r\255uO\235\262R\204TXg\237\210\241j\250\234\177\234V\200s\214\233wc\266a|\223\220\271\214\201}\205w\203er\204|n\217v\215zsj\202\216\247kv\232u\212\203[{\204Z\216\212\227\\\202\202\211Sa\203\201xe\232w\234~\211~\210yptz_\210x]\214sr\206~xn\177\203u\230\221\201m\200\247Lx||f\216\216\230\230yse\324s\226\207?Qmnt\317\226y\221o\203r|Y\212q\215\256\203\210\205\222\216\240\222w\270\210yi\207^{\216\207zsd\201y\224h\205\215{{}\204\207u\202b\221`\206\225\232o\231n\215z{jdrt\223\230:x\240\203m\224r\234nvwh\200p\245g\215\200\213\204`zo\210yy~\214n\251\234\200\221\222jsvc\205\255\235\216\201\207qT\213\207]f}r\211@f\225\225lFog\203l}\200\244zzsw`\207\204\\j=ry\201f\224\177\203\240e\223\212\243\215\220\217_N|m|\230vOk}\221\211\224\210\207p\177\243\203\223\202\243ltf\210tl[upq\213\203\201~\212H\200j{qqm\211\241j\214yxoj\230oz\204|\200o{zlyy}\207ns\207\204\214m}\210\242\203\207w\224\266y\220r\217w\222|\202\200kO\201p\215\217ax{\227\211u\213~\220\211\237\212\242y\245\247\215\234\206|{\254\214\230u_\240v\216xvor\214\202\224}ulnw\225h\255}\212`\211\204X\230b\223\230\222\223\206w\210~t|\243\211cQjy\223}^\241\242y\230y\204VynUoMarpn\211\205\230x\245Et\236W\202{Jrl\203\247\211a\216r\206\213|\206x\224Wuu\222`\212zt\226xw9\212\203\203{pcZj\216\\r\211kc\200\201\211\257\220g\230r\217\241So\206\246m\213d\277nhx\200\233\206~w\245\204m\214\201q\201\227\2105\204\215d\222\214\223[\203\227\215\275if}\263\211\211\221\214~j\205\306\232\215\211\201r}zr`w\212nv\211\214G\217\204\217\234gzr\205yx\202zhn\204\214\241\217\204}Ysj\203z\201}z\224\177\224_z\215\222\246|\235t\225t\206\204\233o[\215\177\306|qy\235|}n\233\211icp{\210\203\207u\211\212\251\217_\203qqo\276\201fv\205\213\230k\206^\241\227zm\211p\204t|\211\220f\177lZm\211\241\207~v\221\221\205o\177w]q\206~a\257\207\205b\205\200j\203v\200p`\177\226\177Kmz\235\237vmpp\225\226{\242\300Z\200\247\211n\230\207\177\263\200\233\202\245\200z\212\213\244\221\236\233ct\215\202}\264\201\221^\261y\\\2156\244\202\212G|z^\225\213\254s\231{\223\244M\207J\236n\207\221oW\221\230\226\226\224\217v\241_\217}\252jw\177Wtt\243Q\217rt\225x\203\231s\177\223\222\211uk\202\222n\216k\204c\253\215x\214jk\214h\200\225\211\223t\207vy}u\206qrl\177sUl\220m`t\257kUm\251ef\230m\224hxydk\242u\234{ZQ\202\320p\225\210\262z\213\211\243i\215\236v\266\200\233\211^\231\233w\252n|\213r{Yf\202u\236\212\204\207imf`\205ev\245\232h\215\202\205t\234`\235i\222fc\203\000\241\223\245\203\200`s\245g\207z\\d\212r\236\232gBz\204fg\213\201\177\236fo\241\230\256m\217x\234\216b|e\203x\222\310\201\305\213\216\220_\203;oY\177~i\202\210Xf\222\204\241\243\177\210\200U\223[?~Ua\227\234fy\255yg\265Lf=]\211n\202\\\177\244j\232\227z\207sq\333V\200\260\274\215\204\255\216\240\260\222V\177\2519^hx~\200\204uQ\201f\202\271\226\260\225\200\216\2179t\215\252\177\231\205\236exhtp_~v\243pyy\211\201iiyskr~\207rzu\302\212qywv\\\224\215dw\215p\217\177xV\224j\231?w\265\240\310_\207\235dvg\177h{^x\322\251\220v\217mt\250kx\203k\217\227\216p|\236\205\177\214\215\206vzX\200h\203\212xhx|\201\204_I\252\205l^\225~\221\177\206p\234bs\232\206\215\206x|\201wVn{\267\242\206Q`\204wgjq\222\224a\203gWp\203Ml|m\216nxl\226|v\223\214~q\207\204\243\206\214{\221\222|\306\236\265\207\211wls\221\211\203\207`\217\214rp\236|u\177\251\214\212\212v\276\227q\207q0W\260{f\207\233\177\230a\210\274r\244\216d\274\230<n\206\204\265Fx\274\220~Giub\203\316{\240\222b~\222u\237~\213bZ\221RO\203\215|{s~wauP\227mp~\223\206\221w\216u\210sw\204\255xr\232t\256nnf|\200i\206|s\204o\222\220Q\177xl\231\212n\204\257u]\203`|w\203\201\221lH\205n\234\221y\215\202w\203\201{\216~l\246\234\215\227\222\217\222f\221~\206\245\252Xtc\225\242k\201\202\256u\212M\211\2108\213\217au=\211\245dro\233NtR\227\212\221z~\216\244\177m\223\202ypgj\206\205\215z\200\213\177\266g\2074|au_fi}t\260\222\226\276`\253Sz\237c\253r\221\231t\250\212\221`|\210\222\\b\257\210\244@yw\221jyeU\266\202s\"p\207q\236\214\227bp\255[\\rs\207}\245\213\211\270h\230ms\212\200\203e\234>\257 \257/\211~q\177\206t~\207|e\200\227\251c\206Erj\246T\201Gr8\275w\234\360M\207\217\212yv\267{\264\205s\323jnj\202jV\2069X1\210bj\177\225/zz~\316_\210\203\212o\203\215\230\226o\204\245\224~t\212[g\207QrGq\207\235\213\217Hh\203y\323\207\225\210\312pzg\270\200F\224\272\264_wh\211\304\200|\203\236V|{\264\240\223\211\201\264\177\263yZc`\214\220\306|p\253\204{\267w\206\177`u\201\233\204\223\204v[t\216z\250\210\206x\177\306\244\203\\\203\207rdk\223bi\232ggl\256z\217\237sYE\251R\2365\214\207oa}\203\253\235\231\216~\242cy\313d\243O\226\211v\223\215st\250\245\201h\226\220\251\217\235\201}\212\230Z\202\253e\244\242\203\222^\256\207\245\224K\\vK\235oNh\211\222uIp\233\206\341/\224k\236Mk\257|\267\243p\365uw\233\233\240{b\226\206\210t\221\177\223\205\273_\240\261l\221n\213q\206\243twmj\227\202{\204}tL_\220\226q\233\206}PwF\265\005^\202Zk\246\207}Uo\204J\230`lujS\225t\261\267\250{\241\227\211\215\254\223\275\216\306\214{aQ\240\2428~y\242\340~\252\367b|vf\232\225iYi\230`\222j\217s\221\200\206\230f\203\203jG\230\205q\205ur\240I\232\236\204\204aS\201\200i\205g\225Y_\247\205S\222~\265q^NO\000\263#s\223\210\360N\263\207\210yr\231\205\311\226|\217V\224\220\321o\221ui\\l\240\212\245\270\222\270n\242\214z\207ljysa{\201\215o\212\201\264\201_\265y\221_\245\220\243o_\206\203m\226qa\225N_\225\215mx\253\201\222\265\247\206\203\320\205~\224P\243a\240\223A^\221\326\216\263\257\267\270\223\206\246\210\211\206\254\220\223\236\236\234{\234|\217\256\244p\267\216\270\271m\224\201\240\227{\242\226\241\227{\210\215\205\215c\211y`[j\231Z\242giY\205xX\237\214wv\226\177mj\243r~\231D~p\224V\246\020\247\201y\\\221\213\245\253z_e\\y\024E_\213\227\205\273L\331\320`\274m^\221y[\177\200\\\212\204\205Q\230\203{\207\177o}Jr\204|]\177uszWW\177\203i]\206e\211\243\336\253S>\224\252tm\306hKp\252\212\244\306\306\201Tl\217\211qxV\250\240k\252\205\236|b\212s}}\266n\230\210Gq^Pipj\201z\221s~Oo\252j\240x\200\215\202`~\203at\203\221\232\177|b`a\200w\222\267|}j}\307n\262\220t\204\244\307\213\227\222\277\304!|w\237nU\201\224\241~o\177\212E\026CS\217m\214\216\232\327f\201\261\205mb\205(?\217\201|,\240\227e\206Q\177I\204\227y\215jOrg}Y\220k\205wV\230\200\236\200\304\216\252~\207_\227\177|s\223\250Y\337\237\270\203\244\232wEzq\206]\\zp\247}\211|\215k^t\201\240|n\235\333~N~2|trZ~l\213\226\214y\203\216\201\227Yxy\206FX\300\245\233_\245\246WZVx{\232~\240\314\207\225\212P|\200\262Q\227^\220\246s\245n\301\233nsMp\234\215a{\226wZU\257Juff\223w\232\222g\257pa\261@[\263oVo\202r\246k\273n\206\206r\236p\323\243\177\205wx\251\\%v\245\225z\235\332}\217\254\216ud\227\243fL\200\2374\253Xu\215\234n\223\253~^wwY\233z\274\221r\243\237\\uG\203s\203\233\245]^ipI\221\237r\305W\274l\272c\211\277\273\213L|iNN\237h:@\212S\177\213JW\215~{\224\201u\207V\204<n5K\\\324\236\312~\332\250\211\200}\200Lo\200a\242b\211\\\203Q\263{\201\217\222\233\204v\223^M\254\222v\216p\265\221{y`\216\206}dg}z{\217\203|\235is\247\201\213{d\210St\225f_\302r\242\205\221\226?\211b\235D\216\223\236\200\254l\201\217\202c\177}\322\233\215\210~\246\224bIm\240Ua\327\214\225\220\257\257\2236\213M\212h\225n\242\202lOnx\210?D\204{\231q|\227i\227~\202\206\204\214\210Ty\237r\260\310>AU\220l\235\331\232\240H\266do\201\233\232\210\212[\213xipv\233E\235qe~\231\237\245\236\241\261\271\245sS[\241`p\213\210\212\226\227&{Oq\255rH\247W\205tAySvi\222r\244\304\263\226\201V\226$T][\213\200\200\265M\312\252Z\321lqnsps\204\223\311\230\214\236\222\\w\262\202\264\223\220\202\201\213\237]\211\203\302v~\226v\333\261\204\243\241q{Mf\245\241n\226o`{[c\246;\201p\202W\247\202vf\206flrNgY\220`|\215\231\225\204\215\213\230Z\260\232\227\205\212\244\226u\220Z\214\230jx\212\242\246\177}\325Td{\226X\230m\224\200\202\205\220y\231\210\213\243w]S~\214\177Uz|t\207\205\226}Z\202\216\216|u\213_a\232r\177\220uc\245{\231\201\211\210)\216\216cw\204lZ\272`tW\220\223m\211p\230w|\205\234bI{y\200xtu\216\227}\246\201\236\251z\223\201np\206\201d\203\202@\215{wye\230\202\220x\225\241\213_k_x\246\177So\202g\225T}{o\205\232\207\202\262iq\201\315p\203n\254q\203\201x\234\232\207\247Myd\253l\253hx\240c\245\246\205\256\217n\232vg\250q\245|r\234\212\202Nks\202\265\210\241\223\254\177~\233xj}\214R\232\216nY\216m^`p\226k\231PqZ\223\211g\224\230~y\250\220\210n\216~\221]s\210l\217v|\203\215wyj\234w\202gRCpre\216\246\211\213\233\205\220Q\266\236S{^Hpc\233|\211o\212w\204a\245}\214\215\213s\215v\211\200\224s}\217\200sg_\224\202kdy{\221\202\254pn\211\221\213\202e\226kzx\262\211\213\253oj[pm\224kcE|\256\216\217b\205yx\201\211p\232\315\177\226pi\\\215`wl\230\225n\216e\225j{\245zt\206\237\221|\217xup\210\235\220\203\204}\204uQz\201\225\200[fYt\227\207\232gCbz{^\200x\256\223\177\247\201]u\217Pi0xw\206\177\230\213\257\201Z}\216\277t\252pGHiuKc{Z]\227\227\177\226\210\217\177_\231y\215\247\177^]]ubeX~d\200\247}\210\231\234\211\261a\227]|u\213\204\211w\226\212\201\242\237\216\211tp\206;v\211v[@\224\202gl\203\207k[\201\206\206\205\213\211\223\272\211g]Uj\203\204sywx\230\200\207\227v\215\210p|l\200m\232}\260\233\241\211\252\217\203\245\243\215\243\236\247\200S\177\243_\223]\212^\206\245\314\246\177\222\234|\205\203cyw\245~\204\211n{Es\260w\200\205i~f\241\252\213\246lvf\203}\200e\206\245h\207\200\217\236al\246r|T\250\247W\230}d\227_+u\231\230e{\211\203u\204ju\203}\233\200\215\213\257e\203\\wx\234\205\210\202q{{^I|\210\214jRv\216gfM\214\200{s\236ov^\262N\220\237\231\267W\211\215\262\200\213{\325aZj]\216\203f\200]\234t\200ln`{l{cg\210lnrPl\241\201\227o\260\310Ip\227\227nq\211~}txg\216]k\206\211clg\203\211v\210\\\210\213\225\177\234z\213|}\204\211ge\224\215vx\212\\{ad\177\213\235iI}\230|\201j|\211\212\212\226[|\241~\206s|z\212\223m\206k}r\226\227\227v|\214xj`\250\255\236\210w\202\207\241NMj\205ya\313\217\202\177\217\232\252q\200]\227\224\177W\237\177rahl\204fq\207\201\200v\207wn\211lm\213b\177hpd\221g\225\261oo|\177Xk\244\215\231;\231\215\261\252{\233\226\247}\211\234fX\206\234p\204\237Y\212\204\204}\223\247\231\262\235|ivh|\234\204\206ym\231RZ\200\177\221\216d\217o\262[p\227K\214l\214wjxf\202nivw\203\245\216l\271\201\222T\270\233Zc\255xrX\210uw\221\224\225x\214\204`\200\201\245\210\257f\207zl\250Lmf\217\216y\203\223\217\221\202\222\212\232\207\\N\255\255\\\261qJr?>\245}\251g\221P\200\230\221\215\213[mMTEc\222dmy\231\212L\223\272\221K\254\226\255\202u\235rr\255m\205\215\224`\246\314t\225\201\304TF\233\243C\236\247t\253`\254\245?\236\254\220\336ffrnuy_nv\241\247\240\213{\200jz\251\177m\226qc\302\201\207}\224E\204m\213gnkfi\327\214\357C\252Z\314eJJ\220e\203\222\213\261\202PyuOS\251\233|\266e\251\226\313\212\251|\205a\203Ev8n\227\263|\231\266wu\231q~]\212`\204\207\236\211\202Syd\226\240\240\210lT\207eVUq\210q\201y\242\233\224wg\270Pf9\212\231R\254I\262o]tfud\266t\322Ne\266xt\243\204\301\243\200\235<d\332|ysX\225h\201@\210jz\326{\231~\310q\311R4\213\201\271o\200\214\205~p3Sw|\221k\255mLy\207~Ky\213s\177\256\261|c~\226\235^\232w`\216nm\306\240]\200D\213P\205]\\AlUq\333\324\235j\313\234BE,\232?\032F[\203\253\201|\213mm\246\202n\246o\220s\217\\\206~up\204\241Rvzo\206a\222\216xQ|u\231\213n_\234\220\256p\261Qs~\253\211\274rz\2204zj\201n\236X?]E\273\241is\204kbqSt\212\363c\251g*AlPkl\202\236~\227`\207\\\202\273}Zx\206\205\221}mq\226\235\221\237q\244\200d\203ov}s\221h\2033\243\241\211\247y}\242pv\202gu\241\243\277\246\215<Y\244{_Y\250\226\252\202\250\376\277\224\204S\266a&bwA:R\203r\226\235\\H\215_y\277c\270\213V]\210_\261_jLkwCV\214\216\207\215n\232}wt{\306[\205g\227\206\260n\262H\205\213\212\245\234\226|\211a\220*g\242\220]<\214\200qv\177\211xS}nE\234\211\217\203\301w0X(iq\213w\220ja\210\202\226{}\221dflrzv{N\275\255ye\235\210\242\242\255|\257\271\244\0345{\245\221[~\213\275j\274\244\217\224u\210yj\\,v\255\247~\221\233N]F{\260zuub\244[\221lyhU|*\231q\202\230u\246M\210\213{\207\204L\244g\202s\271\240\202u~\226\220|Gr\202\177zn6\276\202\217m\177\215V\233\233n\226\334\200\217=\201\212\261\244\221o`\246\213\\8p\236\200\206\211h\235\202\206m\204j\217\243\275}\212d\343b\257\265\214\243\207\241u\223ftS\263_\226\206w\271\256e\230\204\257vR\227\225T^Z\252Js\211fZ`Q\272\210p\235m\302\261m~j\243_\252`l\200|lqmTf\221i[(ig\200~\227I\233s\212\222\272p\202g\202O}e~\254\234i|\230itJ|\216h\214.7\215\220\211\207f\245i\230\206\333J\177l\205OHi\207\263\247\207\203r{O\201\320\217\201p\215Kh\202\377\315\233pr\244\212\267FArn\232l\277p\203\275\224v\316r\177t\\x|\213\215\215scGXx\202\240\230\267\206q\240\232or~kyip\225{[zN\214\205\223u\235xaM\206\302\221Rdy\226\250\216\302\251fso\264`vz\255\211i\231D\231hP\231\207\240\201\217\303QQbO\222\227\206k]B\270\210\201{_\210\262Pp}\226h\265\3120Upo\2249K_~\206PR\211\307\226\244k\253\2619GD\206I;\247]u\206`g\242\252\252q][\210R\234\265\267\220\305\\\221\223w\234Zq}\221\261\\~\232m\265\213h\223"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.886004507542
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.873945832253
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/convolution_eightbit_reshape_transformer/residual/residual3/MirrorPad"
  op: "Reshape"
  input: "transformer/residual/residual3/MirrorPad"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/convolution_eightbit_min_transformer/residual/residual3/MirrorPad"
  op: "Min"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_reshape_transformer/residual/residual3/MirrorPad"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/convolution_eightbit_max_transformer/residual/residual3/MirrorPad"
  op: "Max"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_reshape_transformer/residual/residual3/MirrorPad"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/convolution_eightbit_quantize_transformer/residual/residual3/MirrorPad"
  op: "QuantizeV2"
  input: "transformer/residual/residual3/MirrorPad"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_min_transformer/residual/residual3/MirrorPad"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_max_transformer/residual/residual3/MirrorPad"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_quantize_transformer/residual/residual3/MirrorPad"
  input: "transformer/residual/residual3/conv1/weights_quint8_const"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_quantize_transformer/residual/residual3/MirrorPad:1"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_quantize_transformer/residual/residual3/MirrorPad:2"
  input: "transformer/residual/residual3/conv1/weights_min"
  input: "transformer/residual/residual3/conv1/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_quantized_conv:2"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_requant_range:0"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/convolution"
  op: "Dequantize"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_requantize"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_requantize:1"
  input: "transformer/residual/residual3/conv1/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/residual/residual3/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/residual/residual3/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/residual/residual3/conv1/convolution"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/normalize/Mul"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/normalize/variance"
  input: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1/shape"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\343FQ?\345\224Z?\000~u?B s?m\300V?D\2070?\321\202\212?\200\274\346>a%`?>7\021?]\330\203?\247\307\367>\266\247\302?\277\364\251?\212\355\253?7\222\211?H\326[?\002Rd?\366\237u?!A\245?\032\010\032?\226\007\221?%m\260>\352\224\214?b;s>\240\020\204?\277X\257?R\345Y?\2134\246?\312{\206?t\224[?9\264t>&\346l?\323k\224?\336\200F?\033\032\246?Q\007r?z\212\220?\313[\356><\'\223?j\375\367>zK\213?H\326\213?(\007E>%\334l?|\360[?\327\323R?\256\367\204?Z\267\220?\346M\234?1\320[?\374\2462>/\261/??j\277?<\020,?\353\336j?W#C?\221.\243?M\377{?M\225\214?XI\215?1\311x?\317a\177?\200\362\257?\306\265s?9\021 ?\261ZO?\212\373\325?\356\331g?I \371>%\217\252?t\330S?\213]w?KG\227>\216\r\345?\237\243:?I;\267?\311E\205?\275\300\211?\234\036E?Tm\216?q\273\243?\205R\212?V\001M?\326\023\370>\245\235\252?!z&?X(\217?|\351(?\336z\007@\003 \244?U\022\242?xq\250?\300\216`?\231\031g?\036\2273>\013M%?\016?\245?\331\261V?I\304O?\030\254;?;\332k?\255~\034?sM\211?Z\3540?\013p\252?,AX?<\336\216?`\251\371>\326\247\223?\226_<?\334\010\303?|L8?#\032w?\312*g?G5#?\256\013\253?3\003K?6\317_?-8n?\206(`?d\006l?\335_\256?\301\031q?\262vq?\265\356\232?\340\205O?8!c?\r\205\r?\013\325 ?\357\326/?\304\002\220?6\315\216?o\' ?\355o\177?-_8?HQ1?fb\034?\001>\237?8\'\037?3\322\214?)\362\311?B.\261?\004\213\205?\256\303\014?\302\362x?\034?\213?\324\364\204?h\000)?\216i\237? /=?2z\231?\020l\206?\367!\273?\356l\210?\310k]?\213\262\252?C\304h?\243\267\207?\325\366\277\273\207\300M?i\246N?-\330n?\200\276C?@\212\201?Tf6?w\010\303?.p5?Zr<?\214h0?\216\214]?6d\211?;d\242?[\262|?\376\346\243?\300\251\\?;\033E?\177k$?\247ZV?\276\002+?\321\217\002?\024\260\304?\034\332e?\200F\224?\263?\225?\035\013j?\ni\237?\330\216\260?\003\315\214?\267\210x?g\241[?\226l\032?\247\344H?\200\272\023?\017t6?s8\265=\224\261t=r\003/?O\366\201?\243\266\'?;y\301?,\203<>\325\316\243>\345\036\300>\330\322\357>6\225\003?\3504\225=5Qp?3\226\004?e\212\236>\030\246\236?\267\311\026@\347\3758?\242\244,?\214\231\016?\365\3235?\232E+?\010\316f?\373\276\220?\027\320\017>\372\000\356>\271\'8?\240]\005?\330\241\365>\356\013D?x\257\\?\216%>?*\267\213?c\342\237?\276!o?e7\267>\377\264\210?[\212\226?\2516\257>\035,\242?XW\020?\377M\263?\211\004\017?\216E\234?9U\200?\273]D?%\2034?2\362\202?\t\370M?\326\2003?\242\374L?\231\334\024?\201~\202?\341x4?0V\204?\016\322|?\262b1?\"/u?\211\257u?\245\330\225?C\257q?4\177\213? \\O?\306;\203?@u\305?\260`g?\201\227K=\257\017t?\271\345J?|8#?\003\301\363>\267\247 ?\260R\007?+4\024?\214\036x?b\022\215?\001\373\213?Q\250\360>\016\031\267?yP\200?\212}\237?\301\304H?\350U\221?\277\020(?\013Z\215?V\250\332>6\261\326?\334#\301?0\372\213?\264\260\221?\3413r?\226\034n?\027\nm>\232\024H?\271D\022\274\336pS?\024\357\213=\242\277\177<*\262\234>\320\"m?\207\276\320>w\302\223?\343\266a?\215\r\365>\200^\007?\025I\340>S\352\007?9O\277=3\r\313?\352\247\210=\033]]?uYa?J)I?\342\351\206>\222\000\204?`\250\325?\037J{?:k\240?\341\373\305>\263\221\321?\235}\027>\340 \353=\222T\303?\373L\243?\362\304W?\277\r\203?\253\022\205?\266\2679?\2656\017?\000S3?{\224r?\307HQ??\013\235>e\366\\?\217;I?\007\317\031?\210\032\246?L\203\035?\356\222\227?\334\332%?\336\207z?\026\244\237?}J\243?\251\305d?e\261\201?\233 X?\014\303\300?\310\344;?\206]\263?R\2313?,\252\224?\031\324\242?\350\013\376>\237\371m?\221\334\213?M6\216?\312\323K?<\357m?2&\374>\257\377&?|\231\210?1\222F?\311{\001?/*\032?\205;+?\014\260Y?\215yk?L\014\201?\r6Q?r0\304?\246\254t?/\370E?=\177\215?]@\242?\006\227O?U\313\203?\252\334\202?\357a1?\257a\247?km$?\005b\203?\331\203r?I!\250?x\231\267?\207\000\250?\222x\224?\335<t?\332\362\205?]\002\245>n?(?\274\243\207?H\234_?%\343\213?{\240\200?\323\374:?\033\252\207?\377\255j>^\016s?\0330\025?\024\312\210?\333\256\203?\354a#?\363\013J?\336\225\235?\245(~?L\345]?\036g??\372\320\210?\302\030\251?\326\273H?\271\235\214?M\352\034?\203\365\226?\235\367\206>\314\237\212?\265/\250?\230\271\375>FH\245?\223\260\240?I-J?\t\212\353=\264\342P?\351\000\224?\031\275B?\370XA?\000\214\223?\322\243;?O\007\203?\316\022W?\311\272\350>\230E\241?g\324V?\027xB?x\034\234?\342\371*?\034\356\037?\340<\250?e\325\252?C<[?\311\214]?Q\2231?\005\3356?\017\357\304?\3057\360=\224\206\241?a\207F?\246\270%?%\276\263?@\037M?\230\202m?^\322\215?\221G\213?sp\033?3\363\227?*\032.?\321r4?\360- ?{\271b?\372R;?\317\265\031?>\351B?`\200Y?\3420\372>\362\270\037?\307D#?\376\021\203?\373,b?J?\016?V&e?8q\201?\300\344\256?\035el?\376\001\226?c\233L?\200F\245?\227\353\246>cY\230?\341\251H?-\243\243?\241\007\312?\216O\004?\217\231Y?#\307K?O.\r?-\317\301=\004=f?%rV?\203\'R?J\251\234?=**>\214;\312>\037@\254>\323\275M?\307\271\263>\365\201\025?\2329\376>\230nJ?y\224z?\335\330\236=\276j\200?\364\212\267?\t\311\003?=\203\323?W\001j?\365x%?\340\245\212?5\254\307?p\356\217=\360Y\264?\177\017D?6/\301?D\363\273?\013\022)?\021\007\211?\231\020\263?\201\337\r?\023/\342>w\337K?Aub?\276\3212?\0033O?\267\t\205?4\365V?#\274\246?\005\200+?#\006\034?\332~\324>\272,\257?\202}9?\204\273\n?*!\033?Eb\223?\357\374i?\337\370\221?\210?5?\316\364\202?*\264K?\312\212Y?31\321?\036\342#?\326\336\205? \243\270>:q#?\2549\247?\336\033\326?d\013L?}j\273?\234\\R?\262s\203?\0074\205?\264\272\311?EG$?\t\020\n>)gZ?,b\370?:|\r?2\002\223?-.\205?\020w\007?\260\027F>C#\360>sE\373>\023\225\034?\273\022\000?\t\261q?C88?\365\030t?\3779\210?%\243o>\263\234\266>c0\300>W\177\277?hN\212?+\2362?nME>!\247\306>\027\345G?\214\320\305>\301\003N?\211\226}?\377{\253?\353Z\246?cO\363?\305\014\030?MQ\303>\270\232)?\350\257\320>c^\036?N\342:>\177\320\263>\275>\221?\274g\333>A\217\323>\026n\310>r\315\021?\247\232\003?!\333\345?\371\331\267?h\256\201?\263\373\337>$\340;=\354c\270>\003\242\236?\370-\276=\354\327\\?\324\261\010?\326iF?o\345\255?\266D\312>\302\367\">\333W\273?7\006\"?6^\242>#\272$?\320\310B?tP\210?:5\'?\037}\217?U\'+?\032\n\333>A\032\017?\364c??\362_<?\222\206G?V\343\337>\2664\026?xI{?\371M_?\037-\216?f\367\224?\023\347\215?\342\243p?Zw\014?Q\177k?\274y\312?\367\270\310=lc\216?\216\237\231?\302K\025?\036q\270?\354\322\231?7\366\334>m6\242?\311\343\205?\325\t\372>&\003\037?\242KW?\370-O?\267\272&?>Ja?cJ\207?X\310c?\223\267\200?\030\026\351>g=*?\270f[?\302\243\227?\236\270\213?\004\023R?\326\276h?\250\263C?\357\2776?3M`?\312{>?\337\325M?\344Q\332>uW\255?\220\331D?\003\365\212?\251\232k?\343\034\236?\212\340\271?2\017\226?\"?\216?\313xb?\226v\206?\262\277\357>l:\322>b\007\230?\177\247%?\237\356\203?|\261i?O7\200?\222\337\311>\235\367G?e\241\030?:\300v?\353\325V?(b\211?\246a\177?\243\233\303?\336\201*?\250\314\224?\321\310\013?\362\247b?\377\r\214?\350\240\267?\020\346<?Q:\205?R\263\303?6F\215?\323\303\324>vi\240?i\225\215?\224\224\226?\273I\203?\236b\215?\346\300\274?\"\315\336>\366\204\232?y\307~? KU?\332/\230?\023\003\232?c\010\017?t\006\304?c\302\001?\340\327L?\316\250\330>\266\302\210?\371\273\210?\235n\332?f\244v?\274Xc?c\354\206?\324K\251?\354\212]?]\271\224?HUI?w\312\t?As\312?~Cx?\3519\224?\n\030\307>\221\313\302?\222\274\247?l\254_?\371\306\226?o\317\251?\354\3609?ScC?\377\311\025?`\246??\304T\000?.\377\315?(\311\352>q\t\270>\023\033\230?9\346A?\260_\260?\005t\303=\202N\177?\344>E?\354f\236?q\334\221?\262\354^?\266\317G?8\002\366>\035\034[?\373.\306=\261\252\271?\351X)?=K^?B\024b?Q:x?F\216\337>\324it?\267\333\217?,\036\022?\202\307.?J\3561?+\ny?\037\321\312>us6?\344,\016?gn@?E\272@?\016gi?c~\035?=\020\204?\372(\350>Na\211?)\177\014?\365>\241>\236\221\214?\237\375\035?tQi?\207\301\257?k\225\224?5\255\374>\t\037\220?\253-,?:\375\254?\206\343\364>\312\341a?\361\025@?6$l?\001\246\235?\313$\220?5\r\336?\267$6?\315\027x?\030\357\212?\025\253m?\325o_>\215I\200?F\233\211?\327C\210?\302.\351>\213)\025?\032c\365>\332\026\216?\273\220\030?Y\374J?P\213v?\007\221G?\035\243K?\225C\206?,5c?\207\271.?\247\224\244?\320V#?\336\347\201?\336\373O?\377\000G?k\230\022?\375\345\256?\300+\370>\352\201t?6x\210?7\237,?\376\344\267?\2704F?\250\352[?\354\211\244?\031\346\210?\275\200\301>"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_1"
  input: "transformer/residual/residual3/conv1/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/residual/residual3/conv1/InstanceNorm/mul_1"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Sum_1"
  input: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims_2"
  input: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual3/conv1/convolution"
  input: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape/shape"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\217\004\201\276vq\317\276\336\331\311=\215O\210\276|7\225>\020ud\276=E\227\276\035)I\275\233\355\232\276\3543\373=\330\362\247>\215\263\256>\204\372\366<\322\303\312=\252\005[\276\rt\354\275\234w\217\275\273=\214\2769\313\220\276\205\321\220\276\225\3052>\002\201\022>m\367.>\210t]\276;\300\327\2764\277T>\224\351\274=\213\222\004\275\253\356\377=V\233\300\276\223\223B\276\000\234\231>\353\361\244\276\253BQ\276\360+\005\277T0$\276u^#\276\272\215M\276f\313\225\276$A\023\276K\200\201\276.I\003\2763i\211=5\367\273\276:\253\277\275\330\215F>T]\303>\234\253\007\275\263\260\017>\322j\360\276cE\352=w\021\034>M\222:>\267H`\277\277a\202\275\007\025\007\277\035v\356\276\343S\237\275\361\333\263\276\342w\031>\003\313\221\274\2639Y\276\276\035\006\277X\334\377\276Dvl\2762\304H\276\n[\213>\261\305\026?#A\245\276\002\333\330\276\245S\371\275Q\262\275\276\350(\364\276\251&h>\260u\347=\250\325\301=\307\240\220>\314\315\004=\352\305\003?k\347\003\276u\213\257\275\253\351\305\276\277\367\200>\003\254\255\275i\264=>\260{\214>\242\304\273>\017\257\247\27623\035\277\nA2\276O\350\274\275\357\235\304=,\333x>\247\226B\274D\323\362\276\022\207\032\277\216\316N\276\354n \276\305\214\275\276\020\272\\\276\211\376\003\277f\340\320\276\225\276%\277\215\350\371\275\213\212\355\275\247\003w\276/\365\372<\264\177F\276\235B\205\276b\240\t\2776u\337\276/V\262;\314\034\325\276+\223\256<\335\\\367\276\372Y\244\275\3413\325\276\342\342%>87\010=\242\177\304\276=\370L\275:\204~\276n\200T=\021\177 \277y{\230\275\315\001\275\276\257G\271\275\237\267\206>{#e\276\237\367\000\277$\014:>\275c\357>\254\tO\276\000\321\250\275\031\007\037>\200\0206\276\037\'\353=\375\303\213\276z\211\351>(\327\301>40\250\276^\rq>\374\246\200\275\351\325\034\275\035\335\227\275\266\244\020\277\360\366\005\277\236\233\020>o\337\231\276\266\336\230>\216\360\301>\326\366\327\2762\230\251\276\'\216\233\275\321S\000=\261\341\007>\274%b\276\263\007E\276\375\244\211\276\\F\300>n)\276\276f\360\232\275\204Qx\276z\335\024\277Tp\272\276:\346\037\276-\032\r\277\240\367\262\275\021(\321\276`\336[\276%%\033\277\300\236\315=\245\317\006\277\225\225z\276\273\256B\276a\035#\273\221\240\236\276B\205\252\276\020u\240\276\355\351\030=\315~\360\275\007\205\244>^\361\360<\244b\200\276\014\211\007\276e.\241\276A\260\274;\213\353\362\276Z\321\243\276\301\333\236\276&Kj\276\231\t\024\276l\361\243\276G\374\264>\'\216\334\276\3347?\277t\240#\277\014\347\025?\340\260\337>\320\357\260>!jb\275?\317r\277\212\342Y>\345b\324\276\"\312+>\364hT\276p\3067\277\250\215\"?\275q\326\276VKB\277\263\310\027?\r|\201\2771>\347\276#_\232>R\265\027?\244[>\277;\036(=J\222\274\276\375s\000?c\324,\277\034\375\213\276m\'Z\276qX\335\276*\002i?\030\373\230\2765\256\274\275G\034\375<\342\002\250\275\214\221\220=\344\257\306\276\256`\336\276d\025\016?\347\365\324\276\233g\270\276\256\004R?X}\254\275\202D\200?\356\335Y\276\355\232\374?C\t\026\274\373\372\210\276]\205\363\276J\346\240=\007\\1?9\235y>\005D\024>\271\313\214\276\342|\314\276\200\303\217=\362\222\207\276\320y\310\275\007\344\306=\3444\005>\324W\215=\324\354\243<\316\321x\275m\240z=n.\205\276\307zL?+)M>v<\227>\005\340x\277\345\226\325>$\305\304\276\201\326\'\276U;\021<\265\0252?\367[V?K\210\342>]\201\200\275\375\226\240>\216e\n=\335\234 \277\374\270\026\277\203\023\021?>w\027\276\204 d>_\020f>uwN\276\373\312\304\276\032\'\323=\217\307\235\276\307xH\276E+\316=\274K.\276\2141U\276\216\004\301\275*:$\277\005\177\210>\365\213\301=\3030D\277\003\232\314\276j\216\363\276\372\327u>\230\305d\276\324\003\361\276c?\210>.uE\276\355\303\347=\\i\235\275#\312\246>\245B\201\277\344\244 \277\316)5?a\340\003\277>\323\376\276\2523\316\276\303^\237>8\2236?\273\200y>\005\032\225\27672\005\277P\271\332\275\010d\024\277m\220\020>\313\017J\277\207q\031\2778=+\277\026\240\034\276q\212\204\276\327E\000>z\336\265\275\227b\312\276\031\\\317\276\355\331\000?K\377\036\274\356\177\030\277\337G\203\276\314\234\371\276Y\313\304\275L\210#\276,\234\301>W\r\210>(\360n>\002U\031\275L00>\036\223\227>\207*\260\274\242\211\256\276\374\374>?}3j=g]\215>\022\350\t?XC\274\276\214\326\364\273\304\360w\275\225\232v\275pY\215>\336\3165>\322\312\211\276\333K\225\276Yd\336=\314\322\357\276\235b\207\276\207\360\253\276\314%\356\2761\250\216=v\000\t\277v+[\276\312g\206\276\376!\271\276\006\254\256=r\206V?J\277\242>\2336\005?$\236\223\276\2719\241>\230gF=\206V\213>f\2447\277\276\002U>)\242T\276\260:A>\304u\312\274@\001\265=f9$\277\300C\320=nz\200\275\267R7\276s\215\214\276\337/\263\276\217\236\024\276_\306i\276c20\277b\375g\274\351\216\216>\022\214\237>.\333\251\276\332\246\260>M\226\254\276\221^\245\275G\'\n\277\371\253\367\274&k\344\276\276\303;;\030\246\217\276a\320\n?\236\367\322>\006Pv\275\266\302\243>\215\303\230>P\376.\276u\363\016\2774k\214\276\240\350\347\276\r\230g>\203\3205>I\377\033\275ei6\277\014~\270\276\264t\307<#\265\375\273\026&\267\276\207\377\256\276\305\361\234\275\n\277\227\276\206\247\240\275\002\002\253\276\257\306X>2N\206\276 `?>}:\375\276\361\000*\277 \004g\276\275\0179\276\344\354@>h\034\017\276\217\360\266\275n\264\235\276+\375\220\275\024\362\026\276\306>\236\275R\201M?g\202\331\276\270\rX\276Y\336\260\275 \336\007?j\263\240\274\376\303\032\277_\275\226\276\277\242\327\276<\"D\275Aq\203\276\223\022\206\276\375\033d\276k\257\361\276eND\276k=s\276^\270\306>\255\343\214\276\2549\212>\022@\223>o\222\267\276\010\216\346\275\236\254\300=0n@>\250-C>\246[\234>-\037Z=^f\257>m8\305?\354:\206=\233G\004>\254\3257>\306\206S\276\t0\302\276\216\200J>\224p\032=\274\215\344=\022w\275<\3011\351;\352,\355\275\2756\225>\366\220(>\266\265\315=d\0001>\346X\254>\371\032\273\276#\210\215\276\300\227+\277\356\240\362;\265L\247\276_\244l?\213\234\202\276f\326\347\276\353\274\273\276\217h\341\276\215\250\017\277\347\332\235\276\207X\236\275{\375\363\276\235\023\351\275r=\025\277`(L\277\222\361\223\276\277\207`\275\277\244\365>\002O\350\276KM\024\276\311\251\257\276\370z\272>\363\332\313=b\246E\277GQ\212\276O\331\340\2742\321W\276\201\376\204\276\201\277\237\276U\201\200\276\022\350C\277\273XU\276\262L\313\2767\235\207\275_\007i<\342j\216=B\271#>\016\256\334>\362\225\235\275&\003\221>\314jx\276\230\240\005>\000\275%\277,\332\021?:\315\021>T\3510?\366_\t?\033\217\n>\307\r&>]\251t>\263r\300\276~\261\213>y?\241>C\317\202\275\322$\350>\323\240/>e\\\354\276\344\2348\277\032\324x\276\340\244\226\275\207\030\217>\314\3114>\320H\353>\273\216\266\276\333\351\232\276\220\315\230\276\024/\305\276,\'\366\276\207\300P\277\r\322/\276+0\010\277\247\211\027\277\022<\355\276\321\210\352\275\306g\221\276g\031O\277\026\004\002\277]X\t\277d\202\201\277\261\251\031\277/\002\217=c\230\235\276\367t\034?5{W\276\013\031~\276\035\246\263>p\276f\277\301z\034\277\030\017\270>GF4?\216[q\277*\027\256\276; (\277\274\t*\277\327\2272\277\256\237\351>\327\337P>`c\005\277\022S,\277\317\372P\2760\233\n\277\345\032\316>\254\353\237\271\251*\014\277\362\032\207\277\306\t\337>\243\245\221>&\360\360\276>\337\032\276.f\014\277\333&\257\276P?\307\276(v\233\274\314\301\013?N\352\034\277W\312\332\276\343:/\277\037\037\013=\225\204S\276\237\0056\277\275dZ\276\311\023\253\276t1\324\275v6\211\276k\236\267\276qO3\277y\315>\277\311\302m\275\352k$\277~<\371\276\034\000\n\277\351$\'?\207\235\207\274Bx\010\275\365\n*\276\224\237J\275\336/\250\276\374[~\275\330C\315\276y\277\030?\351\347\215\276D\021X>\307\034f\2761\213E>\n\300\261\276\360\232\237<\254\017\317\276\223-\274\276\204\247\021?\315\334l=z\017[>\373\367\006\277\224\304\203\276\305]\360\275w\177\212\27673O\276\322\2610\276x\350\264>\374\257\213\276K\"L=\307\006\340\276S\333.\276T\021\332\275wH\310\276\024\227\215\277\270%0\276\320\313\204\276\023O\202\275\220k\226=\004\002\307\276\316\ni\276\323\240\032\277\\\207\272>h\210t\277\305<\250\275`N\031\277L\017\246<\222g\257\276\235\030K\276:\247\n\277\007)v>a\241]=\2633\013>\200\244\031>J\257\026\276\362\274\210\276\211<\201>\304`g\2761a\331\276\003\366\273\276\213W\337\275h\277\241\276\254\203\366\276\333\025\357\276\264\356\337\276\262\327\007\277\334\212\224<\340!\001\277\342\351\334\276\224G\'\277\037\243\344\276X\260\232\275J\344\261\276\300~\267<\024\001U>\260\305\333\276?\264\001\277&\027\034\276qM)\275\305Q\203\276q\243\266\276\225\340\374\276\001\360i\2768\035\374\275\374\031\345\275o\211\341>)1\200\275E\367M\276\317\023\226\275\003\272\344\2712z\331=[\3664\274z\005\315\276\331\313R\276\221t\363=\022y\233\275\352\210\024\276\217?+\276\273#\311\275G\036\243\276\220\340\246\276pU\233\276\310\376\273\276/\352\325\276;\352K=\217\035!\276\027\210\252>V\357\023\276\262\343\344\275\346\003\341\276\000AF>\311\232\013\276m\264\263\276F\030\345\273t\302c\276q\271V?#\223@\274wk\215\274\357D\236\276\"?\335\276*}\006\2766\336\003\275\334\r\235\276NV\376\275\322n\251\276\360\002\205\275+\032B\276\261pq\2764\372!\277C\267z>\007r\276>\t/|?1(\365\275-\263)?\3376)\277xAX>\355\357\330\276R\030\007\276pEO\276\364\357\024?E\305\023\277]1\240\274\253\341\341>\030{\201\274?WM\276Y\034/\277^\215\210?\007I4\275\030se>B\345e\275;\273K\276\373\313\226\276\252\301w\276\363}\244=\235\202!\275\035\352\250?\214\'s?=\002\345=\300\'\216?\036\361\r\277F\274\374\276%D\235>\325\2103\276}\007\013>(\236;\276\220\211\201\276\203=\234\276K\004\024>\033\277\202\276\372XK\276\237\354\347>{Z\341>C\305i=\026\0254\276\370-\310\274\366\025\251\276VQi\277\342\004?\276g\325\237>\314\016\326\276\177\374|=V~\222=\315H\024\277?7F\274\261\\)\276\332)\200=\215\377\t\2751\301\007>\331\216\027=5\273\340\276\332%\010\2775dC\276\354wp\276\317\306x\276z`\376\276\023y\334\276\024eq>DN3\276PQ2\277\374\230\307>\"\032\264\276c^\304\275\007]\344>\342\352\232>\373\320\272\276Zq3\276\377|\036>\010\346\310\276\234\031\362\276Ap\276\276\226\007)>J\334E\276x\330\224>P\314P=^\n\t\277\344.\356=GT\370\276\021M\237>V\0163\276;\2348>y\\\305\276\243\350|\274{\224\354\276"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Reshape"
  input: "transformer/residual/residual3/conv1/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/residual/residual3/conv1/InstanceNorm/mul"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/residual/residual3/conv1/InstanceNorm/Sum"
  input: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims"
  input: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/residual/residual3/conv1/InstanceNorm/moments/normalize/mean"
  input: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/residual/residual3/conv1/InstanceNorm/ExpandDims_1"
  input: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/mul_1"
  input: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/Relu_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/Relu_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/Relu_eightbit_reshape_transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1"
  op: "Reshape"
  input: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/Relu_eightbit_min_transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1"
  op: "Min"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_reshape_transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/Relu_eightbit_max_transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1"
  op: "Max"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_reshape_transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/Relu_eightbit_quantize_transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1"
  op: "QuantizeV2"
  input: "transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_min_transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_max_transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/Relu_eightbit_quantized"
  op: "QuantizedRelu"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_quantize_transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_quantize_transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1:1"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_quantize_transformer/residual/residual3/conv1/InstanceNorm/batchnorm/add_1:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual3/conv1/Relu"
  op: "Dequantize"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_quantized"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_quantized:1"
  input: "transformer/residual/residual3/conv1/Relu_eightbit_quantized:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/MirrorPad_1/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/MirrorPad_1"
  op: "MirrorPad"
  input: "transformer/residual/residual3/conv1/Relu"
  input: "transformer/residual/residual3/MirrorPad_1/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "lnjeW\203?\224\203t|Xexh\267ll\205\220v\206jmZ\251p\222\225\250r[\224\213\307p\230\207\243\216}_hy\271\\\255\213[\211~\203\210\225\177\304\310\226\222j\241\202\222RTF\221\216Owh\226\177v\216\233\203\223Xkw\215c\235t\245ZUw\224cxnv\231akV\214it\226q\235~\210~\242\222tq\230W\225bwi\226O\231p`~\206\205q\262W\206\226k\217\233O_Z\220i_i\250M\227\206\201\177w`\243t\212\210un\232}w\214x}x{prs`\223\247\225\243\221\231Z\221\213\\q\200\177\246\206\200u~\223kvyaft\243\206\211jyde\242\202cu\245fNwu_mk\211yfy}[mw\217\241klgoaNpb\177}\230\217p\\}]\213x\203\204a]tw\255\212[\230\205\222]\201j\204\221\203\265\214hv\206\177yfs\211\243{\211p\177Z\212rk|xybz\204\237z\205\206\201\212rqPwcL\227q\203gy\211Y\221v\206t\200\210pn\257\230]\226\233\234iv\246urod_|zW\237f\232i}Z\231\225\212\207\211b\255{v\206}jp\203Z^\204wxz\212\247gx\225\241{Vl\205{deh\203uc\210emdNm\213\210h}\205\216R\201]t{~\205\203V\222y\220|yq\244du~\2008\275x\207D\202d\206seW{p\200\247[i`mj\235\200\205\211\232x\254M\201\216\201\210\203\215[}_c\200\212~\203w\220\233\235\240\\km~bu\223}\210\216\215v\234j\203n\253r\252g\213V\177C\\Lize\234b\243M\237\201\250n\214\205\223\222|fqy\210P~wtm\230\202\200\230~\241\263\200\205]\245_lOl\232\224\201eapr\203tr\223uYp\222^^\213\203p\203\253Yjq\200r^z\203vnqzrwy\242x\224iu\222|ss\203\203\201\221\230\243\216r~x`\214qfq\205etc|{vZ[Qp^\211\210^zc\217M\200Jb\211Y\207\207_pvu\235\202\252gx\206\221_l[s\205aF{lwv\177\215y|F\215\236\207r\202\210\302`{\225\177j\202\200N\242vp\201c\216wd\210qo|Uhe\\\201s\211\231`\177\\e\206zytsw\236\201\216\211\247\205RK\227^s\242k\203\202\202\205}kuxv\340]\211X\216\217b\213c\225a\211\204{g\223m\207y\227|\252ys\234eX\232x\222I\225\236}\216P\250\237y\177\260t\235hrXvOl\240N\253\202\212\210b\211\220^gs\210ly\272\233\231zso\253j\255\204ic\211\177\203\205}\237v~\246\204f\202\177r\204xx\215n|\235k\177f\217\223Z\202jeuNx}\202|\205v\212^\270y\204r\217aV\210~\212Jwz\202bhr\231\204w\204b\235k\243wVW\201H\250\202i\243\220\217\227xh\222j\305h\205\245{\226e\224L\2240k`btX}d\207e{\272\222\211~dgrs_\207m\2013\247k\202ud\212\206\202\211\274^yH\215\227F\221\220y\214v}\216zq{\2237\250svW\207o[UUvl_\213\235\203m\216n\203\220~\204\225\226~kc^]El|\\re\177[v~w\201t\223z\253\226\255i\234wrV\215ij\177O\224kl|`\234\215dz\232\201T\210cj\177m\236\211r_su\210iru}f\262\201\230\177\233}x\215epuc\254p\241\221\214\221lm\203\201h\217\177}jm\217{\206f{\201\222\202hqbs\205s\221m\204|\204l\200\216\251k\202\212\221\213_\231\222\207\234psqkm\206f\212\206arqf\231s\214\235|e\214\244|\207\204tx\220Vidy\207e\\}\226w|\236\207\202\207]z}\200t\233}\226D~s\220T~rk\242fvM~whxw\221|r\202\214\211{D\214T\230nrx\204M\211T]\231|kf\206w\201|Ip}sT\177\222\216yz\233X\230\227\223\177jrv\207\257~\177d\227\211\243\212\205\217tokkwf\215\225~\221\222|qzgy\177ux\213u{\177k\177s\203temr\214\227\207~tyh\261\177m_\227_dp\212pr\213\200o|\217kd|q\205\243\177JgbsY\215p\200_\207yrMsu\202lo\213i`\201\201\235\213Z\204q\177if{l\205\207\250\204mu\233\215yv\203y\216\202\212n\202]\202hnz{\202u\212\200\203\212|\223v\214\204{i\207\224U\214kexq\201g\210k\250v||\200o\251\210d\231\231\231naxr\177\200qn\201uk\213p\222o\222\\\217\223\212\211\177[\237uv\216}ap~jw\177u}w\223\252bv\203uq\210d\202qSo\216\207\206sx~rw\233g\211wx\203|\177l\204l\210zl\207k\205\214\201\215\206or\220su~\177=\222\205qiqZ\205s\202l\201[\200\204mu_T^\230h\242\223y\203\242B\243\210\206\245\213\232ju\200os\235|t{u\263\200\215Z\201[\206f\237\230rs\215\212~\223hrn\211\212\177e\211zzqhku}y\217]nl\254\203\202\243q\203Y|hzl\222~Tsow\217w\213\245\225Y\212\240z\210k\212{\211kp\177zc\177]xgum}s\214xV\206Yy\225\207T\211\217kZkg\177W\204v\232bmvo\221p\241|uvw~xut\211\230\202y\223\230x\205l}_Q\212W\221qZ}\213so\206Udtc\225\221wi\206w\245I|Q\202_R\204\243wc\200\201\225k\235h`k\200Vy[\220w\202fx\224]as\214i\212c\233\231\200o\236\211\215u|\252{\243c\222f\241\215c\201MZxh\214xakaeibx_\227\214D\206g\200\201s]w\211\213\216\222\233rc\211\214~\201j\\\211v\214\232~\213z\202aYN\214_\232wm\232`ot_|\201{\205|\204ewg\204\221\211tp\177xkotz`\203\205[fq\217\204qx\204\205\222{m\217\201`\210cugn~\207egp\211q\221s\214k\224l{^\230Wvy?\213aesx\200o\206\241\200d\237ri\221\206z}{musw}q\206n\221\214\207\220xr\210;\236l\214`\246\177|\\\261k\212o\242\214i\207h\224\204lZ~zdfx\212d\215y\250j\250\330jILp\207\215s\217h\225v\202i\211l\233rr\217j\227k\203_Jgsy{bMp\215|\207\241\244\214\222ouyb\203\200\213vt`\223x\207vz}q\221\212\223k\205H\212\200ms\244\201\203~{u\201|\214\235V\233ts{pk^]j\212ff\215\202\232\203|\206i\241j\225\211xnm{|h\211Wu\221kq\231f\221\216\222\206o\215\221\257\234rc\212~h\200v\227\222^rvn~x\177\200\211g}\217rvn~\207\237`\237\214qxrj\207~{zng\223w|\211wuqxmjpZ|~\205\221\177u\211u\223d\211\204\205\204g\214\227\211\217\223r\235>\221Tye\200r\205\211vOy\222\244\202\222\251J\225L\264mh\260\212|kqoQ`\234\214z\234\205^p\214l\235r\243\231\221\212\203\212h\260\201\202v\200r}v\203\177\201p\213wns\220gy\212es{]\202\244c\177`~luo{\\ciTk2\240\207\203\250\177\225\206dr}\213\2379\2039\271~iv\204EnLI\240xE\200j\204\207{p\213`yn^\227yj\215\230Y\246\207\211\215|\204w\241\256\210\224B\276~\241\211t\200\206u\227\201\230W\233V\223\237\217\206Yu\\czp}\211Wu\224gy@\240dbJ\177\201\246\250si\215r\234\217Cc\272Tip\227ly\220\203n\201\223\\\202\216\220\200\270\2371oi\230V\213\234\215e\223k\276wxvS\202q\206i|\205\200suynhP}Rhde\205\250gu\200\227\200\211y\202[\241\177\214b\210d\223egs\202r\213q\205r\213~mof~\210\204\177\177X\216ga~\205\243r\211V\210\224\200zry\231\220w\211\177z\206hi\200\236xlk\223qn\267w\236{\235Z\217\237\231\207\203;\237\201\200\204\210Rt]Y\200xz\177u\210\206j\230~g\202~b\233\227<t\210\221\206smvxn\226z\213vop\213~i\210vxsB\206r\224\251\212\201~\202n\202\210\214\202\205\017\235\215|\212rK\216c\177ohj\200\230q\177\200q\222\216S\232]\214\201\207\'\202\177}\237\212\223yylD\216pZ[\241X\177~aj\240c~\211\177\210lRwjd|ag|\215\\\231y\217\260~u\204zgj\201XiL\200\270\214\217\251p\202\000^\224v\206\231mMn\220o\215c\222x\223zwsn\235k`a\204yr^qy\235o\206u`y\212`\215oxxSv\225\216d\227\214}xkc\227w\214_~qxds\214o\230\200b\203mXo\215||\224~_\257\226\177\212x}\203+\204\214~|W\205ly\200\226i\205xQ\212ufo\231q\2112}Dh{h\242\233\225^\213\223gv\201vL[ax\204q\217\214bLs\236Ux\220\216t\236|\232\265\2137\233\235\231Ms\235w~b\251f\230\211ol[r\202t\233\204ad\201t{h\205`\274\207M\204r\216\227qT\203\211\245\204\205UQL\224\213t\202\263Xmy\217\240\217|\250t\177\1776\203\201\221tH`\247\210\277y\222\200\214\200\222ymop\233\236\225jj]}mg^\211H\231wYs^\242Z{^\203uih\217\234gU\235Ao:\202msza\213\216\\\230ar/\247^jM\242z;\234;\205iWy\211\207\202\210\177}n\237jf\216\231\201\207s~zld^juu\227\214\220mvx\207Y\221j\225U\233yu\246\244\\\232{\253\216kof\240\224`l{qb\226~}v\214\201\247vyi\245SO\225\220\226l\216d\200\243\200Ipl\272owu\220\214y\233pl[\224f\244bZ\214\240_\254o\221D\214qi\213$}z\272\226f|n\210\207qmhno\224M\206}=\221x\220\217\240\201|\201vh\206\214\207\243@\231z\203\223z[vU\\\247oX\235n\243\263\217\230U\243_kj\217H\213`\221]\261d~z\\gyx\253\221\202|r\177\256\224\177le\207|rtG\236\213O\200w\202\200cs\203\217m\206\256kkU{\204\213[\222\214v\211lk\222\214\200\213i\207\210_tr\203rx\213mf\200Vn\226\221\200\201r\210r|ej\200\234xo\217q]\210V\207\205y\204avcw\254jz\201ic\240A\204i\223uyh\225|K\177\217\214eb\201\235\245\201\207u\202\304q\230\214z\206\201\202}\207\204\217\247\177\234j\221y\240gX]\202z~rl\207t\220\211\220k\235e{}lb\217c\222um\200\244vmsr\235dq\210\214dk[\223vnk\207\222\217k\177\203\211zi{\224\221k\222\225\217q}\203v}`zw\202\216\235rxt\200clh\265j\236~\202\204ok\223\214h\203|w\207\207x\205fi\214\213^\204jy\242\222\351\236\236\244R\212\214\204}{\214\222xiex\177E\213|\225g\204{\223^u\214\214|\210r{x\227c`\210xv\\|s|w\177n\177}\205\217\205ltq\225o\206qjyv\211me\200\206fdg\203\204whzm\232~[u\200\201b\206[\207i\227\226\214\201\203}\211\215\221b\232\241x`p\211i{[wultfy\230\216uy\177p\214\205cjsah\213}\204dw\211`\215\203\205\202{~|~\215\213l\211\223\225u|\203pdd`rxsj\216k\206|wZ\201\223\212\202|{\234\177r\202|xo\204mq\203\212y\200\205\251|fz\226sris|pi]\177\200j\200t\201wkg\177xg|}\221p|^u|\223\213\216[wzvk^~\233e|{\200j\266{yc{^ovwf\205\201\203\207hr\212b\204\243{\204\\\243\226\276s`n\214potS\200\211}y\207{\210\203\226l\231\210ye\216\214\232\211qm}p_ww\204x\227\177\207\177R]k\225}\203n\246r\\\214\206u\206\214\211\207`p\207\233\247\202\216\205\212\205isu\177}\211\204j\207~\225\247\206\214e\233O\204]zu\230zl\216\222\205\204\217\202p\250Z|\203mnz{a\205y\221~un^po\221Wuq\220\260Nu\223^\2066\210uwuk\217wp\227wku\245D[/\236i\212v7zsms^moq\242\246]\220\231Gz{h\220\200vvm\230I\232p}O\222\223d\274\207\205_\205\177dXhh\224\240\225nqs\221\235p\233Gw\227\241k\215s\177\204{]\210z\206v;\241yu\206\230\205\224q\200|{\222G}{p\212\205\204\227aZlm\220eqqad\222\231Wv\213pU}\177\212Op\200q\224u\203xg\202\225\206x\205\250\251j\200\200e\214\205q{\220oN\211w\204~\206v\233lg\216}\226{\241zI\207\217euP\231\243|y\227j\237lx\201\210Zd{b{\202xxvt\237hrjkui\233\204\202}^pcgy\204~H\221\224y\220x\213\230}\250\213q\177}n\202vw\231\235vgr\201t\225{l\200^nvtsr\222~krj\207\265\227vf\222shpp\212]\200\203x[xw\214s\203xU\223_x+zn\200[\202\200d\221\210\225\224\205e\220\246\246yoV\212\264u\204E\250\035\255\200zvz\234o\210sw\211v\220\241qn_\206vsnY/\223\241vxp\205ev\214re\212rq\207Vx\233v\207\177\222\177|s\222\210p\224w{p\201cfksr\205r\204xwX\221\215\262dy\206Z\215C\202lmx*\231zP\232\206XU\2130?Y\221]P\234C\202y\214\177xq}l|\221h\201\210Wvp\221hm}\206\234{v\222\205X\207\207\211]\202l\204\210|}>\204\201\216\256u\221\234gg\204p\244d\201\224S\225\210d\202_}\203\205lzW\215\211|\210w|s`\203c\215sya{\200c\221{{\213\232w~\232\230y~\200\201}g\220\220_}nzj\177h\204e|\200p\200k|\214\200\215}vax~e\202\203\207\177\202R_]cu}]\205qyw\214\206x\214n\177}^p\220z}\206\206\215\244V~\201p\235vz\177\201utj\207n{T\222\201\217iX\206\212vsx~y`hk\212\224vsuX`rss~\200\215s\222\205\210z|\226m\221\213\216\201gqy\224\212~\206o\200\210z\200xw\214\177n{h~\226\205\312x\224\203nih\222zp\206\207\213w|i\200Zr|{r{\202\232gws\231\211\177\211\216\221\237hsy\214\200i\223b\206\210\215t\207|\202\204\224jh\206\206o~pdtw\213tcn\201ymox\206}i}\201\204w`g\213|h}q{\210\221\220~\216\205\221\201\223\177n\204\214~eg\203u{Zw}\207rx\200\220o\201h\177c}\225hj|\204w\205\205\206qzz_\211x\217q\210u\200u\202\202o\206\242\251o\201|wtqk\200s~v\207r~\201|a~\205\210zvr\203~v\200zyv\201\200\177\210\201\200{\205\240lwyqz\200|tjar\206|y\205\202\205u{qvrgo\202z\206r\205yss\210\201{\213z\177\200~l\201\215lys\202\206\206\211twg_er\227y\207k\200gq\200\206W^\233m\226k\204j\252V\211`\216\204t\203P\205\255\204p\217\201}tr\232\214|t\203\207k_\213ff}tt\200\205auxi\213seU\226|}\254q\220~\201\224\202\236\214\237\222ilr\216Wvju\205\211uk\200t}\212m\205\215\220h\202\207n\206v\244vsb\213rmy\177\207u\205~_\202i\177rs~f|\202oz\200\201\241\203\210agmof\211}a\215\204ha}gei\204m\177nf\202\203~\204|l\\\251TfArrh\206o\210\200\226Ae\200a\202\213\226]\233{spz\206\216\211h\210}xt\216yvk\226\231h\222\201oew{\202k|M\237\225\224\206]W\217\240l\200n\200|\225\206uoT\227\207\212\177th\200P\202ps\212\200y\215z\207xr|du\177i\200z\226\210ehz\213\207bulwj\217\223zpXg\236m\207\214\\L\201\203\217\223p\200\250\223\231Wx\236\246\224qh^uvj\211hq\206X\217vqgd\177\211drt\225\235a\210hbryUd\200k\216tzp\227\230\225_twQwz{G\210m\207ra~\201q\202\222\221m\232q\204m\177p\202{gzt[\204ums\211\207\222j\241{k\213w}\201\203m\201\215opq\224q\177\206k\224ko}S\177i\232\201\231~Y\206\243\222\204n\224\220\203k|\251\210yv\201\224{[\202\217k|U\251rZ\261hfF5\223v\223\216\211\207\221\213o\230\216\262aj\242n\207\\\214j\250oq|\220uu\205hq\240N\177^\242\223uwV\217t\203\206`~\226\236krl|Zr\213P~\230hZsrZ\241\211|\204\212q}p\231\227\207\212t{\225wnml\204~\202q\203p\203lz\204\202\212\205wv~g\204m\210\\y}\216s\214\214sn{\\FZ\213wO\246d]s|t}\205kyvvk|\214Upk\206fl\222\212t\203j}pL\201~\202f\206hz}\177\207e}v^\212X\203plr~}\214d\207z{\177\203`i~p\214]\214Z~\210j\205\202w}\223\204\226d\241itdx\177p\177\244g\220\213\210q\205\216x\224u\225\204g\251\211\214\211aryt\216op\210\201c|{\220\200\217\230\200\212\210xzp\227{uxUbjlmr\215r\222nr^\202j\210\203t}nb\203\253b\200\200u\200\231dl\177UzgeX\224\200\202\242v\210\215p\204y\240\217J\177S\242\221x]zejS\204\241ya~beq{zna\226\177~\202sr\213\223i\226\211\212\213{\177v\242\210\201\221b\244\210\207\201sd\224ywpkm\263s\377\211\223wn{O\217{\177\260\243lx\216M~:\216^\210Zpt\240\215Qo\245\213q\242g\206\273`kx\240bq\236Wz\214\216v\261\223\217s\243\235O\216\204\211wY\222{\243\202y\242r\206tr|y\217\177p\231\202Eg\216O|KvwwtPo\225h~\207\231n\232pow\245}`X\202v\215gk\202\216d\204e~^\211vpZi\214m\213m}n\223\220\211v\177\223r}lpuztlu\202\204y\210\231\233i\222n\220\223}j{\210wr\257\200\210\210\202U\204\225\226q|K\215\203\201\204\204t\177jo}\206\201\202a\177wu\215{i\204\204\210\226\253Tx\220\233~\216vwv|p\204{~y\213w\216\204\213~tgZxn\225\250\207q\177\201\201\205v\206y\203N\224\222\205\241easc\201vxr\206pj\217\203{\214\234g\210t\257`\2226\223^{\206j\221_|\202`\217fff\215^~\205Vu\232\243\230t|~`iflyw\\h\207\202v\222\211\213\211vr\212bz\215\211u\177dz\257\205\226\245c\202,[\211k\207\217r[{\223\177v{{a\222\225kjw\224u^]aj\215\235Tt|Wjfkg\202j\206p\206\226Tu\223|\214\207\237\217n\207l|\210\200[\216\223znl\215:i\223e\203\206Yk[vuc\212Y\206xJ\273\213vp>\231\213v\215\202\224\214|\205\224r\236Z\233p\213izpar~ttr\200u\224\213ye\234\204~u\200pgV[{l\201z\221z\203\215}Vv\244\177\203\217{l\225zj\\\205yU\207\200txi\231Ltzeo\200\226\206\212\222\201tg\210~\217k\213r\253\177[mx\225\217^ht\214~\265i9yte\\m\234k\233^Tez{r\213W\242\200Yvj\211czFm\214zg\224fqui\217\204z\203~\212\216kwJ\244\215l\203\205D\210uT\177_\204_|p~\211~\207u\207fa{svl\217h\205\210\\\202vx\202ypl\200t~w\223\200l{lgskrkvo\216\214\177|\251rs\252~}\213\177y\214\215Xix\242\204l\232\223q\177\177\206Ul`\226\200\236tas\232p\260j\231\200tt\177\253\226f\202\205\211t|}t|q[\267f\231\255fj]M\240\217}\234a\246v\222]\207\234\310pr\227]yn\240kg\\g\201\234s\224t\213v\237`\201q\210znn3\216q\241\212X\202~\211k{uggn\206fo\207Rlu\214\212\226\220|\201~j\215\203\210\245l\217\177\210\241\202um^z\225|f\224Y\211\220~PH\247kr\275v\252\215P\226k\251[\203a\\j\203u\212\230\201\217f\244\266\220\235l^\203~\214\227i}~uz\212\207Xfa\205rh\204\236_zovnWn\200j\212~byqxwkz\231]\215`g}v\177\202\202\212\206\211\205\202\212udqwmlgvc\212tju|V\225k\217\221m\200k\212lh\265\212\222c\\\202\244Odf\225gvv\237d\\\224\215\201y[\210\274\242z\224gj\253T\213\203~\254[_{\202\177\311\256\203\244E_j\231ZYw\177{{\\m`f{\235\204o\224_\217\205wc}f\205\177\211\203\217teco\207Ds\226jprd\231\212vo\217\247\210lw\207{\231lwx\230zq\204yr~\232}vb\204sxn\237pnc\222ubq\265Z\215\204\215mm~\267\223Yk\200r\260\220q\204\200y\212\214}\211ko\222v\216y\250zp\207v}\213\246U\201_]\205\222ex\212\\\234fzC\206j\212\215\231}k}Y\212\252VM\216|\211c|ia}\201}v\227\244\200\234pwu\226\206\177e\212|\204\207t{i\200akov\214e\222z\205s\202mqai\224g]\215m\223\215\211\224\232iv\200\205D~\235\206i\177\201fwF\210qmT\212e\211uu\206iug\210\200rrtY|hci\177\230lz~s\254p\212\233\205\227\262ckd_\222Ylddg\\awng\236i\245\201zR\224\232\213s\203c\273\210\177}\226wjs[k\205\226i\243r\232\201Zp\235\211pb\204\233\200\214h\177\221sq\211\207\215^vns^Y\231\232\225u\206es\224\207\202Q\237\201\227Z\201\210\236_zQ\242P\310\205\210s\234nc{H_z\233t\210^s\177_\237\240\213y\177\204\232\247\217J^\220du}co\200S\200{ss\251ov\253{\207ww|\221\207\204\211\212Ecw\220z~g\211Y\243ed\243\242\212NyxPM\237v~\243\245\225trg\206\306\217w\216w}sX\205i\210\222uj}{\200\305\264\201\226I}MpkuXo\233j\276\243ibZ\177U\235M\227s\204\227R\\\216\226\211\177\212oz_z|yMstjep\211\222\233l\251\201Z\210Y|ts\220[\224\214s\243z\247tq\224\205j|llyvkYa\216o\211\250\223\223l{o\256\207f\205s\260\240o\203jxd\211jo\224\204|@\211\214ZM`\205\\\201\226M\207t~\245p\232Rv\262\237c\260\225\271N\242Usk\231\235Hxryb\231\214|\200xnt\212q\214\207w\202z\302\217_\177u{\211[sucr\224a/j\246\220a\250\217\242\'RNb}f\201yZ\220\201pzw\273\315W\177\210q\237\227\202\222\220ou\230\202mz\177\221\201\177Yl~\211\233zn<\205\205tck\310\201\205[\2242\216\203r\235\205xKi{hSzi\211p\246r\177\215k\213b\216ng\201jp[\206U~nQr\241\206iuxj{\245\216i\200\212n\200\202z\216\251six\201x\223|\224{dh}\177uz\240nhrq\243\260\250p_\224\221]\\\211\212`\207\230u?A\240\210|\207\204O\253fl<\222;\204|t\246`hXx\221jzo\261{}yx\220\222qxSx%\244\201\211\235\244\243`\205\220MeC\213\236p\210T\202j\223[M@\203\323w^nnRi\203Vs\205\177llj\221\250t}\216\220\220\203r\216\220]\257k\215\207\224Z\213\205j|\225\202w\226kel\231\235\232s\233P}\\zS\201\220A\236ff\211\177Yf\252UH\\\245Ol\222W\203\202t\210\224kzUWop\225\200YZY\254`Xxx\205\210vn\206M\211\222`VTvt\225\177n{\213\234g[k\226l\207lvh\253zax_\235\223\201\226\206{\215\214R\223(\206s\203qg\205\202\230\207b}y\212lx\210|\217z\200\207\255\206q\224\225t\207\206}ie\255\232lhq\203f\177nxlw\200Y|\211~\225\\wu{gvo`\230Vp`qOWb\200\203\213c\212o_~\221\216\215\211t\210\213it\214\204\177v\205\220\215]xma\210Cq\213\203p}\204\203\210\204m\217\222\236qj\205r\211y\201c\177{im\202\222\202\210siTugy\204\216\202t~\213m~{\226^\204\214\220cp\204\205\213\204i\206k\250\220a\215\177\200|\217{\212m\215\177\216\201m\240\200itg\220x\222f\216te\220~lwyg\212e\177T\227`\225t\233\213l\224n\244\251lk\203\210\225w\213ow\231|m~\226\223{\247cj\201{nyW\177v\213\204|_\215uo\202x\215\213o\220l\223c\205\214\233}w\211wj\217\205\211\217\206\215\221wg\214zCk\226\201lp|l\201P\200p{Q\201m\177`|}oqe\220rj\177\212o\217i|o~\206i\205zd\225\206\210\232}|\253tek\201\211dpqeocx\205\205o\247o|\202iO\231\220\211d\205\\\221\210\207~\217\200jlmo\207\200r|wwl\203\201\204\236\200\204\217ue\213\220\212\200\207trv\226X\241]iux\215\216\222x\223_g\211u~~\210\204\217n\220\206\221i\206^\226[\256\217\222\215\201\210mtwh\200\214\203tgmt_{\235\220\215\220x\205\230\207]f\224fg\177]\200\237[\202\220\205e\231fq\234\204u\205\177\204\223\212\214i~e\204}\231jqcz}\200ql\235y|GMhhx\211\207\223\211\272\237MBq\215]|q\200\225\217jV\215\213{\213Xu\233\223y\205\203_\232H\240Xqg\222sq\212|\214q|\\v\212ezQ\215\205z~q\\\275y\225\201v\177x`|qu\210\215h~kw\211\200}\177\214\211kupm}u\202i\200{Z\247n\211md\223pd\202{u\210ltyz\224\206c\223\220wvb\177\230\204{i\214\247\201tltkp\206\211p\245\202{TqnyYwta\236\217fpoy\243rsci\253ok\216\250\247S\244oks\202\260^mYtlmvi\204\211vhs\201\214\214g}v\302\207[wrv\207Ksilp\256gG\223\245p\207_\223\205\207r]Z\233hu\223?\213\202L\203j\240\211pI}\217\202\211\206|\214\201u\264suhi\225\201zko\217~{jhYr~xV\216\227vvk}o\213oZg\200f{\232\200\177z}xpqt\201\224\207\230\205sk{\231um\202{\200\221zqc\215vvm\212xl{\265|^|x~\205\177\177\202\242f\206s\221\201\201\202v\205rW\200hk\212\242\177\202\205P\237\227\244qc\216\226ec\213\246}~\225wvR}\210~u}H\244deU\205Sgnc\200eh|\217\266\206uz\234\215\215\203e\214\212eed\211M\221\205\226\213`m|\202\233\213s\216\211\233u\212R\201g\251o{q|\211\177t{ib\210|\212~\206mos\177\212\247y\177y\205\217\214p\200\241k\227q\222\224\205myxq\202\211\200y~m\205c}v\217~vvv\177\201Z\221\204t\231~|{\200\217vxIRa\221mP\234Zwxj\225~y\215bav\201\217\211kgU\234xb\205\205i\215\177fvV\216\222z_use\202sk\207\215}eQk\201k\201\205ux\177}o\177\201\222\200uw\216|\223\200q\213Z{Zn\200_\203\205\204\242\221\222}gQzx\200n\251\221\215\204\202\210t\210\201\202\234\216\244T\276\214\225\217_p`x\212jt\214\207cp\214\222|o\221r\216\204hky\247ZzbOfd`\215i\215r\261\213`~\203\210\224\216u|ps\223\277\211\205F\215\224\220\\y\202@\224BUe\216r}\274v\205\210\224|\213\254\212Z\204(\257\234\205e\205\177nNy\227\202\177ehRe{\202z~\236jx\207^r\203\215L\226\207\212n~yg\223\212|\217g\301\216Y\213r^\203\213_t\203\206\217\220\232w\226hg~f\250w\237h\257cl\220y\210kji\240eyI\236{ls\245yx\224M\214\257p[}\217d\202\226fi\273vq\234\243\237b\252oMh{\177n\\\203\207\237\203{o\212w^ty\207\224l\244l\220Nt\236\232\206lm\203~\210|x\234~v\205\200I\214\227J\177\275\201`dfi\215aqlhAlf\177T\204\217\207hi\214lzq\264s\240\216\217m\207\204pz\202\\\204\177\216\210s\235\232\201}w\207}\200S\220e\204`t\240\201e\302\204v\210pA\236\245\235X\211<\234\223\216\247\227\210sUib\205vqewVf\177rj\232\242\226\242\234I\211\254\242\205\215]y\200\232\210\273^m\214\221k\213\236yzlVdv\177\206\302\211\204x\205|\213w\235[\223+\270\212\254\241{\212nNibr\216\216c`p}p{\252\216\216l\242Z\203j~c\217xW{\202\212rH\227}gP\245g{\220Zi\205\244\177ur\260]\236d\242x\207vj\226\220f\215\213\232p\235\217u=y\224\213\210z\236[\274\200\231\202]\215\001j\212z\227\242vWx\237~nu\200a\237\215ePl\241J\201No_\210\257\223mypE}`\240\211\177wLs\231hw\213s\235\231\243z_\201\204L\224|\235\213\261s}z\207_eb\205a\216tXdt\200y\177at\2219\240\203vxK\227sdv~y\213\177z\177\226\237y\177\235\217b\205`h\206{\177\213k\234\203v\203yZ\212\202\216i\232g\226~fhJpy\217Y\205\223n0q\223\202\216RxZ\256Eya\242\277:\240g`\200l\264[\222zasKvo\211\255\203jS\202\224\235h\207|\257~e^_y\223I_f\206s\326[\254\235u\201i@\265M\327\203QEl\226{kW\227t,\234S\201e\215wUmfp\214w\204~}\264\203\212~\221\221\210\220~f\255j\220`\212P\214\210\202\211\203\227_m~\204p\221rc[\225q\216\244l\257\212dsb\213u]\232}\236\225dx\222\236\211e\214\224p\241\203wp\204[}W\244\265[\217\266up\233qw\212\211\177\204\302[v\217\261\231_\221\217e\211e\207K\202\231\225\240\217a\\T\217|\247_x\222cs\233\304|_\236HoT\226\215`\202bU\301\203}\313WihR\202tsv\207\253w\311f\244\270\256ju\206svu\213K\200Mja\223\204c]\230\217\220\254\230\232r\221vnq\200V\232\204\211Ry\250\217\215{jrko\243UlVxq\222\300\231\221\202vo\201\251\200k\264M\234\205\237\230\223\211g]s\220{\207\210sf\215\204ig\262ol\252e\312\221M\206p\257^\215q@b\240f\200\202t\202v\206\203\250\206t^q\224~\212\203snz~\224zbvT\204th}\211g\203\217iqe\212\215_yaq`n\207^z\227\237}bjin\231\216\204|x\240o\233\177\244k\206~\227uy}t\206h"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.25088047981
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.37212228775
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/convolution_eightbit_reshape_transformer/residual/residual3/MirrorPad_1"
  op: "Reshape"
  input: "transformer/residual/residual3/MirrorPad_1"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/convolution_eightbit_min_transformer/residual/residual3/MirrorPad_1"
  op: "Min"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_reshape_transformer/residual/residual3/MirrorPad_1"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/convolution_eightbit_max_transformer/residual/residual3/MirrorPad_1"
  op: "Max"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_reshape_transformer/residual/residual3/MirrorPad_1"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/convolution_eightbit_quantize_transformer/residual/residual3/MirrorPad_1"
  op: "QuantizeV2"
  input: "transformer/residual/residual3/MirrorPad_1"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_min_transformer/residual/residual3/MirrorPad_1"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_max_transformer/residual/residual3/MirrorPad_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_quantize_transformer/residual/residual3/MirrorPad_1"
  input: "transformer/residual/residual3/conv2/weights_quint8_const"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_quantize_transformer/residual/residual3/MirrorPad_1:1"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_quantize_transformer/residual/residual3/MirrorPad_1:2"
  input: "transformer/residual/residual3/conv2/weights_min"
  input: "transformer/residual/residual3/conv2/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_quantized_conv:2"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_requant_range:0"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/convolution"
  op: "Dequantize"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_requantize"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_requantize:1"
  input: "transformer/residual/residual3/conv2/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/residual/residual3/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/residual/residual3/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/residual/residual3/conv2/convolution"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/normalize/Mul"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/normalize/variance"
  input: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1/shape"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "~\017\211?\177H\243?\205\303}?\241\251\220?Q\332Q?\020\373\237?\2743W?W\216\242?N\207J?\350\265\255?\342r)?\271\272X?\266\330J?:\267\225?\017\275q?\006\3025?\251\317\036?[\312\224?\270\265o?\344\315N?$\'\216?\300\315b?\027a\220?|(\322>l@]?\002\350N?{\374o?\367\016U?\t\244~?\351ty?6&\260?j\206D?\375\002\270?(\327\360>\352jc?\004L+?\r\212\273?c\035\215?\324\013R?\270X\207?9A\306?\331T\204?,\231T?+h\201?H}r?8pl?\212\024X?\212\017\353>E\374<?\035Z\312><\022c?\355V\214?J\300[?\324\020\t?qE\241>J\317\214?\210\376\031?\036\354^?BZ\251?\216\321W?yB\371>\241\251\363>\006\341_?\246C\347?\367\235\244?\304\377\223?\014\255$?\350\300m?Z\3761?\313S\224?\'\2264?\221\001\232?^?a?t\324b?\366\\%?j\"t?\243\023\222?\373\254S?\212lf?\242\357\337\274Jl\247>-\017\232?$9\260>m\204\237?qO\222?\026\031m?\352E\024?\363&\001?0Lh?m\303\241?;L\207?0L\205?^\310{?}\333r?\240\263\260?3\363\211?T\2317?\207Q\"?t\212\205?\317}\304?\013\322@?\215\020\r?\306\333k?\026\350\003?\226\021n?\3015\200?\202\220,?\325\365x?\352\312f?_7\206?\350\352%?L&P?[\333c?\312\205&?u#\273?J\024\252?\252\215\364>T\202,?\356\004\003?Y\223b?\r\re?\215\3322?Gp#?gjp?G~\271?\370\016(?dE\222?\024\343C?\2600^?J\337H? \252\211?\316>\237?\374\365\215?\330\244\225?\013\257\025?\271e\245?\361Ha?\225[\276?\245Rx?VY\200?\3668\207>TLj?\221`\\?\030\0109?:\335^?\027&\203?\333\232x?\311C\204?Gv\211?\363\004:?\377\264\367>6\352~?)\275~?\362\267\222?I\031i?\260\006\214?\243i\250?\2544`?\362;\241?\361\225(?\322\036\204?\327\252n?p\264\251?\353\234\217?\230\265i?\341\346l?\207{\033?\005\302\224?\035u(?v\304\272??\'5?\313\034:?\354\353*?\036,W?\206\214a?@\307O?b3\226?\033\303@?\360]\005?\363i3?6\030c?T\365$?\306{Y?4.\343>fJ^?\340\013S?C\177y?\325\365\311?\031\271\232?O\364w?2_\250?\265\332&?\305\227\030=)\314\016?\317\202\270?\235=\317?8$_?y^\357>F6\367>=\202\203?\356*\260>\n\033\315?\020<\336=~\021\307=H\343A>\2642H>.\200\000?\320nd>s\\\210>r \225?+Qz>\271\260\034?a\231\343>\014\344U>\005@8?m\216]?I(]>\366\3004\276\236\333G?\214\202\203>>{T@f\313\016?\214\370\235?t\006\244\275\037W\221?\366\372}?\254`A?k\374\032?d\022E?:oh?\016\340\207?\374\277\263?\256\317\001?V\270\212?\355\037\215?\317\320\363>\341S\261?\320Vc?A|\221?\224\024#?\210\363\272?b\260H?\340\"s?\2653;?\032\306\267?\244\002\031?w\366\223?\227\206T?\273\332\367>m\334\"?\243\330,?8\345b?3\212\226?\215-\014?y\t\253?~&\027?\001\006\320>\310\223-?^\232y>\214\254h?\303\204\177?\021\306\304?\\E=?l\354\225?\256\220\256?\345c\270?\334\255f?\2629!?\372\250%? \267,?@\206a?zhM?+\326\257?m\2476?\213(\017?\007Dg?4\036a?1\246\203?\315\177z?Y\303\330>\307J\240?\313\233\313?\016\tI?\371E\002?x\324/?\377u7?i\220\220?\341\353a?\350B4>\tRy?\035\234\255?Ll\306?\312\"\022\276\033\306\337>\352\303\034?\301n\004?\217\322X?]<\352?\301m\252>\367\033\265=\374\267\277>_\003\227>\310\304_?\034*t?\331u\251>\252*\013?G\341@?\335\331\007?\233v2?\353b\257=Wc+?\005\357\\?6X\243?A\020\266> \312*?\300yd\277|8\003@\321\234\262>\227)\271?\021t\246>\375%\240?\027\007p?<\326\204?#\203b?\201\221h?\037\036\276>\343\212\202?\022\261 ?J\306Z?\322\230\247?\370\323M?\344\010\027?\245\373\245?\250\273\302?\354\001)?)\251\177>E\007e?H\370\"??\277Q?n\224B?\343\\\243?\261\364\215?OR\351>\243\366\237?\230\037\373>\3238`?\225\235X?\313S\005?\302\201h?q\221\312>?0\252?\356\030.?\370\322\246?o\010\033?9\331\037?\240s\217?\366\314\244?\007c\237?$\007p?\230\007{?\301\223\027?3\230\357?\343\035^?.4n>f\002\264?d\370*?\234\004@?\3571^?[\344\241?\306\031\217?\212\237\212?\243|Z?u!u?\231\275\005?\252\226J?\232<U?\237\327\233?\016D\271?\207/&?\237k\241>\375\013t?\310\216\035?\220\336\253?\016\217Y?\331\357b?>\360\253?I\230\217?,Fp?\355=/?1Bt?PI\213?E\303\204?\373[\026?\331\026\265?\300?E?K+P?QHM?\033|\275?\334\243N?>\334\022?\223]-?MYi?77\213?\272~\002?F\306\206?\037\224t?(\361s?+C:>0\347\330>\343\311)?U\242\217?\343\320v?\316\360\204?2\335C?\240\272N?\030\222A?\371\376X?\230\013O?\2473\233?\357\347j?*\2119?\266\030-?\304\345h?!#\212?\252&\241?Qn\272?\306\243&?\212\205\300>\222\267E?1\260\246?(\035\224?Y\216d?1!z?kV<?\205\315q?%\366m?S\001\231?\322h_?YW\364>W\331\200?X\237\254>$j\376>\223\241a?\2014G?\367\256\255?O{U?\333\330v?\002H,>\350T\240?p\250z?\002\262A?w\345U?2\240\250?\300\002\315>\336%1?\022x{?\026\2449?n\312\241?\224\275\214>\232E\363>\364#)?\362\025\215?J\027\354>\231\303\023?\"\311f?(h\203?\032\033\024?\375\251M?\024\320r?1\334\363><\r\005?\272\223@?,f\005?\303re?^\312V?7\344I?p\212(?~\2150?\033\000=?N\030g?\200$\303>&Q??\330\245\025=\212\257\240?\211\344v?\336\321\031?\0030\273>\2276S?\'+8?\275\373l?;\026\027?\315\370\310>\230\023\206?F\346o?\237\317,?\335KJ?!\325n?Q\247\252>too=o\244\216>+p\035?1I&?\232\273\264>\363\330\001@\016\236i?\3346\205?\200\246/>\305S\010?e\372\204>\206R\277>d1\274?\211\002\255>&\211z?\273\230\204?\tj\300?u\254m?\201L7?\343\022p?\256\rp?\354\214\252?\356\321\361>\310\201\347?7\312|?s84?X\257\302>\007\261q?$\334\350>\347\032\251>\211\216\033?\003\3615?\261\034\034?\211\217\213>\222r_?A\315\222?\003Zz?\025\002\'?\335\363v?M\275C?\365\237(?\004\364;?\322\360\252?h$^?\r\222:?\355 y?\003S\241>2\254\022>[\214\022\275\"%\303\275\264\320\331?#\257\024\276G\245\301>\342\327\r>\t54?\200\272\'?H\017=?\"\203\314?\347`\210?\240\207#?\000\357\001@}\356\230?k\314{?1\230\010?\301\262\262?\202dh>\323\267\352>\036`0>j\374\261=\234\350\300?\251R2?d\037t?\\Z\030>T\342\247>3\360$>R\312\264>Z\274\301>h\024_?\376\035\343>\'\362\225?\211\032\220?\317\377\312?\326mr?\313F9?y\375\333>\273]\341?\231\223\273>\260d\360?\205\210\007?E;.>\257\206P?\207\367\311?\303\233N?@\341&\276\272\302:>M[\250?\332\353\032?\275\371f?\331\0322?\037t\313?\'\036$?|\207%?G!&?\351\257:?Y\315v?\334lo?\0345\236?\035\001w?\247\265c?H\272:\276\264\013N?\210 \027?*J\241? \017x?\310\203\202?}\3601?WuZ?4;\272?\0063B?\320\030\253?\371\300\342>\014\006\t?\021\311.?\361PH?G\270q?!\220<?G*\t?k\236i?\355\327\205>^wF?7\311y?\360\004-?K\013\224?\324H\237?*\022M?j\241\'?\200\316\'?]-\034>8\236\263?\016\337\007?\031E\207?\017\336\245>\212\n\307?)\320\201?IXn?V\334\315?j[\201?\031E\365>L\344W?\341\360\177?R\2557?Ar\236?\355\005w?\335\206\000?\316 \221?N\2407?\363\300u?\373\251\017?`\033q?h\177Z?&\001\212?\000\231l?b\326\210?fEA?\252RD?\027z\273>\242\222\\?\340\320>?\021Ca?[,3?\016\267o?\2512u?\337\216\177?\364\335\341>\024\241e?\024\320\354>\312\265\023?N!\243?\300\241\214?\0039\203?\233Du?\331\261\017?\301,\177? \261\225?\327]\315>U#h?GV\203?\245?\201?*:P?\370\230\250?\366\353w?\320\252\223>L\236\001?\255\254z?\n\360N?\363\314\000?\342\302\340\275H\027\234?\020\241N?\351\374\201?y\316\306?\235\210??\211nf?Oi\336>\0042\214?X\343\250?|\313\203?\304\027\273?\204| ?\250\343\203?\"\273Y?\322\002F?\263F[?\177\346i?\261Z\223?[\036~?\277,;?\030\305??;\245\327>x\346i?\r\314e?V!\307>u\202\263?5\364\276>\001\347\372>\356\355\215?\006ul?T^B?Mt\037?\223\247/?\253\247\266=!\331\203?\203S\233?\275\344\330?\315Y\236?~:\210?\263=\210?M\234\337>\214V`?]Mi?\344\331d?\000(G?\222\223\362>\246\247\263?\3178J?\032\376\217?\033\231\365>\355u\212?\0168x?^:\200?\2270\247?\310N,?-\013\242?\204\304\372>\221\007t?1\371}?\002\303x?$\347q?\270\323\260?\221c+?\321D\321>\3263\217?\tEK?\207\224\236?\254U\216?\270 \335>\312\270d?\210\302\247?\351X\232?\210e\'?\243\r\025?A\236I?\377\267!?8\013\237?ja\340>x\317q?\316\313\034?\303H\273?\216\232\200?\325\236\242?L\005~>\366\263\323>\376L\210?\324\325B?0$y?\341\357\233>oq\255=\331\210$?9\3042?j\204\253?\343\020\213?@\361\357>)\252\017?\262G(?\275+(?\220\357G?<\035\020?\265\036\244>\031-\205?\374&|?9&\000@>\3311?jO\035?&\344Q?\017G\207?\375s\234?\321\230x?\267\215\013?\345S\366>~\353\207?\2609w>\354\270\271?}\271\035?Y\221\017?\001&y?;\374P?Z\236X?T\260\034??\\\r?h&^?\343}\227?\333\267e?\235\003<??\326R?)\316\002?x\030a?\273\0250?-v\006?[Tt?c2s?\375\004\303?d\236\021?\r\212\242?^\253\244>"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_1"
  input: "transformer/residual/residual3/conv2/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/residual/residual3/conv2/InstanceNorm/mul_1"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Sum_1"
  input: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims_2"
  input: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual3/conv2/convolution"
  input: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape/shape"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "|\205\240\276\n+\325>H\2537\275^\226\376>\375_\341=\276x\377>\"\265n\276\317\313$\276\220\325\275\2760\037\342\276\253fu=/\255\266>\350\243\330\275\333A\204\276\256\350\303\274\020\344\363\275k\200\215\273\211\267\305\276\346n\230\276\356\374\376=\216p4\276\005\263:=\235\010.\276\232f\256\276x\324q\275\020\222\274\2760\313\210\276\330\003\246=\344\334\235\276\325\352\316\2762\251:\276\nl\377<r\206\215\274_\254\237>+\356]>\302\014\304>,g\355=\006y\000\276}\206\032\276\320\352\307\2767\253A\276\327\004\346=W\377\207\276\3744\000=-s\333\275@\205 =\"\235\236>\036\220=\275`.@=\364\266\274\275o<y=\211\324\205\274\314\343\355\274\230\310\023\276\001\331\377=\270\247\345\275\200\377=\276~4<\276\266\312I>g\236h\276$3\235\275Q%r\276+e\251\276\240\224\365<\344*\205\273\236#\277<\366\245\255\276j\204\037\276uF\023<z\232:\276\332\024\344=N$\013\275\005!\226>\374Q\323=\305\223\330\275\300d\246\276l8\376=\231\331l\275\271~M=\225\342\266\275\006\t\255<\020Rt\274P\370\300\274\335\325\030\276.;\346=\336\010F=\025\264m\275\345Fe>\361\004x=v\020\362\274\\\275\331=\222\027\005=\326%B>\237\261\237\275\344\355\365=\375\305\227\275I\255\225\276\236\275_\276\336$O=\3134\367\275\251\013\225>\217\242\036\276S\225\344=\337\210\033\276\203\016\324>f\\\347\274~Z\315\276\352\177A\276\303;\000>@W,>\265\202\274<\'\003\254\276G(\307=\223\243@>&\320\331\275\322Ld>\207\200\353=\254\276\215>\351\244\212\275\276\007}\273\247\006\036>\204%\306=x\335D<\326S.\2765\241\333<\226\304]\275F\343\235\275\032*\253=M\252\276\275\345\020\322\274\356\373\002=L\206%9dz\\\276\024?R>\212L\252=.@,\2756\224\310\275]*Y=\336\003\033=\320\331\360\275\227\261\273\275\014u)\276e\371\222\276>?t>LN\000>\357G\236\276RE\016\275k\272\301\275\033\252\270\275\363k\226\276P\252\224=_R3=HVd=\245\306\244\275\321\321\320\275\314\360 \275\207\335.>\266\360\037\273\222\337\014>\376\272C=\331k\201>\344e\214\276\265\252\301\276\004\325\206\276\230\035\010=w\213\037>\374tK>(\237\326=!\366\t\276\017\326s>\330\374\307<\r\375\203\276\236\267\243\276b\'\"\276\003\320\241\276\302<\032>G\262[=\010\346\311\275<9\005\2767\316\255\276Z\014\240\274\024\0002\276\263\036\216<\332\373\236>\201\210b>\207\352\206>\261\326^\276\327Z\243=\034p\212>\231\370l>\374F\256>\352]*<Y\035\367<\201\354\310\274\242,\263\276\243\017\027\276\324\001\204>\024\252r\276\306\306\214>\356\330\361=7\302\251>j^ \274\236_\220\276\363\301j\276\366\177O\276LI\213\275\276\256\323\274@k&\276\210G\375=\302\r\375\274Q\'\225=\322\227\021\276!\253\344=\331\244`=\345\240D=\207\364x\275\203\244E>y\336\335=`\266\037><0\210\276N\215\301=0t\031=\020Zu\275 \373D>\344\377\017>\021\036V>\025h\035\276\203\367C=lad\275\035\201.\276[\252\335\274a\227\341\275{|\023\2765\242.\276)\345\234\274\356q\324<J\246\241>\014Vx\276\202\036\034=\262\267\240\276\364\377+=7\254\014>\323#\243=\"x_:v\265\030\275\240\206\240=\361~\214\276tA[=\005\017\212=T\304\344=\252e\222\276\370\212 >\032n\305\275\030I\316\276&\211\315\274\201c\200>Q\374,>R\351n>\343Yk>m\260\215=\216\347\213<\331\001\334\275\036\270\212\274\003\255\244\2766K\021>\212\225\314=\236\322l\275c\301\305=\331A\273<4\326\364=\204k\224>\310Q\365\275\017\2269\276\201\230\306=olr=\305\255\035>q\310@>\325\254\230=\364\030`\276\001u\234\274\321\010\024\274>\216\312\275\005\314\010\275\367\376\274=\227\r?\276_\013!\276\325\252\214\276\300\260\262=\304\331u\276IK\350\274I\306\304\274\341\211\265=\244u\312;@\257\\>*\255\202\276\327Y\004\276\240\034\233\276m\n\310\275l\231\200>\"6\316=\301e\274=7M\215\276`\277n\275\317\025\310\275\345\234\224\275\244\375T;\250g\007>\2755G\276\302~\210\275\n\242F\276\233l\034\275\226<\022\276\023\353\032\276B\013y\276\014y\330=8\240\344=z\344\241\276\373\221j>h\035\007\276Ps\202\276\266:;\276sH\361\273\"k\022=\236N\032>\272\204\350\275O\362\263=\211\246\221=(8\006\276d(\200\276H\251\206\276\361~\222\275\313\340\231>\314LD=J\364@>*\227\340\273\335C\005\276$:{=\2635\216\276\366\"a\276H\2513<\333.\222=\212\274\203>K8_\276d\016\256\275\262\234\226\275sl\207\275\271\354\353\275\000C\177\274;\211\026\275\002\355\207\276\356^]\276xp\035\276e$\266>\246\221\316;f?U>\201b#\276C\342,\276\364{3\276,\211\005\276\316\034n=\212\r6>\014n\027=\343\360\r=ku\033>\250~h\275K\224\207\275<\331\206>-\014\301\275\272\360\344<J\210\320\2751\020 \275\003\264\227>Uf\000>\301;\367\274\243Cl\275\237\310\234=\355X\255\274\264\233\325=\276?\202\276lG*>\332\272\022\276+l\274=\335 k\276\010\326\031\276\373\254\325\274qDH\275/0\246\275yhB\275\016\372\n=_\334\203\276\352\320\202\276v\322\372=\210K\3769bX;=\366C\010:\305\207\343:u6\'\275T\024\275\275\333-1\276\311\350\351\275I\345:>\310vP>Gf\013\276\354C\226\275N\203>\276y\277M=T}\010>:;\263=\025J\026<\365\227|=-N\346\273\361\3503\274\302C\205=%\302\207\275\023\376\257\275w\353\223=\004z9>\251\266\250\276\366\334\216=n\322Y\2769!\232>\t\342\\>#\003,>KP\272>\3434\336\275h\230v=+*\273\276S1\025>Mth>\230\313\354=\250\330\214</\333\342\276<\355i\276;\361\001?\361Z\322\276\366\010\326=5E\227>s\001\210>L\367n\276\231+\210>\315E\353>\345\0071>4]\232\276C\235\224\275b\025U=^\317!\276\255\324\240=\031\200\230=J\214%\275g\226\215>]X\021>\023\377\013>\252\365q\275\212\nj>\350\026\031\275\272\274\225\275qO\363=\330\010P\276[\271\024\276\361=A=\367\373#\276i\177\202=\030(\000\276u\002%\276]\2022=}\374\334=2\316\'\276\204I\213\274\301R\214\275\315\207\375\275\265\267\253\275T\325\247\273\306\006`\275\351\223\311\275\363\342\206=77c\275\273,\376<v\t\247\275[\203\r\276{IF\275d\314o\275\300\312\247>\237\"G\276\233,\226\274P\021\014\276\36312\276i\366\272=\026\376\030\276\344?\232\274P\244j=\031\270\014>Y!A\276\257\240\247=F\010\262\276v\257\276=\227\263\033>\375Q\212\276\305#\200\276$SQ=\020+1<\211\346\327\276\365Z,\276\334,\234>@yz\276\304\270\254\275\205?\223=_Q\273\275G3\220\275\314>\373\274\240\334q>Gc\332\273\031{\326=|\317q\275\022,\327=\356\216M>\273\354\346;\014\257x=\2566\177\276\365\355L>\271\245!\2760\r\017>\24554=iq>\276\346\362<>\277\320\021> K\245>*\'e>\200\252:\276\350\350\323=2\200\232=\363N\240=;\224K>\211\022\036>\211~\210<\n\255\370<\243\357W\276\214\215\010\275\344\225<>x\221m>\234\275$\276C4\003\276z\317\250\276n\236[\276\245\363\204>KP\316\275!z\001=\036]\316<\t\327\327>\337\236\246\2756\351r=z\315\013\277\216\366]\276\327\225\233\275\362\347\305\276q\242y=P\004\336>@\237\237>_\370:>!\377\027>\236t\245\276\211U\006\276[\021*\276\177e_=V\330\246>5\004\263>z\2568>F\027\312\276o\251[\276\307\342\323\276\024Y\236\276\214\337\001>\037\274\231=K\204p\276\3655\275\276:\313\274\276\266\257:\274)\240?>\213\300-\275\325a\027>\007\227\016>\216\335\017\276\227]\010>P\334^\275\'f\371=P\202\266\274\022\362\023\275\304\231F\275\377\201\303=Rw\232\2740\271\342\275ZM\024\276\224n_>\346\234 \276\323\215_>\224\320\254\275\r\227p>\232\205\213=\034\312O=\375\262\377\275\014-_<\251C\347\275\344\261\302\274.\373n=x\214v\275\321\323J\276M\013\037\275\010\360\375<\262a#\275\n\223*\276\263\030\266=^\335.\276\016\232\306=II\337=\365\205\240>fZ\355<Ewu\276\245 \220=`]\033>b\275q\275\241z&\275GV\206\276X62=\237\000\014>\264\251\352\275Y\330\201\276g\024\324\275h\037\307\275\370\025:\275\347\214\025>X\375\310=\261\374\032>\274\263u=2E\364\275\360\020\002\276\224+\202<{W\345\274)Hz\276/\354V\276\324\370\025\276\275\316\354=\347\023\232=\215\026\361\275\334\316\315\275\305\033\006\276\303\010\033>\232\262\215>\266\320/>\251\023\374=+\370X\276Y0_>d \024=\n\206\203\274\'\214M>0\332\010=\305~5>\202\232#>\004\224v\2764\335\365=.1\302\275\246\375y>\242e\354<d\nL\274\004F4\276w\024\216=f\017\214=\256\216m\272\366\246V\275\330\322\373=4\022C;j\360\365\274\2569\022>U5\227>\"u\014>\231{V>\005\337>\276\363\r2\275\244\324\002\277\001\013r\276\2749\203=s\262\360=\262\373\007>j\244\330=\365\224\212>\210\253\303\273-\036E=\316\300\313>J\037\376\275\344\016\212>\2733\242\275P8x>\337w\025>!\350\010\275\254\031\036\2768\243(=!w\321=\034\312\244=\332\262\322=\n\347W\271w\003\356\273\220v\276=\373\257\247\275|,\036>2:\017=a\332\327\275`\315;>m\344\341\275\037\313\036\276\306\252_\276\365\255\367\274\373\272D\276\346\236\253>\302\306L=D&V>\304\306.>\237\370\271=s\"n\276\307\337\026=\013\347\307=2\344<\276\030\331.\274#\357f\276\210\301\223=!P\301<\271>\331=\204\226\030=\277N\250\275\0131\275=\372-8><\330\263>\355[\247>\266[<\276_\335`\275\341\320]=\362%\261=\254r\243\275W\026\376=A6}\276\010\303\272>\'H\237<\254=L>\350\023\202\275\327a\360=\250;\337\276\003S+=\363\223s\276\334\335\206\275R\013Q>\005\t(=\"$\364<\341\033\256=\203\302\337\275Vi\263\274\327\275\036=\352\277\367\276`\322J;\014lj<x~\204\276B\206\223\276\331\361\315>\364\275\375\275\212\004\224\276\244\016\237\271-\214\211>\201\257$>rAd\275\330\213a\274\221\2652\276\342K\023>\324)%\276\026\020\227\275 \276y>m\307\300=\330FY>\016x\344=\033\205\235\276\251G\375<\347\217\225\274&\273\337\274\320\261\270>\321\312\305=\013\027\211>\014yd\276p\257\230\276\237I\313\275\212\0030\276\'\343W\275{.\233\276t\"\232>\020p\251=\004\374\264\275\200\021\251\275\026\211\303=~*\242\276\326\262\205\276\235\251f>u\016\023=\367\321\004\276\246B\231>\004A\002>St\207=\374i\035\276\333(\014\276\316\347\033=?\327\007\276f\036\226>(\345\323<X\"\205\275\341\214\274>\305\365v\276\233\021D>\016\254J\276\251\032\232=A\3013>\222\325P>\306\300\301\2753b\227\276*+\272=\010\230\230\275\232\201\255=\330\273\017<\024\241g>\201\323\212=\344\321\030\276]}\255\275\244h\246\274\r\340\004\276\322\301v\275^\225!>9q\314\274\001\366\223\276\234\210N>\224\350\013>"
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Reshape"
  input: "transformer/residual/residual3/conv2/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/residual/residual3/conv2/InstanceNorm/mul"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/residual/residual3/conv2/InstanceNorm/Sum"
  input: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims"
  input: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/residual/residual3/conv2/InstanceNorm/moments/normalize/mean"
  input: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/residual/residual3/conv2/InstanceNorm/ExpandDims_1"
  input: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/mul_1"
  input: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual3/add"
  op: "Add"
  input: "transformer/residual/residual2/add"
  input: "transformer/residual/residual3/conv2/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/MirrorPad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/MirrorPad"
  op: "MirrorPad"
  input: "transformer/residual/residual3/add"
  input: "transformer/residual/residual4/MirrorPad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\223\262{\221w\221\202\224\241u{\225\201\216\214|\223\203`\202rvn]}f\007u\214k{o\202xoAv\222\312op\212\272}\223mlyy\243\215\227\246\242u\331\232b\210\227\221\235\226|b\213h\222:y\217\242\211\260Ab\241\215\244U\251C\263c~\202Qk\303N\211h\211\211\217\262\210\230\250hRn\255S\223\2212\224{k\264\037\372\226\231\022\214`m\233\321t\241\272\253\246\243\241\201bwm\267\263x\231\227n\276_[}E\220Z\227e\275\226\252g~H}jvJ0wQ\222\252\212\237oqqxjo\210keb\204bvf\273xXT{G\210\204\227X\232Z\203\216wU\203\177\215\230dg\267t\217\215\221x\224\231B\222\231\201\244uV\245-\224Bmet\240\202\177mg\251\313S^\251\231dp\202y\251e\304Z6wp\245\264~\207O\254gO\210\231{\206|Xkra\202\227\241\224\227?nt\206\237\225\207\212\257.j\237\272X\215cht\214\316\335yj|uC\205\220\244\236]v\201\224\306\231z\331\231\222\210\210\235\205\241Ta\237{\205\213|l[\221jwZ\201J\177zo\221t\251\223\203\177{\223\312M\200.y\210\\G\223\177kyy\234\220|Z*\255R#\\n^\247l\222\233\207\266t\265\225h\301l\177C[\212\247\220i\255\247\205\235cngsw\226Vm\206Qwt\214n[{Qx]}\232q^\270z\202\205\231\222l}\207yw\205c\235\217\216a\211z\236w\222\226\217oir\260\227\256\224\217jl\210\205g\241\202\240\236\227eSL}\221a\177\226\\m\233\224\271\222\212D\216\203r|\201q\245\201ee\211\252g\227\202]\222\217\264_\224\251\215\236\212d\233\247t\225\205j>h=iM\204r\212Sn\216\204s\225\210\211:r`\222}R\201\\Y\217\244\215@\202u\235\262C\244\221[\310\252\206Ti\236O\203\230\200w@}\251\203tr\201o\223o\200\222\215}\177\215Qjfgzr\222\236v\204f\213U\210\220P\210y\223Rxec\235\217z\255\250\266\267xe\233\214pvo\237\231\237\234\221x~\215\205\243j\212f\207VN\200\207\243\226m\227\224\246\177\215\205OJ\216\214\270je\201\235U\212\201d\246\235\230\272\231\203w\245\221\212\253>xh\230\207oqpcG\245\224\277\224\252\221l\201z\227Z\'sqilxc\240\213A\230\\|\204q\210\224y}ci\200ja{\236\234ohm\202\177cz\212\261p\204\204\215t\257k\204{\210f.\214Fl\255\222\214_\223\231T\207\214wl\222\247\303\250Sx__\226\301d\221\205M\227hw\250\200\247YtL\214g\276]\253`zTV\217j\200s4\224Bms\222Q|\207r\216\205\202\252n\242N\225s\213g\240+~\212y>\\lmmIkl\232C\252\253\224b\234l\240o\201\233M\260J|y\316\265\267w\270rvsfhIYR\213vts~{\311Y\211ra\233\251{\223\212\264\257rZh\200\241\234{w\204\204\222y\326\214\242{\225\177\265\201\204\251mot\215\207Xk\255q\320u\242j\234\246\\e\270\245\210\216\245}Tfu\026F\234\215bddf\273\254\202\262\245\3109nfu-\235\225\206\206ga\017>u\261\250\234\017\267l\215F\312uY\241a}r8N\207c\233Uo\245\236\201`c`\363\245\205{^t\222\200Ly}`e\306\202\217\226\256\243\300\234\355\301b\205cr\224FFw\247m`sl[w\217l\276q\202\300\232}\212}\273Ypf~\202\213j\242b\275\261q\262u\207m\235\203\217nz}\241d\231j\245cv\200|\221\210~\216\201\221\216upp\201\177\204Txq)\212\205b\230Psu[K\200\226\232\225P~\257\211\177zwz\232\225\216\270s\223\210\304}\201\215`\223\234yl\212\221\202yq\202\256\2752coq\277\204\230\245\233^hi\225\222x\202\210\213\200\215\242`\266{\214~\226io\212\263\253b\222@\251\377\213\231\203}\222eK\232U\231|\216\232\317\224\257z\315i\214l\236r\234\227lr\215w\231l>\207luT\177\202\260\220\177\201f\224\223\206`oi\213\222\220\221\234\214R\220\234hZZrq\253wv\216\207\\mS\200Ip\177\221\230\261V\205d\223r\205h\251\223\212c,w\264\255\214oo\201\240ncy\240\210\210g\\\251Y\255?\203X\220\264\205\205\207q~\217sh6x<\206gA\224j\204TV\227\177\230\260|\223U\205mB\220\217\201\207}y\203pi\241{\205}|ky\205\202\271\225z\177wCl\237tW\210iPt\213\214\317\202\200\236\225\264\202vJd{9zb6P#oq\224\205\177z\231hn0\217n\234pb[axf{\211\213\210\210d\203vx\220\217~s|\177\236Y\221X\\|i]h\211whr\222\235\233Lr\234dS\212\223v\227fhz^\240m\222\213i\325\177\237ed\177\233\253\200\241\210}ioMy\204|\247\267i\202\205\217s\202q\210\200\222\227]v\211x\234\242\232u\230\244\273\224\207xwy\215c\206T^f\213\221\215\177\213\246\227oRl\203\203\230\257ux}\230\204|\234\221\222\222\217g\215yE\177\212J\217\234yn:\203\177\213\216tzlW\201\216\206{w\204\260\223\220\205\232O\204k\240\201u\207l\203\221f\213\244]\202\214pT\201V\207lud\220][}\215\221we\200Zk\\\232xo\256}{~\250\226\204\207|\255\221J\232}^\244\236\213\200c\202apv\206rS\220\225d\240l\202\202\225uh\220\224o}jpmG\204l\202\216\202\206\213r\227z\234tw\\i[jL\223g\236\202\207\213\267\215\237{z\207]\201ly\234\213t\205\223\232|\226\237\207\206x\216\212Uy\232\212\237\232e_\202l\\p{fT\227\220\217\224mx\233i|\213{\246l\222\320\200\206U~_t\301\206\230\204\\qvk\230\206\201\234q\245\237\231\244\215}\217\212\213K|z\226\237\225\203\232dH\240^\211`f\207\221s\227w|m\210\200~\237\236x\206\205\223buS\177\212\210\200\202\251\225\314~y\177yv|{wU\234~m\177\226\235x\233r\216]\222\223\204\245]\220s\240\213\247\177c\200\237\216_?\215|V\210j\215{u\307w\204ra\225\210\243\200q\216R\200w\202c\221g\200\217\177pwPy]|\225\220\203|c\235au~zq\206e\223eph\206pt\221\215}K\221o\222tjrG\237\230tq\306\227\203u\262uu\202lc\207po\206\215\225oy\240\250v\203bj\207\246a\241\213\207\230c\\z|\244\214\205^\206\206\264\205\325\207\234}yl\211\214\\\270\204m\220\225gp\177\222s\215~\223[\200\206qp\247\231W|zg\247g\202{q\212|\237\032\215\230tqW\230\201o\226\206\234|`w|\260\307Jigx\213\265\203\2101|{\234\201\200\243q\214\215\234\201c\\\206f{\232\214\215\216n[ky\277vz\205d\227\225z\215\227x\261]?\216l\240g:yLv\231\214\245Y\202\200w\205C\246R\205Wsgtgw\202s|\265{\203\250\215\260\203sq\205\224\177\221\301\203\261\237l\261\200\241bax~qyn\201G\210~\270\237\255d\203\221\216\177\242{\220izez\225o\211^~~Lz{q\216:U\216O;\251\207\\\253P_\262~g\227v\210w\240y\314O\300\243\327c\223\224,\201\247\206a\241T\215\204\243i\235\224ZV\206\255wKw\225\244i\207i\207\245\213l|\241\213\232t~\215dk\241wo\270\257N\277Rka\303\267\217\237\320)\230.^\241o\227Hj\216\261TN\217\300\222\254\240\251\236x\205\222kr\242\226S}\244^b\231t\210\216fzcm\252\233\301~\224\222\203\200~y\217\230jcd\205t\\dd\331w\203\213\237O\230[_lCfuq\274n{lwX\253p\255\261\233W\177!\226\251fp\204\237\203|\230e\220rpH\223w\217\316bzd`\321n\241\206x\226\017]|5\227\251\210mC|q5\210W\202ta\255\200\226xmm\222\264\226\211psc|i\241\211\211\254\214\210U\203\234X\226\211o}hJnu\226fwyK\204\177M\344\251\207\226\222\320<\247\207h\256\241vY\000#r)\230\220\252yr\217bh\230\224q\311\203\211OyH\201m\216\217\256l}\215p\214\207\227\215n\177]\256o\243\223alhvV\222Ue\217\221\262\2463\221z\203s\241\303\271hVl\202i\215|Jm\222\262\232\206\215m\216\211\255l\242\203kCaL\226\223t\206\245S\200\244h\177\207{\236k\224\233wI\237e\262\241\257uy\271\346y_l\254\221\272f\217L\234bu\247f\211q\230\226\200|jv\201\207\236}b\232\226\201\257\221{\245vAdgrI\242\3002\201\312\211SxvjT\325\202i\222V{j\267\245b}\177\214\223`r^bw\257\210yc\226xmW\204\220N\211\201X[pQzj\216H~Z`l\233\234t~QwJ)\213\236j\230\223m\216\256n\266z\211\252\244P\231lU\301\305mlKXS\202\232l\223q\233\270l\241\216\227}\225\204p\273x\233\204cu\210@\210|s\203r\233\206\202\247\203\241W\206>\201\210n`\214h\233hh\252\233W\235\202\211y\203u\204J\301bw\206\206\256\242}\235\225\234x\223\253h\222\206\262\302\203Xa\231`}YxKk\202\255wm`\215\236\216u\223e\250w\237\306\203\233vb\240s\264\242\234hocy\212\257Du\241kg\220\223\235\226\222\260\242\236,V\201\261\267\212\231\213\251w\272p\211cwp\206w\224J\226}\222U~\243\206y\227\257\240sJD|\210\177V|\227}\257re\177g}\245l\227i\240FO\220u\241\202nP|OY\207{\204l\270\201\252H\216\231pm\304\235[R\210\216Q\236^\302{m\362gp\223\177\272\252\260\205wkX\213x{L\243\252\206\224\233\177kaeuk\243\232\221nu\315v\215\223r\200\214m\210HQp\215\201\225Rj\2112\222\201\212~H_Qs\263lq\265\240\212y\257\202_\215\225Z\212*w{\235\261\\y\243\262\234\217hO\210\245?\214fm\266t?\211K\253\222\232t\242l\316\244\266\243\252\206\203}c\224y\271\225\205\213\222o\222\221\177\242\207\235\232e\222k\235\177\237za{\222*\273p\177\213_L\207\215i\232xpk\273\215~i\301\225C\217fy\214\324\244@`\224\251\206\261c{\025\202\225\232\235^\234fd\206\206\211Gst\207\207Tr\203gajb{\225oV\263x\274\2439u\273a\243tB\213\257\265\2069Ss\036n\246\214|z\306e\232\207\252q\235\240{w\201_l\206\264~|\226a\217\207\241\177Mo~\210\213\255}s\214\211z\260y\277Yjs|p\207\232\244\204\251wo\234\226\225pp\207|\223\207m\221nb~}\177vItj;l}g\216|\205g\215{w\202\254\221\214\230m\206Xj\204\203p\210\234\200\254\305v\243\211\200\221\216vt}\210H~xm\211g\265h\232\215y\252\206\236\221\224\206p\201s\262\244\235\204yrfdTqQ\256V\222\220D|\200kQp\206\215wz|\231z\314}\204G\214o\306b\255~\205\205|o\254\250\216\214l|\215\234\200\207\201\201fqtz\203\204k\216w\221}\206\203\205o\204|\177\231\234\243O}z\177\233r|h\213U\200\201fnm|{r\206\252t`\301\264A\217\223lV\226\\vV\177\177~l\230y\264h\261|\244\216\233yy\201d\226\213\217\230]N\251j\220O\207kjy\224\212\177v\266Zo\257\205\236\220]Z\206\177\205}oc`\201\203\263_{\206\244\202\177\213\250\264\202\201\204oXfy\210miz}\201_\201i}\201\204yX`D\223\\\201l\204\207xd\221C\224\212W\202v\246\222\215D\217\223gvy\245lsq~\221fbv\216\253nOv\214\230\220\\\177do\202\245;mxc\224\206\233\224{ix\222\233b\204f\212\177EL\217\205W\201\202t\203e\037\\\265\203UmGn\217\212\252\233\217\246s\247\215Q\243\212Lt\202\200\205e{\215m\203\275rwc|\231\210vv\203KzPqg[\232~\207\233\203x\205K\227n\210\237\214j}O\215oq|\230\222\244\227[\233\221\237\\\200\212X\211vu\202\244\240\240\255\200h\214\256\200\231\177\251w\272ryzj\210g\202\217?n\227\204\211\252\200B\242|v\222d\241\200\235~\204v\212\223\204\215k{\230\241l\261\241\232g\201\242\216\241~vy\223LGf}\223r\212mQx}q]j\211\210a\216j\243m\234ydj\241\201\231Y|\205u\204R\227\217\223s\213\237\201p\226Ia\201\242rVk\253\201\222b\226~tq\214zz\177\177\241z{\205Yzs\226\211zo`t\202f\260Q\224\225\221\235p\211\\x\214{l|\227k\224n\226i\212w\\\210\215\233_\206q\224x|tt\205W\215_zW\217\216w\237\204}\233up\202rprwu\205\221hu.f\\\220\205\207\222o\237\215k\252P\242\315mi\210\214\206\220\213Uoq\242\216/\225\241\2176\201\226\254\222\202z}\211W\205k\230wg\225_xq\224\233\254\205lX\226`\202*\217\202\221sa\204^\211Px\234\274}`\226t\220\235\\q\226\212fV}|\230\213\203\210~\234\210Xq\262\254\200qv\200\236\204\252Z\216t\222\223\207\326Iq}\223\222\244gapnrcU`\232\242\201u`\240\244\224`adLx]\203`\244\234tu\234f\204\200}T|\221\221r\203Dr\230[Ilt\232\216i\201\216\205<\233\214\235v\257u}j\203\205^\262Wx\210\250\221\231M\225y\211\233s\243wf[\207jok\214\224\250k\226t}y\245\203\245\230\226\252x\207\203g\230\226z|\210u\201~{u\201R\225\216\214y\237\202a\236K\212\231\\I~u\255p\230p\256\206Vh\260\276\212\256~\220j\245\200I\232\177\240\202\246cG\245\214w~w\241fs_\213gzh\215R\231\230Jj\201Z[\233:\273b\213G\306_c\230Nzy,i\200l\230\203\220yn\216a~o\327\245\233p^\203\221\206F\322Ncp\204\216gBu\244\212\205\231\243yusdjG\210x\256ilz\236\210^\222f\256jl\234x\207\203\205`t\207v\201\232\206\205mm\214\230\264\222\230z\212\255\207\254\327y\205\217c\251{tpn\200a\201}\211\237\203~zV`t\202z~Rm\204Nwlp\225^}i|\215q|\245\200U\231~\240llyv\221e\227~\226\212q\223n\201\230o\203wttyy\206Q\273sDav@q\200\227yp\234avZy\234\211\201\233tl}\203\216Kbh\200\223\211\216\206\220\253T;e\213Y\346\221\216t\225\203]M\253\232\307\222\224\226\254\215\232\200\240_\204\252\206]\206\236\201u\230io\244j\201\225\210^}\264\221\177\222yo\224\222\205^\221\270m\245\213\262}pjz\235\211G\\jz\222~\177z~z\2319o\321w\205\237\224wd\230^IF\201{\227\220\200|\027~\324\232\231\211e\207\234\215w{\313\212\200MR\215\201\227M\215c\242`\224w\224~gzyK|\253|[up|\204xcj\330m\237\224Y\220\177]\226{\214\247\214\236\212\222\213Zx\177j\207ucj\213\244t\223n\202zYWoOpu\212t\203\205\177\202{g\216\224p\177}\224a\236\301\227\220\257n\221\221L\202s\313ezK\204u\212$\201\177\237\244\225\204qxu\221\246Ex\222\\lt\210\220}Ft\201zL\242f\233r\\j}\220Osvb\215})\201z\211SrWh\217s~\217u\204\202\240\206<\254\212t\212vt\206\214\214\213i~\177\203R{m\207\231\241|\210v\212^asn\213\216\236\237\211i\203n\217\205t\241\256\226\207N\202[\200\202dv~7G\273\231\223}v\210a|hkv\220\207\211\213w\214\216\227\202\226\210xs\223g\244lLqk\211\251\215y\240c\226\234\204\212|\217\204[~\232Jv\231|\201\217\223`\246cdw\223\237\252~\177`\221\231h\230]a|\230\\\221|z\212u\201}apsxuNT\200\215\201|\244\177\226\234x\214}x\232\217\204\216zgl\223\204\236Xu\234\234q\200ib\200\210sdy\216p\272\216W\230~\200vqk\242\205\201\203\234C\216x\210\232\203ik\210v\221\233\222~}\205x\231d\210}~f\230Ix}W{y\230W\240Wv\215x\202W\233\201y\261wb\207\213\200\202ew\227\223w|\246\\orniox\213ecu\224}x{Xez\232\212|\217\200\202\210Y\201vc\330\253t\221d\207\221\211y\240\217\223r\"\230\212\233\202q\211\216\215\214vs\222{m|\232BZ\241dtd\203\234\232zvz\276RzI\222\205\202\203v\213p\177hv\211\247y\203s\256\242\272sswy\202}x\220\201\211Cx\215\227\223yp\247\231\206qd\214\177r\203{\215z\240h\253\346\276\215\300{z\244\220\230k\247dn)vykl\177{\232\251}\244gay\232Z~`\201\301\211l\256H|jx\205y\232\202\213[uW\212mm\212b\207\215\233|\227ek\200qzt\306\206\200\215nuO\217\202~\223\241\207vA\222\215~\215t\217\201x\227y\205\204_\217\253\226m\207mpm\272q\235\223|\204v\202\222w\231\221wx\217o\227up\200\204i{jcb+\233o\202h\203ei?{q\201S\207^vv\201g\234\253g\215\200\210\241\201\244\215\202i\224Sa\213\232\221}5dib|\205\243|i\222Rwu\212z\211s\215`v\213n\203\211\235}}\202~\204x\215\220_]\207zy\217\250\234\212ma\200\214\243t\206wz\203\223ul\235{\205f~\323xm\260jo\200^\234\217\247`nbg\225o\202r\202]\225\254\214ys\211Km\214n\215\240\207\215\216\213\207\215\215\210\233s\213\211\221|\220\227\222\201vk\234\236rumA\230\204\243\246\243xw\205\222\215\236r}e`h\217\241\203\211m|}]ls\203nLb\203]}\225q\177\202S\206\267\270{\177]ortg|s\221u\243\\\210\2533r\217\256\207\230v\214\240[o~\214uhk\243|Ltg\200w\177\202bp\214\177x]\204\225\221\225}C\203\203e\214\177v^\240:\005b\236\236\242\252\2429|(\\\234\253\203\214xh\252f\217\267|\223\230\237\231\222\222z\206^\221\244\\\213\223\206\230\211\207x\265\217n\215\203h\211\276\213\207\246kW\223\232v\207tmaD\234u\201F\200\231\202\177~\213z]_j\225h\177is\244\220\215BGZ\244\234\245\250xzy\203\245\305\241\250f\234\230{\237k\242\\a\203oP\235\231G{?\201jy\212b\214|{K\226p\306\304\203\275q\207i}\214g\246\255|jpy|\200pi\206u\204\225ls\206\214m\214z\263\232rZy\237aqv\210lMG\213s~\203v~\211\207m\237\203\206[\264{jP\210\267\200\253\322l\272\244\257\227w\221{jp\241d\213K\206\236\201z\220S\213\222I~b\216y\207ctfZsk\207\2028uQ\212h\247\202\203\\pih\217Sq\207q\224\240%\207]\206f\200\233\202mav\207u\200\215oeY\213\177p\263wpf\222r\215\222\236P}]\235{p\200\236b\207\224\177cq\200zl\201\225\253Q\201ZS\204\221z\230\325\244eDn\240\247\263tuc\230\241\226\276\247\233_zsl\226sG\223c\204\177`\211\202\201\247\232~\215W,l\224UW\216\226k\226\364n\204\222\177wq\256z}\240an{}\202\213`xxB_\\nL\201\255z\255l\225Pt\252^\224`_yPWymy\236op\201G\204}|\262gTk\244]`\304\242\211\230\210}\216\222s\252m\242u\204\201\224y\250\\\233\201xmR_\232\214q\234~\214{\214\206\215\202\230\234\203{\267{\237\212zx\3011\222\201f\213\225uz\232\203{dm\260t\226\221Pt~~\204e\234^j]}vz\203w\233du\240Y~X\240\237k\242\200\204\210\226\217\247n\217t\221\232\202\224b\220\220\207|]Y\2216\213|\203t\223\203}y\216x\221p\206v\177\214\212e\244x\305\332\206\212tz\220\200\246h\201\221^Mw|\227\234|\230\244X\204im}\226z\204y\265s\253\201uzyv\220\177tZ\274[vQ\215\216\201\236m\224|\202pv\203\257lqq\240t\223\\ljh\200\203j\214|\211(]\223\221w}di\202vI|\226`H\256\207\227\236\230yJ\260\324\246\231\215gz\247\244h\327\177`+\204f\206\271i`\237D\205pDus\252X\223\215\233\262\316\221\226c\177g{\215\211\246\226\213l\177px\237^\207kK\240dk\204yoY^\213o\276\266\203\245U\201Dq\221x\236\255\226~R\213z\217\207\201{Ke\225q\225\252M`\255\220\224\204^UW\231C\207rs\252y;\230f\225\241\206\204\242l\255\241e\232\227ds\207tO\205\246o\201\207\210X\207q\221\247uT\240qwX\237s\235\200g\210\207{\302|\215\232rb}y%\242\303\245a\216{pe\205{\213xvr\227\222\211\177q\257\226\210xW~T\205\200\275\200\207\241haw\224\232Oi\207\224\2136\212\247\215Ur\202|\233qy\222]\301sXhor\177ml\250\357\241\267q^ylq\233o\202\177p\201\203\210\244c\202bJ\227\237i\203\212o\201k\242u\220l\212\226s}\241f\243\243J|{m\267\227\205\230rrqm\230\221\222\262\212\223y\230\245\312\214if\235H\236|\217\225f@\215\245\206\\VbD+np:~[{l\206d\211a~\266~\212\\\224ij\220~\204\211\215l\234\214V\223\206\227\211\206g\220\261\205WzgScV\247o\243\214\177\235\247\207\211\251\226d6\202\226ad\241{;_ogee\200q\273w\206\214}P\214\215\205\225\235\200\204`\362\265t\210C\200\236\270_\\\276lz~\216FX\256\222\250w\205\226\227h.bbY`M\211k{\274\212\202h\252\313\206\231b\202\222\231\236\302lvkj\233j}=\202\224\213\240\204mK\203\211\216o\234`OW\225Q\234\222bq\212lz0r\201w_nz\201j\223s\212m\253\216\221r7\255\247q\213\276U\234\243\226%\203\200{\213\236i\252\222\250\215\201\201K\224p\273S\232\204pP\202UwggKhU\234\215\220\207\231\203\225\233\216\270{0\245\223\200\221[\211\236\231@^q\202o\223c|_\224Je\204]{mP`XBr\216Z\241z~\214_^\216\204VSs\233\021bxx\244\220\245bf\270\\dl\262\210\216pvYy\227\212Ucqx\261\200\231\200\204ry\227\272c\200\215\206qNH\235\216T\247vlv`\037J\306\233\222`y\205\247\323\270\221\207\250\213\240re\216\222\205E|i\266F{~6r\323h\230Q\202sj;|\247qdg\257[]oQ\201\255q[m\206\242\224z\231d,\244\206\177\210\210\201y\213w\217t\213x\231\205\226\221\205yq\213s\261hj\223et\217\274\215\221\242u}\255{daM\255o\223`.\224\203ys\220hb\337\270\244\216P\213\223\262:cbR\204^\206xz\220\242J\261\244\235\271\223m\247\226q\243\177\2158<i]\250q{Ys\217|H\204\215\202\230\214\2037\226\200]s\177\177\226V~vR\227n\211w{\224\266z\236\200\212S\2062\177\244\206\\DZ\307}Hj{\222n]\244\233}|\206\\Z\251iTtyc\244\202xOC\220B\241j\200yz\220\236\260p\177c\215\201r\202\206\231\261\250\263oZ\234y}\234\204os\216[\212\236}\212]\257Q\223{\257s}\205\223\200\200\207Q\205g\206\223\211MlpscH]n\204\204\221\206\204\210`M\274\230\200vbgr\237\242\215\177\206_\210\255hxv\257\256\034gt\235w\273\222Z\247T\253k\213@ov\177\200\210\241\231\332s\221\037u_\224|\232Z\256\222i\234YjW}\225\252|_\226r\202\223q\215\204\207ht|\242\223t?w\226\222\207LZ\262\253w~\223^\210a\231\224\202\201\203s~\224=^~r\275\252L/rn\222\231v\\\271\346_pjdx{]jcjWZry\211pYV\255w\223\212aL\224l\237\225}J\232\323(_mx\214\254\205\233\251\2505\216M\251q\242ndv\263\221h\223X{t\236\235w\211\272\311C\226\235e\234\310vw]ap\202\263e\247\221\203\245s\225o\256\214\251\346l\203\177\234\240\266\200\207\210a\220\223Ugsq\230\203kX\314_[\250m\206\300Q8Hs\265c\266scp]W\271\255\241\315~\223~\220\212a\324\200nm\264kl^\241\203o\330=_\\~\212\225z^X\260\235\244\216\231\310\237{\275<\273\212\220@\270h\206o}Rz(R|n\271\216|ct\236\202{l\272\223\211gfkj\241X\224izI0V[q\203\220r\255\020\177y\231\200\203b3i\271\237|\214\234\223vv\301M\324\037l~\304lvb}_\220en|\254\215\217ev\215\243\213shx\305\274Y\274X\213\242h\226\213\226}\262o`s\224m\234y\201\235ZR\225\212\177_hP\\`r_fo\\sl\207\206\177dr\250c\204Y\271\211k\204e\255i\210Z\214ljir\225\242\235xi\244\212dId\200|\254\245Yrn\243b\235^lfttE\223\216\212d\236\223ky\201\203Z\214q\200\303\202\302\210\301\213Z~z\321/\237ZZu\242\207pCl\214}\220E\200{\257|\217\034/\271\250\212~h\234|VTAq\250t\233\263\202u\246\255wo\203\216{\223t}{\220\305q\214\222~s\266\224c\245\247\216\312\231\241\231l\203k\203k\233BN`\206u\234\224s\210\253u\2014\177}x\201Y\2428s\246m\222|z\253\275\230o\211\276\213\212\237vt\246u=hf\242{\236fN\231g\235j\236\225\273l\214\210\223\227\207t\222c\277{\216a\220\245\230|\251\222\231q|\270\217\233\216p\242\276\177\217ap\234vnh\215\203[\2151nn\241Yx\177_q\203myD`\206X\201id\207\242\252\231\217\234\262\241\305\260\232\212l\\x\312\267\210p\234v\244t\245\237\241zmmt\216\223;\200\224i\245yp\207v7|\207\255P\216\\\211q`j\207\225P\233\203`rqDw\210\221\231\177Rp\232\257l\233w|\232\225\177Q\216\207\220\217qP\265b\210\212&uxpljyf\177\240~\252}\207\215\214l\215lx\230\216\210;\205\233\270\207v\220za\224\231\216{\200\207hph\2212\247|\235\202w\206~\204br\227\227\210^\207|z\201\225\204\202\255\257\177\203}\221kS\236\232\226{\217\242\203i\246\244\207\262\253\227\225\217X\216c\204ti{vv\\\247\\Ts\253}\250\200v\273\220i\250\236U{u\227K\177eO\213\200se|hkffuZ\211\237\177V\224\217qr\220\214sf~\222_\216u}\241y\232\252|\204\230\217atN\222\240jjjmwa_{\326\247hl\237\232t\233\213xc\263X^u\223\217\177groV\206H\230\203Pjfwy\233\213\200^\212Yzg`v\224\263\221\201C\235{~\206lvw\203\223\211y\207\250u\235mv\204\245Ty\267h\215tr\212ov{qF[\210MiaPf\206\202f\206\213\220`gj\234\236biz\202\204\211\254\255n\235x\247\230o\226\200x\264Pr~\227\206\245\215l\212a\207\200\224`P\204^wx\217\245\263v\233F\252Iq\214\240t~\224|\202hWdx}\316p\226j\257\242\226juy\225owy\211i\200Npx\205\202p{\235\232\203s\207yyc^\203owu\204\214~\210u\323i\325\266\236\226jO\215\216\223\207\215\202Z\227tYsm\254nSzzbm\203\225rky\261h\244\210\213\222\225w\207\241\215\207\220\260>u{i\201\205\304|\224}R\236:\177\224\256\203\207\254\221\222o\233\205\201l\222\242\216s\275\276M\207\235]\225\257\312x{km\242\316c\204\221p\264V\221i\242\214\243\276|\\\217\263\241\257{\227\222o\245vR}o\206vifE\224X{\211e\210\215`DsH\235B\253wRl\224o\250\231\207\242\246\254\227v\233lz\220N\214\267\207xX\302r\210\274\231\200~\217\230\204y\2067\236\311\225\210\216\231\235\241\213\227\252\213\220u[P\226wr\\\203DK\177Z\233c\214\254\203M}\214\217\212\206wxvY\220Xur\203Q\211\264rTe\310\221\245\274\220\215\227n\213\251\177\223\213\243\233\272\237kwl\255\252e\271Ev\216\213W|i~q\211e~\201\222\226\235v\251\200`\231\210\177y\226\225z\243]i\202@\237s\347\210\303vtu\234`\214dq\217s\204\244\230\212q\221R^ibv\235lYR|kzrZxxki\177\324\233t`c\211\177y?\214|\221\207s\231\251eg{\327\244s\215\177{9\207\202Ou\214\236|\203c\205ib|\200jyl\211p\262\226\231\220\211\267\2569\216lw\264E\204<joX\271L|L\227=7\211\217I\240\207\201\230ls\234\267\213\256Vo\263w\224\200\225\201rttol\255\230\255\260\255o\224\222|f\203\211\220l\231x\231\206\212\227\215\226T|\240\211X\200s\204\275|\213vb\247\222puZ~[|Hu\220\263\243\212\251T\210^\235\260\217\255z\211^\216\234\256x\261\203\317\245\214\270n\257Yp\267k\035\233{,t5ai\221\205u\207q\301X{xymV\205h\252]\340\254j\200\261\213\214\207fp\242\202Z\2138\200\204q\215\203\263O\340_\274\214c\217bSe\202\202\200|5V\217\277:nja\213\220V\307:Tw\241w9\227\225j\251wl\243\272\225\320v\335\177omt\214\235shk\234fO\233k\242wOXY]x\200\207\226s\212\200vz{5yc\312\177\243C\214^\212ns\213K\251\240|l\232Gxn\206\231y_w\202\256a\206\177g\214jpqnf\210\237\\Hv|i\177\235\202Agb\232z\204t\227[\253\236\211\251\264u\242\226x\215|Gd\217z\224\243\217\213\276vLf\232\265\251\267|}\032\243l\240\276\254\235x|zz\201gg\224\217nvF\200}\205\252ty\224x2\222\235Q\215\307\213\177s\300\214m\244\216\214\215\267\233p\241\231q\207\220\237\204Xl|3y\206S0z\251L\261o\217\255os\235\253Uo\212F=wHSrk{zv^\216|\201y9c\237`/\262\233T\205\240~\203\202T\221_\230\214\261\274z\226\255o\257\216zT=@\262~\216\213~\203\242\177{W\223\254f\201\204\227r\240\243\214[\226=l\205\215vq\215\213xWGav\260F\203\217INv\200`a\265bsC\\v|\234\230\203T\2557\202zh~\235x\222aw\222\254\203\307d\243h\226\205f\315i\227\224y\247?Sr/9^zZoha\222\232\256wQ\220\203Y\202\300w\230E\216\236W\226\245\276\254\202\230D\246\223e\233f\201\255au\232\310/\233sprp\226n`\321m\221JM\215\203\177\222\211\210+\2544S\206\200|h\210r\231t^yvy\305_\235t\227u\301[\177}\230EnaYz\220Es\203v\223~yj\222\206R\255\215\224I\224}a\240\177\226\211|\211a\212\203\222t\242\303]l\234jr\261u\223\200mR\2018\231\223@|`\232\237~\220}q\241\221\207\212\270i\250\223\240^\262\210|\237\220{\203Ps\2110\250\212]\217\207=\2732~t\222\224_\257\202\254`\241\232xm\265\262m\250\235\247yz\206X!\253\300u\213\217XN\312^\211\222\\\236=\211H\205v\201\342\204\021\212\274\205\275~\252\246~\256\260L\212wthM\216\032\236\205f\225P\223\210\204t\224o\220V\277tZh\231\213\223od\237\202\302\263X\204d\243\274t\265\230\211\205\213\214\244\210}\306\202{\214\211?\206\236Yo\232c\177\206ku\221vt\250l\267fV\237|\213XZ\220@_\207{\275;f\326lZ\200\216\177\206\200r\206F\252w|T\206\223\201\236\275lHX\254\225\242|\357\205\223\'\237}o\271\177Y\247\213T\\A\224\220\234\207\261~\220}\245[rz\204\207\200b\241`\243\216\215x\262w~\237\220q\200\204\211d\230\205"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.951134860516
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.948883295059
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/convolution_eightbit_reshape_transformer/residual/residual4/MirrorPad"
  op: "Reshape"
  input: "transformer/residual/residual4/MirrorPad"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/convolution_eightbit_min_transformer/residual/residual4/MirrorPad"
  op: "Min"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_reshape_transformer/residual/residual4/MirrorPad"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/convolution_eightbit_max_transformer/residual/residual4/MirrorPad"
  op: "Max"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_reshape_transformer/residual/residual4/MirrorPad"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/convolution_eightbit_quantize_transformer/residual/residual4/MirrorPad"
  op: "QuantizeV2"
  input: "transformer/residual/residual4/MirrorPad"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_min_transformer/residual/residual4/MirrorPad"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_max_transformer/residual/residual4/MirrorPad"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_quantize_transformer/residual/residual4/MirrorPad"
  input: "transformer/residual/residual4/conv1/weights_quint8_const"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_quantize_transformer/residual/residual4/MirrorPad:1"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_quantize_transformer/residual/residual4/MirrorPad:2"
  input: "transformer/residual/residual4/conv1/weights_min"
  input: "transformer/residual/residual4/conv1/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_quantized_conv:2"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_requant_range:0"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/convolution"
  op: "Dequantize"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_requantize"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_requantize:1"
  input: "transformer/residual/residual4/conv1/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/residual/residual4/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/residual/residual4/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/residual/residual4/conv1/convolution"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/normalize/Mul"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/normalize/variance"
  input: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1/shape"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: " \201\207?6\014\246>\021\221\341>\037\301\273?\177\272-?\237d\202?{\010w?\2467y?\026\252.?\"\372r?>qS?\326+\021?B_R?pp\004?\227l^?\305\300\230?\257\260\203?\314E\243?\270+\214?u=\250?\225\200l?tq??\'\346d?E%>?\317\323_?5\332c?F\264A?\361\344\007?\262X\254>\334\037\220?y\225\211?C~\020?\007\267&?#\231L?\324\262\006>c\310,?,\037\'>\250\336\217?x\031=>o\262\n?A\320V?\317\214=?B\311\247?\0322\013?W\253H?\370o\357>z=.?\372\370\202?\310\225\222?t \346?\252\037O?\002\350}>*\0300?\025@]?\013C^?\355FR?X\277\024?\327\222\034?P\225\277?\363\2265>\270\'\024>\375\230\305?\366/\252?N\t<?\340\211>?\335\345\021?\222\310\213=\231\355\242?|\314\253?p\225>?\027\"^?\237\225^?:\310O?\001ae?o\022:?\372\273(?x\244\321?\255\250@?I\204\002?\336y\257?\'\031[?`\221q?\334\325\003?\0016\264?z\3643?t\2360?\312\014\207?\000\303;?T\250m?=\\\275?\323\324`?\207\362q?$l:?\334\034\225?i\024`?J\2213?`\363\240?\201\235\375>\037\036\342?Ov ?\212\215\316?\332\202+?\010\016\024?\263)z?\332[(?\344Vg?cF\223?M\032??\267^\177?~\264\244?\035[X?\307\335\302?!\262\234?\340@\'?Ud0?\'\363\024?x[\207?}\373r?\246\022\017?\271\240<?w\031\214?\201\316\002?].c?h\363\236?\353O\377>\370iV?\215\213\207?\372.\273?\255\323g?`\254\021?\262\365\345=\310\252\212?\354]\177?u\2704?$\313\'?\031\305e?\355.\020??\025\212?t\255f?\3448\275>\377\313\257?\235\266I?\217\336#?\210\022\232?\2520\222?\037\035N?\255|r?76\262?\236\307\210?\214\033c?\023\177\213?\372g\232? \331\213?\307C%?}\203\030?\331w8?na@?\327\341r?\253v\217?\223\265\035?\231\312K?b\316<?\227\373u?<\032\216?\341\034\311?\020Lh?\333\277\245?,z\206?\357\004\014?\212\200\220?\243XY?\335\033\"?\352\237\212?\200g\207?\227f.?\217\004\304?S\201{?\000\315>?\327\351\206?0\202\200?\"\207r?\352\'z?\357\276i?0\332\231?8\232F?\256fl?O \\?\260\004\'?\3356\256?\032\n\213?\366\324\226?(\204\032?\267&i?\0355\366?/\335\r?\250\270\331?3]\250?H\223\236>A\304B?\207\344\355?\2735 ?HKF?di\005?\032\217\205?\225y|?\351\3140?X\022\006?I\323\224?\t\247\345>\270\357]>D3\032@j\020\267?\361\367-?\225\003\037?\035\336\026?\276\367\001?\356A\203>\214&\265?@Q\005?\210K\357>0\337\233\274\271\202\327>\350\347:?f\010\337>\247\316!?\325\034\033?\335g\246>\275\325\226?$\'\007?\326/V?\036\244\304>\346\356$?\314\323b?\005\000]?y\302G?\340\255(?\372KP?\032v\001?8\276\314>Ynv?\342GJ?E`\333?!\320\\?2i\262?{5z?\257\025J?J\226a?\314~\342?\265\222\220?\251\2554?\321\213C?M\306F?f\314(?\250O\200?S\260t?>J\216>\241N\021?\350\316\327>\342\325\377=\223ty?\221\376\245?\205\255K?|\300\036?\327\311e?\027\207\010?\360\255O?\374G\212?\217\357a?\213\235C?\235\347h?\035\n\214?\230l\241?\016\243\225?\t\233\254?^\210P?\240Z\n?\221\r\371=W\336\233?@M\014?\326\016\005?=\244&?\337@Y?\366\007W?\230\272F?\021r\217?L\3131?\026#t?O\207\024??\366\030?q@P?\313\226v>/!\203?x\375\274?fm\374>\032\336\312=\375\343\315?\022\025\214?\246y\373?\330\215k?\336\333l?h\230`?\n\353N>\363\252\212?\334\366\262?\353s\211?Wpu?\355P\337?,-\350>\213\221J?\312\274\231?\030_F?\266\"<?\035\221\275>\227\354%>\237\243\277>\252S\021=}<R?Do%?\254\252p?\234\331\240>~\021\361>\005\020X=\257\017\373>\345=J?\265l\204?\365TH?\256\316x?\223\320s?\337\222\"?A\332\232?[hh?k\347g>\003\362c?\023%9?u\360%?\313\324\236?%\312\240?\330\205X?\325\354\023?\275\240\225?h@\346>Drn?\031\320n?piO?\3044\220?\001\331\246?\361\005=?z\215\001?\367\234\005?\332A\212?\276y\276?\021F$?\331\343/?\325\240\\?\340\3635>\010\201\303?\005=\244?p\306\306?;\326\024?\343\315\256?\317:\213?\222@\\?/a\224?\257Q\376>}:\317?!\005\244>\243\221*?}\226\253?r\000k?_R\226?\031\317[?o\353!?P\007\353=\275\233\217?\22280?\326\310X?\260~%?\003v\244?\320\n%?D\037\303>\224}O?D\230\211?H\243\256?\207\215??\316!\315?\036j\202>a\010J?eqv?\212\365n?\207\333\227?\253\302\252?;\266\255?\252\344\\?\321\304A?\304\334\035?\034\030\237>n#`?m]\233>\261c\343>\207\231x?\275\230\220?[\330\245?P\251|?\217t\223?\351\024I?O\337\024?\002U\224?\247!\204?\376L\211?\243>s?\032\324M?i\342/?\t\035\317>\344KS?\031\357\204?a\265\t?\375/\002?.\214r?\212\361\355>\006*\216?p\305\214?\027q\223?\275\212\025?\257\363K?D~1?3\303\211?\323\360\253?2\236\036?t-\234?W\016@?\235,0?\030k\270?\326\327\234?Z\342\215?\001E(?|ma?\177\212\210?\315Rh?\222\3422?\302\300\242?\373\361*?\037\207%?\177iG?oD\312>\375\244\314>\251Kd?\2144\277?i\353\224?cW[?\022\334(?g\233\375=\214{\'?\303\201!?\014(8?\271(\030?\322\367\251?|\000\r?M\tp?\325{O?Z\353.?\252\252u?cI\200>\032\213t>\007\232[?\330\377\216?\222Dx?\207\354t?\315<\231?\347\037]?\2726\234?\310zQ?\233\210^?\202\025:?2\3453?>!c?\315\026\373>\355\274\311>u6\225?\024\240g?5\345^?\"\2606?\017po?\375\256\001>\362c5?\001\347\224?\037o:>\033\207\331>}ec?\304\3343?,3L?9 i?)Z\266?\363F\370>\023\'E?\3645\006?\206\n\257?\273\207\260?*\204!?U\225R?\213[\002>\213\370\031>\215\021\000@\245\0319?^*\033?0O\030?\303\310,?\204\304\034?\217\206\206?\372\212\333>\215\300U?\224G\\?Pc\t?\244\310\221>\016f\227?O\205M?\035\244\016?]\303\334?\352\316\221?\235qs?\013Gx?\301r\007?\204\023\227?\303H\017?\260\227\204?\312v\320>E\274 ?\272\033J?_N\033@RW0?\366\244\213?\226\353\346>!\2021?T\331\004>\271\350m?\013u\261=\327\3756?\331\336\303>>\376\204?\370\356->Z\021j?\023\354\224>\255\010\203?Lt6?|\266\306>\033\235Q?\325=\347>\361\006a?\016\004\024?\340\244X=\3743\265>U\202\202?\317\263\016=g\326\215?\231]\230?\216\237\217?\014\262\207?\334\371\010?D\311\261>\327\217i?\251\273\247=\367d\350?\216\225\245>\211\366\032?\373&\260>\322\274F>Q\030-?1\013\335?(\337$?\236\364[?+\331E?\253NV?\255\235\347>.[\232?\014d\202?\333\213\207?\310|v?\217\234\346>\357T\006?\364\274k>\340\276U?F\233o?\371\345\226>\022\311\031?D\254\210?\013\354v?\035xf?|\343W?\332v\227>\366\235\263?D\244e=\030\303\200??.\225?\033 \264?\004.\216?\342s\210?nZf?\3774U?\003\033|?Ky[?\216\246\263?\350/\203?=W\345>\371_w?\2269\201?\251\236^?\260\340<?\232\022\212?\177gV?7\235\314>s\0273?^\252\n?\253\"7?\233[\316?&\327d?\2205k?\037u\200?0\207B?\370=\227?\277\365S?T\203y?u\372\332?\246\030\013?\265\222D?\243\357\017@\026\245K?~\036\202?\231\r\210>\317\"<?\027\2031?\232x{?\020\370\250>\022y\204?\242\317\034?\326\203Z?\204\365\023?,/#?\035U\">0\277=?f\313\224?\221\223e?0\2303?\013\321\036?\360y\237?)O1?1\270\265?\036\307\211?\313\217\"?[\245l?\207~\230>td\222?<\327B?\210\374/?\315\343o?\373\2452?\374\356u?\004;\214?+g]?\250\264\202?\216\240-?\3173E?\205d\266?\201\210\203?\024\200\253?\026\315X?{\3456?\034n\035?x\2427?$+1?d\312\271>\203\356\307?\234\037\244?\0010\204>\364/\037>\357\370/?\027*\032?\372fE?sl\032?0Df?Gf\347>l\036s?v\263\335>&\202\211?q\354{?\353\203\337=W\301~?J/\000?\265\225\020?\277\023m?\022\324\243?s\301d?F\246z?\221\007\256?/t\227?\301\211Z?Y\277\214?\336\364P?1x??\037Gw?\220\254f?T\304\016?\351@#?\257L\245?p\246\252?\023\342G?i\r\204?9\327\312>^\333\245?\263F\232?/\347\217?\333\302\253?\316\265N?\330X\202?\251\233(?Z6U?O\177^?\376|\350>d\302\233?\025\214\221?\257\310\254?\341;\245?\240\'\211?\200v\232?\036B\177?\336Tr?\216\201V?qko?\263\022\225?\361\371\237?\340\251\037?bY??-\352\027?\213\366J?\223|\256?\021\246\215?\331\363\221?\"\014\206?\004\004\016?\227\355\276>\037,\330>\313\014\223?\001\344\021?\016t\333>\332e(? \251R?\344\247\'?\361\n6?4\270\'?\204`\266>\"$\232?\351\037\233>\"\345e>@\373&?\261[w?\334\233X?\002\374@?_G\313?\000\320\233?\301\325\305>\333\200I?\356\311\215?k\034\230?u\003\005?\201\024n>\026\016\334>\031\246\271>f\020j?\273WV?\377h\000?c\311\320>\336\371\032?4\336\345>\306\3368?\226\206\207?\201q\220?(\002a?\253g\276?\326\0228?\241;h?\217\315\235?B\003n?\311\372\270?G5\227>g\027X>\2234\260?\360\014!?\275\026\245?G\322\030?h\302^?|\0263?\027m\234?\004\216+?\221\263g?\355\362\351>yFh?\247\034\216?L\032??C$\005?\223\335\025?\262\265\250?3\235\212?~{k?\321\312\237?\324N\330>\370\263\255?\"\246\330?\372\325e?zg\314?\334\243\243?\003\370+?\031\301\266?\022]L?cV\220?9g\225?\350cI?\300\360\020?\177\001\357?\222\n\200?\372\025#?ISu?\004\320M?\262\365L?W\367r?\212\244\355>J\242\225?<\246;?\262\013(>\207{J?j\310:?\002\3641?gy\317>Z\330\226?\3166\354>"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_1"
  input: "transformer/residual/residual4/conv1/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/residual/residual4/conv1/InstanceNorm/mul_1"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Sum_1"
  input: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims_2"
  input: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual4/conv1/convolution"
  input: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape/shape"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\347\205\r\276\264\351<\277\\(\031?\032\275\342=n\326_\276q\034+\277\377\317\023>\030\343\356\2768\275\253\276\030M\377\275\273/\373\276ob\002\2773\320C>\334\353\036\277Q\207\263=\340l\337>\350\024[\276\\\207\236\273m\032@\2769\345\301\276\305\2630\2769,\222\276V\337\201>\023\224\241=\375$\243\276\005\207\322=\r\027{>\013q:\276\010\264\217\276\307\227\016=\252\0101\277\211\020\234\275[S\242\276\255\3104\277\357#0\277\366\035\215<\305\363_\277\002\2762\276cfR\277!\3007\277\207\344l\276\255\r\347\276\246\313\315\276\351\035K\277h\325p\276\327}\023\277\230C\224\276\325\034\320\276MD\327\276:\232 \276\232C\235\276\026\232\013\277\242t\236\2769V\266\276\333cL>i<\250\276ld!\277r)\354\276\332,\220=\r\364_\277\323wU\277t\234O>\022.\236\276\021\250\327\276\265cR\276z\373i\277L\271\030>n\205\217=\034,\306\276\003\245\037\277\353\311i=\274\023J\277\307Q\334\2757\212j=\362?\006\277\222x\036\277&\375\201\276}[\326\276\005O\030>\207\004\236>\243?\336\276\014\261S\276\246\2366\276\013p\222\276_\233\331\276\207\355\266\2765r\261\275;\010\275>W\036=\277uoA?\213\"\307=Y\214\211\274\223\244\247>\366\342\221<<<\276\276U,\200\2765\350\234\276e\236u\276\224\'\004\275\264\250\024\277\221\354\325\276w\363\366\276\231\347\000\277\221\273\215\275\314F\376\2757%~\276H\324\334\274\267\356L\276>2\016\276\315\350)\276\265\000\037\276\212\345\022\275\367o*\276\251\207.\277qU\243\276\200\n\367\274\207j\304\275\033\334\024\277x\334\373\276\241\234\304\276\363Z\246\276\262\025\266\276G\247\000\276r\227\227\275\333\270\003\277?`\010\277N\241(\2771d\252<\265h\021\277\326l6\276x@\016\277\375\034m\276\002\260\007\276j?\377\276\273\273M\275\020\365\277=\225\244\303\276j\325\306\275sA\'\277\354(\025\275\205\355o\276X\347\204\276\036\010\204\276m\365\272>\234\205\013\277\355\270\272>\321N\200\276\016\352\236>\330\331\023\277L\231\010\277$\217a\276\010\235l>\352\363,\276b\265s\275Kd\270>I\333\177=\t\315\333\275T\245\'\276\016_(\277\372I\334=\233\300\203\276B\270\251\276\204\021\004=\245\271\023\276b!\032\277\225\320\365\276\205\206,>\031\255\247\276\362.\336\276\257\224\270=z\032\252\276m\273\242\276T\006\351\276\005|G\276\033+\246\275t\030\367>\332\253u\275\027\2352=E\350\205\276J@\353>\252\253-\276\375\225\264\276\264+\213\276\2335\302\275\0165d\276\277\025\215<\371\222\267\276\234*\n\276\377wh\276x\377\205\274\324X\251\276\365\241\261\276\002\366f\277\327\314?\277\264\\\367=\343\251:\277\341\013\003\277\317\021+\277\262\200{\276\265\251Q\276\006\333\335\276\273\232\203\2771\377\001>\005N\332\276\032\'J\277\335{x\276\037\331F\277\247n\241>\377Q\242>\220\005%\2776o\252\277\344\355\256\275\272\222\341\274Q\373a\276\257\002\363\276\203\207\225\276S\177\245\276\357\005\014?X\356 \277\\\3202\277\255\236\375>s\360\205\276\030H\216=\241\350\002\276Mi\024\277P\366&\277\317\334\313\276\316X\332;r\221\325==5\020\276\345}e=X6\264\276O\337w=v\340\275=\213$\215\276\226\237<\276X`\360\276\362xi\276Ej\006\277\251\323\273=\245\225\271\276i\020!?\216]4\276kA\305\275\371\350R\276\347q\"\277\t6;>\366\315\306>F\005\267\276(^4\277D\222a>\327\263\201?9\272/\277md\261\276T\252\231\276\313\206/\276pY\305\276\235\004@\277\353\360[\276d\201x>U9\212\276\362\342\r\277\350\336\037\277\222*\372\274Q\016\276\275\217y\371\276\230\030\000\277\355\314:\2776\307\317\276A\344P>\306\033\317>\023\222\005?\263\027\367\276\0017\037\277o~\347>\2062\'\277qc.\277\372\027\"\277+\375Q\277\267\025\340\276\346\205G\277\366D\234?\004S\201\276O\331v=.fN?P\021\273\276\314\257\004\2775\340\357\275\274G\300\276D\315\266\276:\'\275>A\275H=\231~\211\276~\234\363\276\206m\204\2774\210\367=\027<\024><\254[\277\375\200\247>/v\306\276\224ed\277\222W1\277\242\373\206=\225\027>?\366\236q>s\0140\276\264\334k?\016\373a?\267\305\252\276A\331\022\276\234\033\025\277\373\023\031\276Z\257&\277\237\241>\277\357\337\216\275[\202\205\276a\240@\277\321)2\277vi\301<\234\370\372\276 <\017\277N\310x\277\207fS<\001]\217\276\201\357\303\276\315\276+>\302\313\002>\254\354\236>\3536\271\275\016\372a\276<\240\030\277\006\213\006\277\375\2513\276|}P\276\004>\224\276\216IM?\331n\243=\243\350\370\275m\307T\274\005\361\301\275\235\267\243\276#\310\263=GV\251\276\016\001L\276\003;%\276\212\262\353>\203\302\237\276\'\375\000?\222WU\276T\274\234\276\014K?\277\364V)\276I\270\246\276\342\240\345\276\243g^\277?\001\037?\214W\223\276\271\n\246\276/&\322\276jf\317\276\003\313\236\276\302*N\276\026\307\231\276\n\201\016\277\264\361\312\276a\\\013\275\341\212\034\277R\205\304>\"\374a\276\303\352h=n.j\275\377\032\226\276R\201\030\277\225\013\233\276\301\306\234\276\215\205\333\275\022m\203\277\373\345\203\274\341\360\205\275\330\363N\276E*\331\276\201\324]\2762\024\220\276\224x\"\277\324?\344\276\212\270T\276d\210\257>p6\266=I\267\000\276\320@\354\276x\335\262?\272\204\224\276\376{\354=\360i\314\275\346\241\021\277s\205\336\276\315h\367=\316\275(\277\252\243>\276\024\311\023?\211\0330>\276\367\353>t\033M\276\321\352!>\330N\260\276\035zh\275\325\274\257=Q\024\260>Q\034\211>1\210C\276\270\021\n=\030\025\010\276\241\250\321\276\313|n=\214+\033\277\3039\210\276-\222C=\0234\265\276$kA\275LE\223\276|\371\036\276A\336w\276[\236\264\276\347b%\275\010\263;\276\334\332\266\276\253pD\277\303\354\035:A\337\255\274\203\337\272\276\303&\202>\034{\201>\231\371s\276\335op>\260\352\007\276U\322]\274\310\340\016\275\202\217\003\277\260i,\276\342P\016>y|\362\276\023\272\256\276\347\206\'=\'\n\360\276\277\235\003\277\"\220\247\276\224\255B\277.\226/\276B&\350\276\021G\\\277\245\002\026\277\373>4?\222\322e=\005\207\006\277\301\234\024?\244s\300\276 X\364\2769\270\365\276\247\247\313\276\334\027\341\276G\020P?+F\376\276$\352<\277\240Q\366>\354\342\225\276y \203?PS\032>\341\367X\276\242\202\217\276\035\332\351<\313\325\324>\016\205\220=\305\003Z\276\374\352\022?Y,\373>\327<\264>\350\364\033\277\232=\210\2758\347A=\273\235\257\27618\334\275n\'\004\277-W9\277\235\217\'\276@\341\306\275\362\013\320\275\313` \277\353\024\227\2743\340/\276z\326\205\277:D\320\276O\327\362\2764\351\333>F\225\345\276\324?%\277\242+\324>\376\037\350\276\376\223,\276\273\367 \275[\177g\277\277\3511\277ED\200\277\032d\001\277~\252\343\275s\257\263\276p3\n\276\1777\"\277Q\306\307\276b\0350\277\365C\331\276\241\352\037\276*;\301\276\227}\336\275\003\tS\275\203\245)>=\205\351\2764\024\004\277\270\255*\277\377\354#\276E\252\340\276D!\001<\370\223P>n\314\336\276\261[\000>\002\273\031?\356\177\276\276s\324\210=\357Jr?\214\007\243\275ap\262\2767\306\375\276\275B/\276A\244S\277\007>,\2751I\037\277\311\212\246\276\325B(\277\"\313\330\276\362Oa\277^\232U\276F\'\310\276\251\276b>R\357\331\275\250\305\036\277F\345_\276\006\323+>\357\323\317\276j\333J\277\"\241&\277{y\276\276\036\305\000\276)\277M\277\3215\025>\235\263!\277r\035\303\276\334\202\000>\375\234\244\276QE\276\276\327\036\243\276J\361,\277\357qN\276_\225\341\276\355\027[=G\354\263\276\336\216 \277{?\002>,\023\300\276\335\353\276\276}\344\210>\202~\325\275\321\333\007\276\346\352\341\276\'=\031\277=\030\361>F\t\032\277\374\313\037\276\225\331~>\366/\250\276\223\371L\277`\215H?\373\3127\276\034\246d\275|\327w\275\344Y=>\233\013-\277\027\026\256\2766\262\032\277$s\334\276$\000^\2769u\005>\243@\217>\362x\261>O>\215<\177\354D\276\270F\202?\200\240\177>\272\025\317\275\243\2125\277\367j^\276\3563\023?\271\"\006\276\276T\n\277\351@\370=D8\002\277\336I\002\277\210\332c\276>\243I\277J\311\376\276\3520w\276\312\033\030\277\027\366p>C\362\275\275\220\313K\276\352\353\037\277\320\342\020\277B,\270\276\266\255\006\277\313\207\302=&\006\002\277\374\261`\276I\3250= \216\003\277\347P\324\276\367\263\321>O\342t\276\300e}\276#Co\277\372e\272=\372F\203\276\003\242\\\276QU\026\277\3142\323<]44\277\337\223\263\276\003m\006\2778\214\202<\367\341j\2779T\300\276\340b\316\276\203\205,\276\261l\n\277\374\302\341\276j\345_\276\000\312\035\277j\017\327\275\362\340\313=\021\376b\276\256\027\351\276\033.\235\276\247\343\361=<\341\224=\r\235\241\274\206\325M\277\0170\310=\006\326\036\276\022\365\305>x\177\035\276\342s\002>[\361\234=\366CA>\354,\250=~w\301\276\321h\273\276\312\352\313\276\2115\260>N\250\314\275f\310&\276\274\022\000?\213\036\014\277w^\307\276\242\\\316\276\000\313\016\277%Ih\277\233)\007\277\313\225%>:l!\276\334\354\027\27704\212\276)a/\277\340\320\313=\003\206C\277\377a\017\277\340=v\276\'-t\277\2571\267\276`\031\225\276\016[u\275N\261$\277\332a\206\276\357L\320\276\260\344\014>nQ\013\277^L\251\276o\265\354\276$IN\276\2070\220\276U\023\254\276I\002\n?e\331t\276\306\315\233\276\245j\353\276\347\252\223\276d\253\305\276\r\276\034\276R\376k\276o\220\277\275\010\214\260>\201\224\323\275z\337\275\275\024\004\010?\346\367\322>u\321\333\275\250}\240\276\303\235\237\276\355\367\352\276\375\213<\277\032n\351\276(<f\276&N\314>\335d\306>!\376\303=\231\306\241\276\333\335\356\276\265\375\017\277\336\305b\276f\356\254\276\"\3572\2752~\\?\372|\214\275\213\375\341\275\365\230\207\276Y\371\001\276\310n\037\275\323\355\333\276\300\235f\276\016|.\276\177<#\277\237\2746\277*60\277\347m\365\275\376\363\262\2753\206]?Hh\217?\315!\275\276\377\203\004\277\200L\037?\200\337:\277n\223E\277\253\203\020\277\336\224a\277\n\014\266>cF\217>\356i\035\277;$\320\276&^\336< \236k?\021\037\242\277\272Tj>6|\022\2779e\324?\021m\222\276\370YQ?\035\330&>K\374\037?\301t#\277\0069\004\276\314\241<\277\3336h>\226\026\277\276\003E#\277\343i]\276C^\352\276E\2651\276\233\234K\277\303\370\000\277\260\267\341<\365\276\034\277\314j\361\276m^\274\276\246\231\014\277j\023\217\276\253\256M\277R\270[\277o]\222>\301\357\220\276T\231\321>_\207\275\276\260C)\276\3074H\276\263\364\021\276\222cI>\315\367\206>\250fT\277\274L6\275N\246\243=\002_\000\277!wK\2778Y\257\275\324\375.\276\206mJ\276\340\234\r<\001\004\372\276\270\372\257=\252\367$>p\305\202\276\241D\270\275M\340\000\277N4\270\276\334\\\355\276L,5\274\031\021a\274\034\250\004?\345\263U\276\215\025\'>\274}\017\277*\177$?\307Z\001>\013\343\206>\222\022\204\276\264\t\320=\332\2066;YU\037\276P\272(\277\265d\342<2\307N\276M\363W\277%\250F\276>w\373\274\n\000\313\2769\347%\277\277\232l=rW\010\277"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Reshape"
  input: "transformer/residual/residual4/conv1/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/residual/residual4/conv1/InstanceNorm/mul"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/residual/residual4/conv1/InstanceNorm/Sum"
  input: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims"
  input: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/residual/residual4/conv1/InstanceNorm/moments/normalize/mean"
  input: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/residual/residual4/conv1/InstanceNorm/ExpandDims_1"
  input: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/mul_1"
  input: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/Relu_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/Relu_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/Relu_eightbit_reshape_transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1"
  op: "Reshape"
  input: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/Relu_eightbit_min_transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1"
  op: "Min"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_reshape_transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/Relu_eightbit_max_transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1"
  op: "Max"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_reshape_transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/Relu_eightbit_quantize_transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1"
  op: "QuantizeV2"
  input: "transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_min_transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_max_transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/Relu_eightbit_quantized"
  op: "QuantizedRelu"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_quantize_transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_quantize_transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1:1"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_quantize_transformer/residual/residual4/conv1/InstanceNorm/batchnorm/add_1:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual4/conv1/Relu"
  op: "Dequantize"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_quantized"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_quantized:1"
  input: "transformer/residual/residual4/conv1/Relu_eightbit_quantized:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/MirrorPad_1/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/MirrorPad_1"
  op: "MirrorPad"
  input: "transformer/residual/residual4/conv1/Relu"
  input: "transformer/residual/residual4/MirrorPad_1/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "hwe\200Hg\217anq\210h\201m\217\207\203f\177}|]l{\177hV[aiga\206kr}e\221U\206c\213\221\263\224dt~p\242\215y\212\202Jvdl\201xtl\251r\200[S\260:K\201oTo\210s\\fc~\246\204\203\224\202:gYd\206R}Zv\201r\225\230[\225l\210\210P\242\234xwfW\222Sm}V`ndYwsSymdz}\215cdBk|\204mr\210\217bt\207n\222\200YtX\225\255\211o`\215\235\217c\204\204\233z\232hV\201j\207wmz\212\222\245EUjg\230o\221qrnvUw\223PX\212\214\223\241xu\203\220wY\234o\210S\177tI_f\225\202\226st[]\177\212Id\221Z\215\224pr\236r~\202|f[JqZZ\217k}pxk\204[n|\204Z\217t\205n6bfmikz\214\204jybNYyww}`olrkuy\230sv^\203]r_p\207~ugx~zGSk\203`qY^}S0^kyr[]\205\213dkX`uw|\230\211x\230\204s\204\250V\\bl\206\232xvo\177lVt^ztcwle\233\220^\246hmjb\177\221gn\221m\200)}sHQfpv^\230Zc~|vfYwnRtufQ\201\200gXXrW\220_|o|a]vz\\y~oL\241UkzV\210Y\213\216jyy\243wkhibq9|{aZO\217i~\207gX\220uj[`\252\201v\223Vlm_f[\203vXnpo~wTso{p[k\202is\200\214\213pvr\\\223ho}s/k\217\200ZSc\217eb\205\177\223}Z|W\244\217|vz\240\221q\207\222i}~vI~N\210\210\227z}|_\200~\257\235\247O\235M\244`\313[\242\206\261r=hsku\316\200\233W_pT\216\205k\220\234,cs\250et\211xTh\230\206s\223T~\212\246\205T\206\227{\\Yu\221drqx\201jNqZiW\\xfax\217}gWq\200\221\215V\221odlS\206\272y}\216l\201\213y\232|\\\325k\250Z\261So\231\205nY_De]]op\243ivqlV}\214v\214\215\207\206tx\221o\203kdiVuni\177[`\210\215\203\206v\211\224`\205Hlz\227ncsfr\205e_\213s\201skhsx\\\231eZ\232JoF\210b=j\216bzrGM\212\224Ywa\245sd\213sg\236ko\202\231`\250\204I\212ERU\250z\\`\244\\w`d\212[\202\225\217x\210sHn\207\212\204\177m\211uwt^c\201fZrC{b\213[zy\210g\177Yp`\236tw]c\237ki\205k\216p\203qtTtZ\237\205h\237^dJ{pOlk\221\226c\207t{z\202\214T\204|i\222hu\237c5\177cofq`g\\\214r}\225\177tyve\214xst\213s\205\214lhhd\232TC\225YPozqk\203p}\207Ru\230|Q{ecgZ{l{h\222W[Lyd\203olxv\207r]\232L\207az\230S\036\205Lf\216\215g\227\214s\220uh4\245b\177l\247\202^yL`\234u\204{g}q}\210\213\204\220\247\221hi\232M\237\236`5\207iyn\203\206\227\215Ah\217ryr^wQ\201m\207Jy\217\224\212Kr\220DQjj\224cw\217ud\204x\212\240l\205t\210ndkL\203\255Z\204ca\232bqU\216\207g}\211zdxxowa\203~p{nwqhpnjcmwyfvWhkkpts\200f]\224b{u~\223\245\202Yy\203r\215\221\202\215\214>]xmw\205|s{p~_d\210cY[tla\222tsx[u\200ds\245ySpmx\214rym}\216\202|n\201\215]y\202w\212\202}gpu\216bz\205is\211vU~pp\241f\224]\215\262oh\211_zxw\211\224ZTtlUX\206hslRW|nfu\213ibG`[u\207^Waj\241y\227\202\212\212\207h\207zg\236\177ney\204kg\212\236Xk\201}\220\250\220s\204\212T\204sk\240f\212\216~Yi\214luwviV[t^\212\201replrv\177\217\221xqcpw`{\221mi]tl{\205\205dzVme\200qXUbo\203\177hxx\212RqGjzz~rr\177fsdYv\205\207\201\201\214d`i^byvlm{f\252f\177\203to_M[EzyP\221z_l\210xxkqtTr\222[vr\226}mu\243bmTlvykvh\214wd\202d\205woyho\232\177n\264wq]k\225\217rT\215g^[\177s\202xsX\212n\220g}i\211hWXjY`J\223k_tt`\217gyx}rpaon\201qxl\\\233fau\203\213v@sSwTgm{\227\203sfrb\200jrr]h[\214\204ylrip{Kc\200\235w}\212w\200]\177\200\202cnkc|Y\221YOkjo\205d\210\206`Utghdm\204c\212pew\201jj\213\202Uimnsz\217i\210ww}\177\224\205zdm}SByrtrf]X}n]\210\207b\212d\200\204\215\240iyG\220x\200g\200@aG\211\2153WnL|\237s\207S]\202D}\220l\212\231Nik\242|\200vkp}\211~p\203Yx\211\213xlxqt_ZKzv\246\213\234\220g\206d\\\212rz\210Nm\227\221wy\213|zj\177s\206|s[Is\270~\222nj\202nw}\214R\303r\227\202\253S\217\216ufcxH\202ohuw}\212\222^x\205\177\211\211\244\204\224\205i\200z\215}br~\205\\hj\215pQd\206pkdp\221m\\Qw\202v\206goyz\216ocuo\202\206\205pxlW\221\224^\201_\226I\207\240T\207\233_~\212b/i\214vj\215{|i}_k\213ls\210}e\216wK]\\\217{\202\214f\201\211gp\202\203\203Xv\206\205X\206angk}{ulb\206e\204vlsrXXYT{\217rnlxfl|pW\206jcFR\221dbtTyst\213k_lu\201\233}\210jj\\~xR\212\223\220\224\200A\217\216yir}gpo|k\200\222\201lnn\205Rhbs`oerol\212\\ubt\204xzrY\203p\203v\202k\210rv__[}\204nSn\227|]Rz\230[YTrtWeemg\201y`p_\206YowY~X\200bv\202Q{\203\202\210X[|Smz\211Y\211Uizhrcum`\215cglS}\257k=|\202qqij\210~\212r\203hv_R\214h\205`@qdo\200\215y\222\224Cm\206\202~{So`}\203\177Vm\210\217\210O\236\205uXw\212msn}\\J\231o\200xmsp\207mA\213aen\210bZ`\203orpmthy\204hRul\223\301\212\224u\213ur|\211qxa}\177\215t\222l]gow\200Y}\206}`k\262c\214\206w\241\215\212~\206nj\212pu\232\227Mmq~\264\206\226h\232jd`aqkjd\222\215o\207\204\207j^t\205gv\211tw\206c\253n`p\206l\206pW\203\203\206V\201yG\233_\201E\202|\216pw\207csg\201Ylq~\177QXm\213\262{\213pUfKdmn[O\212oV]\252Z\232\200H7{nvr=~^xrmS\212g{M`\246`{\235L\216\274W\212al\221igpr\202HQr\221qq{\235\177\223wuu\206`\177qdSss|\207\254S\177\204\214\216thr}T\203ew}V\216ko\177j[i\177\226ff\212\200c\244vrx^\207~s{\221vPjrlp[xwus{[Wq\202zyB\206\203}[botq}^vgz{\201v}ojago\220wkuWj\200s\217\225ltjQ`^\207{F\213g\207x\206\222lq\207VQh~\240wp\223vpo\234`gNm~\177xkq\203f}xuz\203Jqdd\236mu\273l^NeY\204vh\227l\222\216\205`y\177te\224w\221q}M\207mpcjil_vk8k_r\200\202Uc\210~hnv\224\204Xzuanqp\203t\217lQ_\204\226cno\206zxr\201\201W]}\214ZU\202Y\211\213vhTa\\\210^\\\205\237y\200\205\217xTx\220\215y\214i\206\223j\224[\\bch\230\\\204ajXOjq^Y\200HjYiz\216\253JitRlfbdxniU\241]\223\216\207\000zwa_;mX?\200\203\021kvYwm\207jb\203\177\236\215tqu`_ql`l\\dqom{Xb\222gq\264cq<@{C\203\231a\206\250,pM\247\243o\202p\230\177\221]x\205H\232\206\214is}\200vuFi^k\246e\260\202vn`xmfiu\207zyyxplcu}ze\216\207g`N^\323r\205FnXcmZ\266Z\242\203\211u\244_{m\202um\201Kxxn\200uu|y[\232\223^|\220|io\206x\202\202zkq\226s\247@[|\207\203uG\220yQht\220q]\\j\232\206\216hsh\210\211l\231~\203^n\200ll`P\210SHr&|?\214\265Q\216k\200u\213j=^\231uh\202\177f\225\225O\231\216N]\222\213n\245\223g_rycxyzt\203\222N\200\225|SUq\202\231\205vlyn\204\256~b\225Si\211~\202\200uP^xL\237{\203_^n\203L\201fkZ~jIO\202wk\212Nfw\214mWZa\240f\206p\200ei|n\205t\213\177\207i\217qx\210\200`hf`Tmol\211\205mtuz\212i_ksOho\203Q\222\221g\207ei\226_lvG}q\216k\207\216o\206\213iu\212\233y[\230m\312se|fw\206mx\221\207jgKzq\220[\200\202\216|M\203}T\207S\222rf\221c\203\217yvviyG\201\201\204i|OcEWy{|`}\245Dulu}\301H\\\203vv`\177gv\201\221x\216d|\177w\245nt\213M]SF\203\220]\225m6xqw\177\204I\200i\216qg]u\223\215\2169\235~\202Fy\201WY\214\234hz\240\200uFicw}ihnQmjr\214u\201\\u\214s\177ieuWqo\204zgvx\205\\\213c\212\205zznqrov|uuQYWnajurs\205_\205W}dm\225\237~n{yt\207m|j\200:hqTt\202d\206rn\212{i\217Otevf~txUHf\177\216\213x\223\201Uo`bn[}R|yXq{_\210S\211Wr\226eg\207vfzKy\207\\Wy\214q\206ZW\221}Z\201\215\263e|m\227Tyf}T\177|}gg\205nm\177u\217\201v[`lS\230h\235\205\205\215\224xiv\\ja[w\203{\225]Rdy\222q\217wwpoky\222?mq\207\215\233p^m\216|~\243\203uzruxZi\200\227\232Si}nn\226\201|t`is\202k\224Y\214j\202{k\200j\207K\204\216\206ipdseao\203S\220t\216\201I\231e\206mp\226\202ugvKA`e~xX]Y\216bvq||i\202IWL\223T\210\223akX\222\260\2307\226TTkIWhV2\020t}\026\311c;w\220 90\237lBoIQ\177nyQ\224\220mZ\205zy\216\245\235\216rWqU\206\211wVk\322o\210\207\211ct\177oloog\224}qrym~n\\wpXlw\202\211\213\203deu{^s]\211g\\\206|hW~{\211\200g\224\213\213{v`\177f\200Ybw}\203q\202L\241\233o\221\204yd~{{gvfytvpmqO{v\202s\177s\206tt\204x\216an\212\201}\217r\203Vp\202Ywnq\210\202NxpojZsidvq{~\210js\206\227s^k\205\210\213q\202;Hmxtlex\232\203tbz\211\235^\211`r+\204p\\\204ws\201IMR|\223\227\231q\217^\203\235\252\243\231W\235L\226\234\263M\240\264\245e;}s|\204\300\221\210bxv[\223m~\204\215V\177\177\250bov\206\\k\177\212s~mvn\225}Z]\177\206nZ|Z9\245f\214\207Yj\202]raczgTyh`|k\216U\234^\201\207cb\216K\206\245r\201\241s\210p|\221xp\301`\224x\263X\200\201\177weSKs\216tr{\204ptzobfzw~\204g\210\200\200v\201\237~UZWjs_o^du\240\204\177hm\212eun\210\252zuipcPoi\220nkm`nH}l\230\263)N\215lx\217zoNtdbhab\177qp\177q\212mnef\213fGZ\216l\212Njwg\200O\202S\262[\203\205\217Nhsk\201at\204zeolz\210\230\206z\211|eey\202rwd|UhVqs\202aey\210sxdwq\233psdw\222`Y\217gyj\203rrBxC\212|p\230XgKrvTjznX\\{l`n\215yx\216[[\224uw\202\\P\203t\211c~v}h\206~{}aw\222{>\177oyjwxz\210^}vhuu\\kratt\207`_p\210\206bhwh|hxbmXoUvbjhnrou}\\c\213\204\224\202\\n\203\203a}\216\201g|\226vz\237f~p\201\215\203nZ2e\205~\231\\V\225IV\254\204\211Yq\211Lu\202\203\200\213\221\211Ai\222Y\177\202\222oB\\|\221ixSyl\225\207mw[Pv[u\210\205C\223Q_aLshWY}e[iuswfdlw\206\212\235u\204pvpq\217\221Yi\\r\210i\212Xml]rvs\177{sZzu\206td\177fxkelg{hyxjjpa\200lpymd|lo\243c\206z\206\205\236pjww\200ue\200q\2020T}Zy\203|\202cd|jqtllgoqsxur|lorsc\230\201bf\205p\204yvv|w\212Spkqlxe]}Tgwcq\201Zgxl\200\177zvzbp\201vgnz\226ly\205l~|xk\207\223rboqz}cwuVIpxi\232P\230jmi\203ay\202psW\223[\204wv\202u\204ub~\224x\211sfqoht\216C\177bv\200\207oxx\202I|w[\200{\250\202A?xt`YM\206tg\250uZ\223f\211H^\177vyhq\206r`\202VcOc|nqAvmo\214\203tnf{hsee\242q\\}}\227\212s\203mdSo]\204|nIc\201tfp\177]}\221B_Ms`sy@efoi|\256\201wz\177YJw\213u_WygrY~z~ckv`X\220\245T^\202\210uY\201z`c\215o\206v\205ni\202o\\l~]odkoqp\211\227\202Nr\200y\211\177dq\201hi>gs\202[lrzq\233\221yw{?YswW\211LSkVieO|u\212\214zn\203l\221n\214\206n\201\204ch\223bm\224}C\221\271lz\207vyforM\177io}uk]tjy\204\214`|kp\177S\205\201\214l\203\203\223~|\201updVzsqj\203dJzbl|`\177bammf\202\202q\213eyGhu\203nu\202\222J^j\240nk`x\254\211asc\277.}\220T\264<{|z|uScc\204in\225ac\200M\205\214\211\240n\177D}f\230\207\202IfYj\203Dz\213hw\214\200o\\y\214G\213y{z\214\210{y\243k\202e\204r\205w\200jgeetwpkVkkd|ojr\242I\212\241\240\240qw\215^\246lvW\205cg\223r\233lfn\177\204mbsX\207\237}\223yp\200at\206\202X\251l\232\204\253`\217\216abe\215Y}\206vsln|\203kos\220\207\223k\200\222xh~e\246kvVwrR\205zwkpn\210v\224eq\221t\217\207d\244k\227Ivniq{\225Rr\\bPdeY\273\225\004b{\204sl\177\225aZfpws\202\203femp\222fxcx|\211bi\236}s\225tre\202Zob|k\211\202\204^i}q{c\200\200}ozi\216[robgub\205cn\210]t{l\216\177woz\213ztyk\177X\205_\224ykswuccoSssk\214wZtY\222dv{xd^htL\214\202i[\200K~ygYrtn?j\207sxw\200}{n\211qmu~{wnceb\211\205}7{vj|Xyvyu\206qxo^\200ji~o\207mQc{\207jkc\\wx`}\\yhs\205oq\203`i{ej}ds\217r\212s\177it\205d\212u~v\203pT\215\214Ogfhgy\177t\270mb\232]G\201\\wxyRg}\213ed|\204l\244b]uToM\220W]\233u]`\202sY\205>\221[\211pZe_V\212]vvrH\205h=aP_^XK\205cy\203g\223dk\214ykq\215}czx\\\225jlfXC\\a\210Vr[loUo\202vkrwx\245\200\215rzv`{\222Z\231m{p\207exse_fji^vcW_l\254my\203r\201\223jovqr\201ro\210\177?wd`\244q}i\203[[Zulfuu\203\206qy\206\206uyc\203up\216p}iy\221qnf\217c\207zB\206\217\204o\213qR\201p_[veyptr\203\206nlSWaqwRY\213Ro\201t\250]\202uZg\233\\zexfz\220jU\210\211vw\216j}5\205bWye8|hykf\273O\214\202oy\263lxV|\205lwocmXJbua}y\222\213|vq}wcx\234zuly|y\251~s`\243~}z\2037h\203yes\202mszvbexU}jnxxi\244rxczya}yiiUU\\LhgW\213i\205z\201ug\206o\212b\204\241\202Xh\\ew\200hjp]o\237ckjeb|\201smpkgikl\212\207ba[ljypwct\203\211u\217\206vt\177\\rqn{l\211\177\231b~\214dh\210i\213\201vvZ\204lct\200ox]\205A{~z\206\232Mtp}m|aw\204k\204\216\204\\\204\200nw\206u\241\216nyZk\206\216p\206_i^pEyuivxSP\225\200}nw\201\177aj\207_xh}\223d|rR}\201\212tru\215xcrc\204]]z\221^T}k\214\207~kap^\200chq\241r{x\215rv\204n|jtqkkr\214]o\206ew\220]~b~\204\\g\220\203W\231bkY}|\203wN\236\204<s\241koX\211t\216|]\202p\235Sup\202qYaQ\200w\2054u\211\213mz\200_d\210a\242\201vWskpY\207ge`jdhh|qS\215aj\240qgDS\214E\231\212f{\226dnR\263\207yr\214\211\211uVikTyrvij\177umwix]T\177\206\177\227x}p\210[uluwk\203]\210{\201V\215~\212q\217~eWPy\255\215\207OmrhXi\243Y\243ltn\261Wv\212c\\`vO\204fq|al\201\\qn\213{\205|^i\236sogra_rqj\246B\203\202\212w\205G\212O\204rq\263\205\244\232\200\223\215\257_w}\201\230j\222\200\201Nfk\227WU\307\204Tkt[db\203\225XWUt{\200\207Pkp}k\201vcq\213b\221cam\256\203o}\215prkazet\233vx\232b~kv\\ngl\217znv\202hs\236k_\202gf{fiopkyjZ\215~uw`\201kfz\211]ouhrjm\202\210mhsiexhn\202_p\221{ry\204ti~f\206_\211\202{mynu\177fmm{vuz\232{\201\213}]\224{]qgRotyW\205\234p\200Xr|QtIdpcmpm\210wr\210vq\201z~k\213{\230wdt\201phld~e~xn\204\206z\213uz\213es\220[l\200y\213\211szh\220e~yp{{Y^\212dL`KaMw\206r~pd\233fmipr\215rppx~N\215wwf\212^YxO\177v\222d_\260v\241[lyO\201R\201q\215sm\205n_\241i\213`\2004\200\212EuTofUB\210`X\\|\225sx\237\212y\\Xyh\202inb]\201\210`\203\230~`\201\177a\231sgxWay\200ac\177\215zMtK\202\203\177\212oemt\203llzWcoq_{ut`\220d\207RxYh\222\220\217vu|y\213o}R\204IY\200eg\200dxxz\212\233\211jT\242Vtxxs~w4e\220\203\224y\210h^\226deb^\216{{iMD\251\220\226R\201Wr\232\\g^\223siSnrQAm\201t\216fX\274\200rrO\245|\211\226\211YdpgyZmpTgepxu~\234:[\203nfa\221\217Gzbm\261t~r_Q_c{nO\256YkXbnv\245\214u}B~a~2cYudlul\177w\200m\250\203\206\210rc\206K\211z\243\232sx\203oZ\243\254qvf]Mzx\244adX`y\200\202\204\240j\177^p\214\212g\202it\220\2042wa]d\'vZ\212^ww\240{o\201nRhOsk\\_[\225k\212`X[c}lif\212Px\211[ie{s\224Mqk_w}lJ\\f,_\206M\236fY^\233\037ab\270Z\214uWy}1w_~sxc\210\216Sjl\200\207|r\214e\223]acm\262\210\204mt^f|yoc[\210\253X`kq\232q{m\202pK\261Wkpmuu\205\204l[hdi\210N_Ulj\216\177\177x\323\201\177r\215\206x\211j_V\234|\223\236\216~g\234\203t\211\227\204xm\204fio\\[\217\222h}f^te\211Z{\\\210ubyxsjQ\213qq\205\\\215e\205\233Pto_\210`Mnrlja\205plkjpr\202rip\233\177\177fk\240{qm^J\220JT\201~\203\240~H}z\310@O\242rC>^yI\201hT\213QfP\217\222\214z\214\237Zn\206\240\235\244D\253Y\246\234\246I\236\274\202r+Jlv\214\352\223\202Zosa\276`\215y\232(\206a\263qN\202\217]as\206zrZ\221Z\242|N>\177W\205~\235ag\204\244\217nbg\215xoQg{\222P\221odw\210\230\206\230!j~c`\235Jv\254uk\241zy\217\201\206|\177\263o\212\204\265J|l\210\210cd>e\244\215\246\204\200l`\206^aUwUhq\\\210\222\201piWbtzeuni\224_dCx#\212\206t\277\210l\251\221;\200\240`zal\232XpL^U\203\236\213udf\247\221\200wV\\\205Y\204h\230xypcW\211M\205tE\221b\220}W\233\177Vn\200h\226\223.\201Svj\233]n\207v\215\233tltV\225rqs\205^z_Xvnv\221Y\204}C\\\200}\215T\201LmmPqzjfcfzn|pz\204yY`r\203a_\215Oo^xfdD\245T\210\223\202\234M\206c]\200cQ\210QQqzwj]\214\201\177\214JT\216\177\204lWX\206\200\240{\203v\206Wl\200\231m`z\202z[iapvxwr\203Fz{\216Wh\216a}}utv`V\202\234wwFyr\200nlth\\{\217h\225b\233\177\220\211x\210^V\177p\242h`c\245r\206[\215|oe\227\222~\210x|f\227[~\202\217yyqkxzD\214Tw\205xcqrkm\207hqxje^]\217qc_p\207\214fUz\230[s\203q\376\227wzqy;i|`f\177Iyk^cSq~q`\210tzb\213}|{[p\211g\221\224\200l\202\233\\|\203\177j\177p\206ucqT|uerkf\204owTt\213~S|mx}|xtfujtws~cj\224\\r\210w^P\203d\213hzn\217u\225{\213uz\202\210\\ul\216=l\207mgwzq~m\202\215\213eQupjsinxza^z\220}~\203n]z\205`\177ow\204yar@\203v{~w\200a\202c\\\\\201N{\\|qe]\213z\\xuqbt\230h<yxqQw\200o\204sg\220{n\211v\210eo|\201\212|x]fvz\212{\234|qi\216vcfPyj\221sca\242\\tYx\\i\255\220q|GpXn7rYojsfpuzh\222\223n\221\177\236\201aX\206lvWe\225{k\222rk\204\207\232\221U\226\220\212kSU}||\203v\211t\177uq\202\200b{^u\205uM\224ldoU\227i\200{{yuxrd\210_r\220py\200}ryt\212Qe[vm|\201|xQUlykl|ht\206qsvi\200zy\205ixdyzIY\207\243\222m\222ohz\257\237v\200q<pneywv\217\221b\200\212\215||p\220Stn{Lc\257{s\207}j\232y\177xbl}\203ph\204y\236o{\\xgj\225q|h]ph\230\200g\201xVml\\R7B{|\201wi\236q[vg\245qou[\201\233\177}\177\203yWm\211k\234\234{thk`Vzpd\212\213\177paoyt\234bmbzaR~i}n_v\200qtWds\201kov\205\210\202\\w\213\177^xzpx\206\206h{\206\205g\201z\202\212\204\201jax\210hWZvsXr\177w\220\205j\232\205\267:OhTqpkqsu^Nnfki\206\232JY~g\207u~\257|\222O\212>\262r\202Nm\214W}K\231\216[{\270{iRw\212L\303m\207u\226WxW\263glm\223oufstW^mT\217v`UhLm\211\177o{n{\203\206\272|\226z\207}fz\247[v\\\207\203_vb{\213iydY\206^{\254\200w\240nu\177p\205yk\230h\217\201\246Pz\214ffm\225Ix\212\214\215{qcM~_uy\212sh\212tr\202\201\205\217Cj[\224c{\206{\207eWln\027d\210^\262\226t\246\2163\210\232]ymb\222HTw\202V\207\241\224unN\201\275\177z\205ufg\214XU}\177\201Xfo\\\212`Ur\206xor\217zxsi\206|]exV\203g\204z`\215\201\177\210\211\201xa~s~eszzj\206MlmvQwulYy\\hq_\177\231\203\250nr\254\201\201Z\200~V[\206\210z\213\204\222enPu\214ptmzth\223f\203\203\177u[~jdzZq~X[p\216\207pv\200xX\210n^\205medmm\213k\214\224ox~z\177ps{a\220u\214_srsv]xcrnvu\216jrz\202m}A\206g\236Ib\226\222tuB\200mvv]\211r{\236pk~ws\205xs\211llzy\240_y\\\202x{\201\203x\205y\206`\227~8n{ygy\200aQp\211\237gzV\216`q\202UrnhoQvgr~vwwV\205~|ix\204\216\225Yx\220gw\223^\373\207\215}X~_c\215sIyV{abi`\201\220za\220kj\205nysh\205\201\211pp\206x]y\201py|nU]h~\207lmm\213}aq\233ut_xn\214~\207^\211ix{\241|\241{qstcs\200OZq[fy\177\\rlj\227\205s\177nm\235\203gb}\177\237\203{}\203@gp\177\210c{]`a^q}sHc\203\177zyt{\204kda\250\211\232|p\202`|u\177ag\222Y\177nD\205pvT\214{D\223\247^T\231t\232en\210f\203\230lf\214mrXgp\230ooxpg|\207wR\214Z\222\210\200xY{gmblh\211\200\230a\220\240r}\206\177uY\236Vipc\240N\253\215p]\347V\224O\205sj{\215\201n8IZKShf\222k[oSIuXG\261[\207rp\216\207\262\211`r\273qs\230\243C:\201xxp[]o\215xn\200v{\201`w\214\\e\231q\207o\230ZwgrZwBY]UuNX~[h\200\204\224{Ym\224?~\202\203aZdrw}\\zpad\215\177d|oawsort\206jijZ\214\210W\215\207Zi]q\213y~s\201\212\247~v\200wu\216^m\200q\211Grcq~tp\260yz\220\215\201\200\231a\214<}w\212L\200\207\213l\211\213\202ktjhy\205q\205yp\177\\\252Z}jp{x\213\212tqlti\206\204\212\214_\\~|Lv\203Od\212Vu\207f}w\200mghe\210[qnf\224nnw@s\\\230a\231n\202\205ip\201kZSF\250\216^ZS\251\206\221|plgySfS\216}:qjfypRr\225\223i]\205|\227L~\211\215itac\211\214\216^n\232}g\217\214uy\220\207w4d\206\202p]Q\214dk]\207\261~d\204Wr\241i\200\202\217\222Qo\235qxh}\177\214g\216\200Vb\207|\247t\217a}mxdlxjaafkq~nc\221\\x\304mUAd\224H\315\203ps\2400a5\314uev\235xwl@i[Px\\\213g]\212\223\202huq~hY_|\177Wkp\227f|_{S\201\244mxmnKr\221k{\203uauCl\263vsYilZ[x\220d\236z\205b\256KJ\237\\sj\212:wa\202\203n\202v(ZYy\232\222\212r\215\230S}|\206wya]}}s\216\227|xps{\036Q\224Q\224\242_\261x+\237yf\210xL\232dh\217\243b\205\226\205uomy\223\200\177r\252lf\206RczV\206\221{\200cxobd~z\177ffjm_RZx\212N\254Uqc]]f\214\227\177y\235h\216[wjk\206uy\201swkrq\236XS\224]`\200JWnB\231\206\204\237\205`^\203\210sg{mw\200o\202\215\217\215x\206\213V\206\177rp}u^\205c|\207biOQYt\200hf^\231~z\234\216zz\202[y\220mkrmrrs\201|Y\216\220irsaur\211\200p\226j\225gjzjgPuZptkw\220qZg\241\201{{\207U\246|xz\211\177\217}Tjh\216b\232i~\211s\212\231xwzn\215\231]P]w\253rYhs|qq}s\202n\201U\224N:m\205iK}\212Adk\232\270`~_kD~}Z\203tn\212_u{\177_~g\202<zr\203\202\207\211\203\222_x\211ew\226_\377\223\206\203\\\177s\201\204\217w\206MtXf}Zk\234\220\\\214g1pynw\204\227\240\212[j\200\177qi|Sv}\212fk\237\237y\203g[v\206"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.31282842159
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.59727466106
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/convolution_eightbit_reshape_transformer/residual/residual4/MirrorPad_1"
  op: "Reshape"
  input: "transformer/residual/residual4/MirrorPad_1"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/convolution_eightbit_min_transformer/residual/residual4/MirrorPad_1"
  op: "Min"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_reshape_transformer/residual/residual4/MirrorPad_1"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/convolution_eightbit_max_transformer/residual/residual4/MirrorPad_1"
  op: "Max"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_reshape_transformer/residual/residual4/MirrorPad_1"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/convolution_eightbit_quantize_transformer/residual/residual4/MirrorPad_1"
  op: "QuantizeV2"
  input: "transformer/residual/residual4/MirrorPad_1"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_min_transformer/residual/residual4/MirrorPad_1"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_max_transformer/residual/residual4/MirrorPad_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_quantize_transformer/residual/residual4/MirrorPad_1"
  input: "transformer/residual/residual4/conv2/weights_quint8_const"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_quantize_transformer/residual/residual4/MirrorPad_1:1"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_quantize_transformer/residual/residual4/MirrorPad_1:2"
  input: "transformer/residual/residual4/conv2/weights_min"
  input: "transformer/residual/residual4/conv2/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_quantized_conv:2"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_requant_range:0"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/convolution"
  op: "Dequantize"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_requantize"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_requantize:1"
  input: "transformer/residual/residual4/conv2/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/residual/residual4/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/residual/residual4/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/residual/residual4/conv2/convolution"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/normalize/Mul"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/normalize/variance"
  input: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1/shape"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\313\356\220?Pw\235?\016&\302?A\334b?\244>\225\274\347iP?\354\231j?\306\333\242?\332\231\233?\034\013\257?>`k?\340t%?:\026\241?3(\231?\005\215i?\233\227\307>`\320\301?\266J\351?\253\257\206?\022\250\230?\210\313\270?\210\255R?/XS?lU\035?-\032]?A\3703?\177H\272?.Mx?\006\211\266?7N\271? ?\244?|\335\226?\273\347\370?\322C\223?\222\224\235?\252\237}?\002\270w?\030\324/>\274&\211\276\326\227x?\215\313\266?\246v\373?\367\274\227?\017;\212?\206]\261?n8\277?\206\316\337?8\374\\?\2250\241?\"Q\273?.O\311?\232n\227?\r\325;?Ti/?\364\004u?A\237\250?tx\224?\246\036\224?\350\323\313?\243\024e?\252\234\356?\236\'\340>\321.\033?X[\232?Pa\000?\361Z1?\212\260\261?\342.o=l\376\014\276l\325\222?y3T?3\251\233?\031VX?\344\271\236?X\371F?\254\275??\3159O?\365\330\177?H\367l?\344\001\254=\035\235*?\006{\241?\307i\203?C\326\270?\014\337{?E)\254?\036\245i?\235}\204?\027\303\207?\234FX?\314t\243?\323 B?\024s\264?\271\257\245?\271\210\260?\357\025\214?\253K\355>\0334\246?\020\246\200?{\003\340?\201sx?\3543\326>\333\220U?\263\221[?bh\200?\357>\216?\342\255}?\310J\031?\033\205~>\256\376\214?^\244[?V.\316?\023\326\340?\201\246T?\352\350\247?<\304b?\265-\265?\217\317\370>\232!\372>\261\276y?2\316\276?\020\276\214?\356\t\200?\026\203\203?@mL?\tQ3?\272\242i?@\032i?\016\375\236?\3074f?\013\316\374?\275\200\357>\246\243\227?!Yp?\264\316w?If\235?)\264\247?tT\316?\036\375w?yH\204? \210\241?\274\363&?\024\016|?\"\214\005?\021\220\220?\247e\226?A\032F?\364\305\266?O:\254?_\256\205?\221#\'?\224\202\246?^\267\233?\325]F?V\010\260?r\373\257?\0343\322?N\305_?_\335\254?\217Y\014?\346:S?\t\242e>_Q\365?\365Ki?\271c\211?\274\314\210?\010tn?D\276\213?\251G\001?:\373\254?\345\337f?\306\321M?Bmv?{\224g?k\022V?`HK?\372Y\243?F\037\204?\223\261\234?\213\216v?U\247j?Mi\205?\021\204\233?\255\365.?\304X\212?\357@\212?\377\222\305?\225\237\260?Sv\351?\267j\232?P\251\246?4\243\241?\341|\270\277[\343\234?7\320\027@\246\341\032?\203P0?\022]\022@\025\232K?\372\327\021@Gp\207?\374\263\273?\201\017U>\3428\003@\206;\367?\227\270\314>&\234Z>\307 R>\252\034\240?u\323\244?\244\347\255?\304 \346?f8\213?L\341\215>I\260\315?\004C\005?8\236\003?zz\322>\210m\261?\3009\251>D/)@\0235+?Gmr@\337>\264>Y\313\340?\264\270\022@$H|>(\n\247=\365\367\n?\2163\222?\312\216\206?\273\256\202?H\327\215?\244m\336?\342\224\213?\352\272\001@\"B\375?\376\337>?\306\317\222?\246R\251?\212\341\021?\266\016\257?\366:\243?\257\300\206??n\223?\210QT?\216\024I?\362\034\304?)\376g?\235\336A?\200^1?x\225\245?P_\354?\2038\265?\275\333\375?\326\333\266?\366\237\235?gt\241?1*\203?\003\234j?]\314\246?G\301_?~\301\017?\177\276\033?#\034\201>\343\275\356?\r\"\203?bl\017?\373\305\222?\025\376\255?\024\n\244?{g\374>\024\272`?\367%\202?\357%U?\244\352\351>\355}Z?*`\r?\367\035\235?\034U\034?s%D?QMw?\350($?\301\216:?x\363\026?\177\303\r?\351\357\035@+\022\021?r,/?\214\' ?\355\256\242?\n\224\261?\355\273F?\031\336B?%\221\250?p[\254>\0064\223?\031\302\345?E\261\345>\317v\267>\341#%>\231G\323\276\344\274\213?pK\270>\270|\257><\324\372>l[\344?\220\302:?t\377\273?D\020p?\022\3757?\303\242\244?\331\310\207?\232J\350>\2677\350?\251\265\221?\"\t\002@\205\375\301\276\366\177z\276\350\006\347>\030\234\267=\360o\225?\344F\271?\351\3032?:u\031?\206g\301>\262<[?\201\250c=\225\022\224?\373\335V?\257u\237?\327\275\217?\004w\242?@\240{?\202}\026?[/\253>\3252h?:\232\250?\376z\216?\343\342\211?\023bW?H\371#?\033\r\223?<\3576?\240\005\340>\362{\033?L#\254?\006\200\217?\031u\325?\204\001\210?\267\202\245?\346\233\320?\026\212\333?\177\272e?Z~\226?\206\267\237?\202\376\251?&\344\004?\007\333A?/\3554?-\252\253?\300\005\207?\240\337w?\224\240\006?\223B\210?\023\262\260?q\212\367?\215\256\217>\216\333\"?by\007?\025S\216?\022\311\243?\264fd?p)p?\030H\254?\211\372/?-xd?\254\034\235?\254\204\320>\340gy?\231\247\251?SO\306>\223\363\217?\244\224N?\307\245\212?\250\325\204?\375\025\323?\272c$?\246\374\004>\312u\222?4\223\\?\3406\250?\301\263B?@\214v?XCS?\326\260\211?X\247j?\017\316\216?w \217?-\205\006>l\205\253?\256\373\315?\371\0336?\313\n\247?\2058\223?\026e[?\376;\253?.\300\026>\351q\032?\007\304Y>\303s\220?Rn\323?\353\337\323??\310\266?\376K\205?\355\230c?\374fo?\215I\251?\310w\010@R\221@?\300[\234?\277\250b?\353\214.?Lp<?\326a\303?\357}\342?Z\373\214?\323\t\257?\370s\000@\022\272\247?\302\254q?\333\333\267?\324\017\207?$K\357>\320\323\312>\250\327\247?\r\352U?\321\240y?n\025\236?\000\266d?\216mt?U\300\245?\007f\004?\257\354L?s\321\034@\267\330W?\271\305d?\212E\231?\203\356*?\261b\224?\231\327\214?[n\302>\001\367\364>\007\246??{b\201?&\205\204?\237(8?\374\"\213?=\223|?g\354\276?s\351\211?@\033\262?\304\212\230?),\360<=\3435?\254sP?]\350\035?\377<)?Z\371l?-\316\014>\3059\227?u\005\343>\334r\206?0/\004?X\t\204?\375\322\247?L6*?]\364\224?,\217\307?\331ze?\315 \034?\253\351\201?}\240\027?\333#K?\324e\300?_e\177\275\315\031\343>\240 \266>3\327\004>-\223\300?-\022\354>\007\254>?\335\211\001?\017Q\366?\336\251z?B\000k?KRg?\003\013\'?\t\251\277?\267\366\370=N\230\215?\250\256\031>E\344m?\361\010\257?s\203\003@\274\272\277?\362\nd<*\3541?\326}\202\276pV\251\276\304\352\r@<+\200:\263\033\225?$\013\241?\264c\016@A\304\300=\221N\031?\250\016\220?HX\231?g\226\240?D0\357?\266]\026@\177,\276?\206\334\212?\036\276\003@/\037\235?Mv`?\236\317\327>7\351\215>\016\363\221?Vv\254\276\313\020<?\203\360e>[\331u?qW\311?\244:\022?\306]\205>\267\026\236?@}\320>B\221\'?D\362\031@\005S\274?o\007i?\211\226z?>\006\002?\'m\020\276~\277\352\275\201V\302?$j\024@\313N\006?\375.\313>\344W\270>B&\371>\223\301;?\277\2338=\014\267\242?\206\273\036?\267\354\267>\200\007\017@A\334\273?\315\322\272?\267\377\030?\033@\203?l?\303?\267\005\343?\320m\025?i\365_\274\275\245\312?\264*\373>0\371\303?7\230\226=5f\306>sI\221\276\222&\222\276\354\270f<\021\357\343?Bz\275=\021CA?\274\252\010>~P\205?F\2125?~\327]?\315\223\010?\235\322^?\325\224\307>K\245\022@\200\261<?\037\304\024>\303\242\271?\273\005\014@A\333\324?r]\255>[ST?\256\202\241?{\202>\276\356\341\034?\310\340\244?{\241\265??H\201?@\334T?\237\347h?\336\r\021?\246\r\262>\027\270F?I\212\031@\311^\367?\237\361N?\234\314\257?\016c\032?\237#8?6\355\023@\254K\303>\002\211\216?\237\300??\270\226\321?QH\261?e\321v?\311\327\327?V\353\263? \314\302?\355\177i?l\320\241?7\374\231?B\010]?\321o\n?\244\345\230?;p6?\310N\253?$\312\302>#\246M?\343\014\210?P9(?\213\0161?\007\313\226?\363\262+?g\232\311>\315s\007@\373\n~?\356\r??\371\306Q?wn\255?pZ\035?\231\263\336?\233\343\353?Y\0028?q?#?CX{?\346x<?\226\356\232?\225L\215?\333\037l?\371`\220?\266\365\010?\320\223:?\3471\'?\254)\202?\330\231\361?0e\003?\321E\353?ar^?\035U\205?m%_>\307\037T?\2615\275>\202\215\215?\354\347\200?\231\017\323?%M\232?\232O\276?\277\351\212?\241 \353?\235n\333?N\313\335>!\016\304?\246`\247?a\312\272?H)\376>:I\244>\003\375i?Q\337b?(S\343?\274\027\376?:\316\256?~\034\203?{\367\272>~KD?PA\362?8)N?\254;k?\004X\320?\337\233\017?_f\\?#@\272?\224`>?\347&\210?\357GN?\336\364\232?M\337\205?\273{]?\023\261-?r|\214?\020>\003?f%\223>\013\002\316?\264\301$?[\234*?<}\261?r\342o?J\177\236?O*\333?!\316*?\232)\334?\313\233[?\200\212\263?\036\350\207?\345e\206?\255U\216>\205\010\247?\203<\213?\277et?d\362\207?V\347g?\367\014??|\252m?\252b{?\023\272\\?ax\307?t<\263>h\242\223?\270\273$?S\340-?.\243??\336x\321?}M\217?\310==?\262?\317?Ne\362>\000\2376?a\341\212?e\356f?I\025A?\260\327f?E\370\323?)?\335?BZ\314>e\347v?\000\360*?7\3560?N\030\200?M\211\320>#\373%?\371:S\276\370\237[?v\375\354?\213\306\252?\023\257\241?\200`=?[\003\277?\247?3?4\005\241>+\353~?\245\2352>\205\267/?Vu&>Z\r\205?\266[\014@\257\227L?\242\344\027?OSz\276\316\035\251?\200\276\230?\353|\246?|T\337>\256\'\250?\266F\312>\230\242\341?Od\220?<X\311?Q\006p?&c\340>\347\211\334?A1.?+\024\377>I\020\373?_X3>\377\254\221?\002\020\364>M\250l?\365B\212?\003\000m?\356\261\355>I)\233>wW\226?i4\335>\202\337~>\335\225V?\303@\376?T9(?\360\335\257?B\236X?%\256\216>\341\014V?\202p!@\310\023_?$xv?Dv\233?\323\242F?*\277T?\010{\204?65\007@4f\202?\305b\332?vb\234?\245\344b?\002=\022?V\240\t?E9\201?\306V!?{\334\215?\023:\357?y\344\205?\254\205\200?r\264\212?\211\233\244=\342\\t?l#R?R\301\372>Z\022E?\2126\t@\245\361\200?\231\345\242?\320\323u?"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_1"
  input: "transformer/residual/residual4/conv2/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/residual/residual4/conv2/InstanceNorm/mul_1"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Sum_1"
  input: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims_2"
  input: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual4/conv2/convolution"
  input: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape/shape"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "s\030p\276\222z\271>\347\363q\276\375W\324>\014D\362=M\215\335>F\"\215\276g\347!\274N\256\031\277\266\312\004\277\006+\270=F\020\257>\374\314c\276F\213-\276\252Z\332=\212\245\352\275\337\306\247\276l\343\177\276\303\304\220\276\214]{>_\371\017\276\274\020\214=w\323\355\276\230L\245\276\200(\353\275\003\276\222\276\356\306\313\276\004tJ=\371\351\216\276\362a\356\276I\217m\276\001\314\020\276\313zH\276\235s\261>\232\252\020>\235\1770>\244<\234=\260\360\'>\276\2613\276\201\351:\276\351\020\256\275\343\035\355\275\227\314\244\275\035\"\250\275\306eP=\240\242\251\2751\031l\276\266m)\276\356\277\357\274\261\2741\276\243L\021>\0233\212\275@\254L\276\021\224C\275/\302\017>LM\r\276~\315F\276r\371\000\276\2459V>\231\004\000\275Q\366d\276S\000\341=\241\356d\276\332\374P\275t\326#\276\250\"D>\313\'-\276j\207K\272G\330\032\276\243{A\276\324,\340=-\315\266\275 \r\204>N`\374=\013\320^< \330l\276T\372\357=*\265t\276@@\207>\243-\202<\200\"\330\275\341|L=\t\222\254=v\345\210\274\364\226\020=$\267\216\273\303\320\350<w\004B>\272=\235= U\241\275\030*\363=.E\247<\264\207!=\204\253\215\2769\243\316=\231\3542\274\002z\254\274\374\003\251\2769Y\206<yLw\274tz\n>\020\315}\275\302S\010>L3\200\275\230\250\330>w]\223\275\034\243\276\276\374,2\276\257p\201=\014\322$>U\321\n>\263\227\214\276\307\242\">o\222\215>\013-\263\276M\355\373=\342\202:>5\272I>\253]C\276\030\221\327\275VzF>\213uD=\353\"\355=\273\327\027\276\352 \353\274iGQ\272|\r\207\275\td6\276\332\034\226=E\351\243\275\265\335D\275\364\334\226\2742\244K\276\334\3065>\377\277S<\346/!\275p\201\362\275\251\346\270;\203\376P>X\254\322\275\377\301\222\274j\210\266\275\322\275n\276\032IQ>\341\214\313=\027\212m\276^Q\257<88\007\276?Qc\276\023z%\276\t\241\341=\201\302\304=\370\027\034<\217\213D\273c\363\013\276\262Gn=)\312L>X\217\323<\326\210\361=\336F\356\275\260\301\215>\316\226W\276\037d\204\276\',z\276\010\026\335\274%\300\246> \311I>;g\313=m\314\345\275=X\233>\236GZ=\365\262\226\276T\364m\276\3164I\276\227\257\201\276\024\3430>6\031\345\275Rz\177\275\303\242\017\276\353\'\336\276\214\371\016=\301\017\000\276\224\007c\275\225\275\214>\306\2231>\004\014\217>\013\321S\275\340\330\335=WZ\273>j\273\'>\346k\266>\351\263J\2757\0168\275\344\000\215\275`\372?\276\020\302<\276{\324\210>\323ti\276A`^>C\324D=\224^\263>\246/\003>s\266\260\276\177\032a\276<<\266\276\265+\226\275\201\247\260=\302\273\023\276J\243\217\275V\t\032=\234\227l\275\365rK=z\244\002>\260a\220=\017\032\300;3G9\275h\314\362=\263 \337=\204%\360=gST\276\357\312%=\373+\001\275N\373L\275\266\177\205>\367!g>\373\362\003=\251a\014=\tQ`\276-L\341\275\264\340\336;\033\203\263\275\330\0261=;\271\360\275\344\332`=-\215\203>.W4\274_x\023>5\346\220\276\271ux\275_l\344<s\007\221\275F\356\204>=\356\031\276z\200{>k\t\322=\r\203I>3p\261=\271\345\026>\243F->\220\004\003=^8\236\276+\347\257=7=;\276=\320d\276nG\303=\014\227\017=G:h=3\2343>o\356\206=l\306\262=\235\344\317=\334\0058\276\037\323\347=\206B\013\276[\305\317=\007\003\210\275\005\265\352=\343\330\317=\177\200\363\274|\201\n>\252w\014>h\235+\276_\273@;\364rt=\364\222\205=9\307\016;\374\025,>Z\234\023\275&\206\336\275Mb\301\275\231\224\214<\251\323\023\275\246\023\202=eQ\241\275\360\244\311\276s\257C\275O\236\214\276\341\200\016\275\361\270v\276\266\352!>\261\024\262\273\017\027Q>\371\010\035\275=3S>\252\330\210\276a$e=\310G^\276\200z\371\275C\223+\274\252\'\371=\2571\375<{\320\207\276\312s5\275\026\314\203\275K8\r\276\315\341\243\273\342\342\031>\366!\277\275\266\205\201=0\001\360<F\312:=\233\277\235\275\266\206`\276]w\220\276\343l\303=a\203\354\274\355\301\345\275\207\010\t>\245}\376\275>\357t\274\030\017j\276\204\317\034>\343_\005\275\320\305->\0334\336\275\356W\003>\004\210\244=\323\364\203\276\351\347\003\276\010\245I\276\267\006;=3\347\000>\033)\342=R\037\333=5q\177\275N\275\006\276\014\034T>\374\240p\276\221\002\210=\356\235\314\273\374\002\026>\201\221\232\274tk\312\275B+;\276\004\235\222\275\322x\\=\365hA<\327\336\233>\034\030\226\275r\304v\276O61\276\255\026\344=\247Q\227>Ohw=\374\327V>u\371\205<g\234g\276\246\246,\276W-\341\275j\230g\275\023\\\024>Sg\231<\230~T>\246\250\325=J\352\002\276\331\210\021=\216\272\216\275$5[\275T\367\272=4\256\246=n\360^=S\330|>\232\221>>\355\274\203\275M\324\226;\340\024\253\274j\003\244\275!\023k\275\020\006\207\275\352\354\027>\367\303.\276\213\347)\275(\002\020\276\345h\353\275\303gG>N\345\000\276l\247\225\275#S\201\275\\a.>Rh\315\274\021\231!\275Yb\206>t\240\341<h\346\362=\354\231\234\275Fk\r>\331]\246\275u$5\276\023;\252<E\222\033\276\351\373\332=\026|\304=\024zK=%\332\\>Y-\314=\376\252y\274v\016\031=:\303m<\374\216%\275\270&c\275lNh<\023\007T\27411\230\275T)\023>\322F-<`\361\225=\206\304\214=\302{\265\276\307Y\232\271D\253\222\276f\236\270>/\251\277=\20574>\020\203\253>n\327z\275\264\215\356=\327!\273\276\233\362\352=P\275\241>c\2511=\262\037\261\273\357\027\334\276N\275g\276\261\272\023?&q\304\276q\276\262<\274J\234>.k\264>|\033\212\276\204\275\274>Oe\324>\217\245\034>\346M\244\2764~%\276\263\253g=\247\205\"\276{K\265=\235\305\177>\200\"\243\276\271\377\023<`\300?>\346S\224>\237\364\370<\216\0265>\r#\006\274\223\242\361\275\000\352\251\274vzp\276\021\376\210\275\251\346b>\360\217\201\2765/l>\321\307==\314\265\213\276;5\003>>\213\224\273)%\034=\0348\262\275\027H\256=\270^n\276Ir\031\276\345.\227\2758\363\032\275\244\356\224=T\317\225=wNr>\031\202\207=\256Z\003\274-\314\233\276\265\023?\273\227\367\271= \200E>\263D\320\276g\037\251\274\323\217\024=\034\237\220\276\236f!>\214\270\"\276r\246Q\275Kz\r\275h\025\217\274Ok\216\276\324,*=\321\260p\276\205n\233=wk\'<q\302\252\276%\203\200\276=?\222=W\354\033>\\\376\312\276\000\323\021\276\326\204}>V\256\243\276k\344\020=2N5>r\257h\276T\370\347\275\341\355R=\240\206\302=\003\310\204\2744\222\016>\316\253#\276,\345z>_\213\036>\315\034\244=\020AA=1\275\237\276\327\312\251=X\003\215\276\344\255}>4c0\275?+o\2760\025\234\275\024/\002\274\272\352\257>\271#G>\024\315\227\276Y;\324>\341F\343\275RP\200=[\356u>\217\376\001>\201\317k\276\325p\205>\330-U\276>\375\265\275\344\341M>\272y\377=\036Ai<\006\333,\275\265\352Z\276Aq]\276p>g>\210\245\224\276\322\177\306\274\312Z\207>w\271\230>\221\344\033\276E\"R\274\362\207\277\276\322\375M\276=X\031=\310\027\237\276\017\3332\275\205\237\014?\240(\377=\321\327;>>`\330\274h\027\366\275L\222\250>a#\026\276\256CR>\370\2376>rP\265<\306\027\220=z\035\240\276\325\034\252\276o\013\241\276\027\022\246\276)\013\215>\0073\032>\033\006\304\275j\307\214\276\302\257\274\276\267\302\344\275_\265\231=)J\373<\032\200\010>\213\003\215=C\333\306\275H\204V=|\2466=\217\000\t;\232_^\275^\230\376\2753=<<\304t\346<\213\207\264\275!9\321=\245\354(<m\037\202=\003n\344<X\201H=d\262\301=N\312\213\275\245\2236>\034\200\220\275j\010F\276\232\202_=\322\246\306=\206\3059\274w\367\003>R\337\003>j\272\273\275\306$\004\276G\020.=4\350\237=y\366\354\275\213\023u=!\030\007\276\023\245q=\211`\323:\332!>>Z\374\351:2\372\037\276(\006\307\275q\250A\275\250\362\275=\343 *>i\320\236\276\010\0350\276!\036\342=\362\346i\276\351P\232\275\031\221[\276\227\205\020\276Q\261j\275\325\333\000>\216\333=\276X\213}\274Z\'\265=\327s\301\275\277\363\023=\241Dg\274\231\027G\275\025\313\317=5>\017\276@,\311\275Gz\354=\014\316\037>\255\261\266\275\016\343\335\275\023\224\203\276\223\370\016=\261k\307=&\020\026>\022u_>\216\301\217\275\307\266\t;\203\255T\276\375VF=\222o<>\254\363\030>\336rE>\357=E=2\320)\276\313\000\312\274T\370_\276\304\314\016>\016\274P\274\215\363\210\275I\0008\276\017\023F>\n\236\343=\362\355\234\273\320\221=\276\234\335\232\275^X2>:-\352\275p\375\364=\306\364\014>\273\266\021>\216%I\275&\357\213\276\037\016\027\276\004\353\304\276E\203\237\276jO\004>Psj>\033++\275v\037Z=\254\360\215>\242\235\005>}\333\255>\303\322f>|6\204\275\245\335\202>\316\326Y\273\031\360\357=a@\201>\265\177\367\275\375\r\306=\t\356\264=\231\254\263\275~\271\232<\310n\206=\243|\324\275\021\207\245;\220t\204=\347:\244=\331$]=\364~\230<\017\235\013=\343\nH>N\352C<\360\023D\276FpR\276Eo\325\275\017\365a\276\230\223\207>\323\027\262\275<\036=>\346\364X>\007\204\3679\226\225\204\276\211\262`\276\330\243\234\275=,s\275Gb\353\275\225\n\005\275\244K\341<\303\030b=\240N\233\275:\264\303\274Ke_\276\346\014\335=7\222\353=\245@\302>K\324\313>\331\017P\2763\033r<\223g\272=\334\327\013>\310\027l=\245\362\247>\031\2310\276\264\302\027>\255\347z\276\201\367L>|u\032\276\357\0065>\216\201\270\276\237\207\010\276\365\\\253\276\023Y\202\276\315\254x>\237\242\266>c\212G\275\224\364\326\275yx\332\275\235\2262>\364\335-\276\264\025I\276\2368\246=Jn\263\275\"[\271\276)\313\313\276\317\227\267>\254\264h\276\324\372\233\276\370\321X\276\301\031\010>l\236J>`\270o\276\r_\205=\031`\207\275\355\310K=\264\240E\276\331\006+\276\013T\031>\211\277$>\032\016\216>p\255\357=\270\240\232\276\354:\351=w\344\251\275\005\345\207<\225\3550>\233\216\342=W]\240>\"\216\224\276\305Yj\276]0L\276\262Uy\276t%\252=&\201\231\276\332\301\204>\300E\212=\355\022\356<\013\262\005:v\261\260=\026\233\220\276(\321\230\276\275\005\">\211\353&=\235\220G\276\253\303m>i:=>\222\300^=\225i\371\275\354W\211\276\217|\351\274a\020\"\275\374\007O>\270{\333=\345\033}\275\256\374\202>S\317\356\275\022\243\014>\213\230>\276\220\366\021>\245L\221>9d>\275\366P0\276\013<b9\217\225\202\276x\277\344=6`\355\274\323\363\n>c\255\213>r\251F>\003\370_\276\364\275\221;\r\3455\273\242\253V\276\277\221m=\373^q;p\320\226\275\020\3407\276-\274{>t\207\014>"
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Reshape"
  input: "transformer/residual/residual4/conv2/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/residual/residual4/conv2/InstanceNorm/mul"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/residual/residual4/conv2/InstanceNorm/Sum"
  input: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims"
  input: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/residual/residual4/conv2/InstanceNorm/moments/normalize/mean"
  input: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/residual/residual4/conv2/InstanceNorm/ExpandDims_1"
  input: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/mul_1"
  input: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual4/add"
  op: "Add"
  input: "transformer/residual/residual3/add"
  input: "transformer/residual/residual4/conv2/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/MirrorPad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/MirrorPad"
  op: "MirrorPad"
  input: "transformer/residual/residual4/add"
  input: "transformer/residual/residual5/MirrorPad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "fxkY\203ftpb_fg\226wWP\211^w\213\206Wafs\222I\254>dB\226\205f_\220<|c\256v`|\221q~\232J{n\214cWSq\235\204BK>\301f\211XtW9\206~DwnKKyfr\204\376Rs\204kFO@uo|\212s<\210\256\274u\226\245o\230y\242\211\207y\366Qml\213Rs\220|pVx\211\213\200~\205ji[\216ib\307lwu|\215N\204\2152\244hsb{fI\216b\\\236g{\206\\z\236Tso`{sU\205gdn`rUQefm4\234eT]\213V\177q\231\203v\177\215rwQrey\202\233:spp\213o\212qti_^\221\177\222\242\255\207\234G\200zwai]8k\\jo\\\222}q~|m~k\210en\212}eor|~mJ\201pwo\230\177P`~ae__hhlSCpln\177u\200bgUxyWj}Sh{Mm}\230x_yx\207^V\246\203j\215tiod^;Yn\217M\207u\244^yn\202\200na\202it*vh\253{rjxywuzJ\203nkja\223\201v\211pnwr(\205Giv3@c\246bvpai\235~l}}\203\205\210}p~cj\177]]gY\\\247fih\214\200o\260owqPj7lgp;S\220\210v\247Rx\231[X\215`p\210@\213\201\225til\215k\244\252}\211\273[\242\216]\215]~\210\216ly\214i^Mot\230\220gtvf\262s\237C\212\315Qosh\247\224q\266k\221o\217\\j\241XUgs\212|ldlp\207quiIgXa\202jk_\204\224{v\214fh]Fz}\213i\202dg\2279ubf\210\215Q\231k\217m\215\237\276[#\203\\\227l~`\235\211qpf\227~\211[\207f\217alkZ\223Fn\\uAb\177\\\245p8F\177\230Z\\x{qg\027hiwEdxf\242o\200Uo\213r\231\203F~]\237\221dk`\230uyyW\221{\245\230\177\177\214W@piP\214\241+\223|S}\205\214<\201jmI{pVdW\202V\201[bc\177kj\233\212\215\213\205\232^\233\217xq\227\226_]~\201ba~o\207\234fWgM}y\210Wkyy|s3\204RPtWMeO\211fsPo\217\200\206[w\201vt^wY\255K[&{\265\216fd\243\223`\216\201zzdp\207_\202>O]yKZc{\225n\207\207\232\224\256tK\214O\177@j\202m\201ce\227lrwqmq}J{\225^v\212ut\201|OX\206\216S|\232Ji\210tF\210fy|qlQv\201cDnkmr2p\224\201}grS\202\204\200\205Uc\216jhlQ\212gsw\226\200L|\206\262~sok}\242\221\216SuU\205\222bc\230\216ro\200{\\\214p<dc\206^\222vmym\200xrarvtx\201tucH\272uu\221o\205\205ho\224qtS\200\220\177~km\204\257\222\210r\214ch},\\}\177wr[kqr\\\220p\235W0xkRwpncYmcU\241\220FXGG\244`E\217dcR{\205c\202j~a\203bbT\246hO\206\214Yn\234B\251[}_h{wXrpt{qlwp[uZmbo\201\235\214K\215Xg\211xn\\\207wWkx\231\213Y\204\240\252YY8\222\202\223i\206\177L{\177\247ztYIq\223\212`\222\263nvXopi}flpn\\zu\211\204bT\201ap\247cg\201it\226W\237nKG\230ySs\2205mg\212@]\204J\204T\221S\216bipa\214w\252\203G`V|F\223bq\201`ka\236\251z\243\200`giTyQg\221\217ta\335\303\214hVl[:v\205\235\177\217\200}|\253vTV\237Xnq\213]g\210`Lbs\203\234\210k_|Vha{~\273`u\205\204Pk\211trqqfjv\223_t\207|\217xn\203h~\213N\201xdoTakk=b_\201\225Sldk\177lsr[\236m_o\223\206\223g\177lcarXx\232\272<\200nWk`l\220\205[s\226\216bez\203|zI4:}U[dmb\205[qyi\201Nnc\207hmxefp\213wQgl\200\210bau\177]\226sZctWsRd_esx|nim\206k|YtqymV\217\200I\214U;o\212rmK\244;~Z\202<Y*8]}|\210d\221vdnt\233\232F\";\\\250Wm\201{a\2028\217^\216s\242y\200ru^wLwrab[s\210q\203]\226\214qKoiOnHAs\214zs^|\201\203uSdvE\214n\200\204y[gmi\215|ih\212\235<f\222\203\204\222y\225Ws\207qus@?Ul\212l\217w\204sgXuMwu-\177w\227Hnn\213w\222[A\235_q\241Jx\231^\201sme\206\203QP\\g~f~t\177t\210\2205w}\244X^`Y{a\222\203]\220\227otm\225\202h2Dl\233La|\211\211\221ntT\214Ww{~\202OO\207dn\203\205m0eR\\\207\255H~wb\233d\237hP}\240ts\204\215\213c\270~x<r{xmxxz\200\200v\204ca{~\201c\201rz\200fzgoKnMW{v\241ztb\224pjo\200zdd\022b\210y\\itg\246o\231\203m\216\211~y\211y\177\313kgN\204\200xvRn\177\231\253}U|\211hQuO]\207\203y~Vmdc}eQRYJrwfwX8]zfW__y\200\207\214\213\214V{v\231\177Sljh\200Y\235\206\223kw\213g\202\203\014`^a\204\177n\212lm\215}Qtm}BbWuW\177\217oh\216\236j\202~c\224]\217Kmm~RSU{\232reY\223xw\207g\214wuuzhwMup\202\214cZ\217\\ua\217\212r\200xIwl\202i\220Jtw\224s\203~pV\212\220ljbo\215T6kft>\207uis\221|[\202Yo3Kkuep\216qQ\200jRNt\200gju\004v\247n\202\204\225QOnf\200qv\202\206rucwi\217Z\177ihi\212\224SqZ\037\177\241c\201\200\217l\206y`_\206\226yexep~z\202yz\223|\225\207\\|\233\227\240\211g\201ihy\213uxrj\240tw\222\216\201wwn\212grE\222\206\215vx\221r\245\216z\200nWQu4]zoz\203Ws\210J^\220U^\212pi|;gq:f6duj\202\216\214\206_PxS>\266z}yh\214uj\224\177\200\206Y`_\224zT\202\205m\235\224n\216\202\231awukdPpn\214pTUwd\225pp\256\221rtYTbOOna`kr\240|~\205stj\204\226~_`ZuS\221d\200X]cs\223\207ZQGv\247\223iw\177W|;ntV|osy}]qv\203\200~Pp_t\231D}\201d\201\245\205\226\232OH\230aE\220~QN}Q\203sugbOv_hPa\221m\254\\\213fpZAl[yLutowOqrXgQN|oF.DccZyz\204\200\215_U|rykNG\177\212\235o\220Mm3c\242VC\230nw~Xencuz\205gWX\200`\203z\201p\224aa\200hta\213yn\200g\201v\214\233\206lJ\205\\io\213|cwc^t}\250Fzq\\Eoyk\177K\244W\227h\201\231|\215xum^\215hxKWkkF\205\222i\204\245\215_\201`\207S}x\236k\230q_vx~g_^Yz_hQ[xxm\206T\204\205\230i\201wjxY\177n}tqg{\201kS\205P\236tou\222\220uYlwsn[csiit\231Dm\213\214ixf_VXVltyHwMZ\221\230uxE\232t\216\222qzj\236\203\212NO\213Y~t\221\214f\224`ZuO\177\201RZ{j\225\2313\223Sk\177{\205^\205nG\234<h|V|i{y{Ten\201yao\202MjRXkV\207Pd\206\207\201aew\222g\207Rrr\\SxG\223\230\200t\266~\216Y\\H\257\200\206txTz\222_\204m`UoXg\224\262~x\212v}\210df>7Rk\222q\214u\214vkkZ\307\205\220\203ph\226v\227\204\216\202o\202ih\247Zom\203\206^u\206\210[\217\213v]R\242u\210]~z\210\226\245}\\Q\255Q\207\\\200~\200BPhj\230\214fZDts\223sue>l\177t\206hfmLiiRl\224k|\207u\254z\250[v}\262\204|\222x|g\264Z\201S\222~DLnu}c\215i}5T{\222\220\241l\202\205mnqw2\210s\245Ua\216_\225A\207rW\217d\200Y\261j|s\177k\201khopz\177{\202\201Ju;[w|\205Q\\L\213xj}Xjhbkifw\233\215hr\217T\213\227tWem[si\211o@eL}a\212mxon\201piPs}\220V\205\251|y\213t\213`\217\216jbbjqb\233a\214\214mTqN\204uic\224\206i_\201\230hdf\\nxU\205xUjmvq\205n]\247qz\212@\200ws}tomm\177\211umGW\201\\wm\233t\232v\225\241O`~ex\271\202vh[us\216gt\213\213TR\207\244\247_V\206j\\\234Cz`\\ju\206ruk?\200x\221tcQidbh\200\211iTy.\202d\311\\Qem\213[\217f\177{S\200^\216\260]\231\200gqx~uV\177~\222\200i\211q|luc\177\240\241\235Rbe\207\177cWo6{\205lqZxm\224\177CN\213\227xats\202\206pUR\226ei\205\222X\216^o\244|tyPV\230s~u|p\220\206o\214{\241u\204tt~]8\230\221\225|\212g\205\212\216\216\225\177qZhNWj\200e\205\204\221z\217rri\235x\262iykr\213nn\211pP^\220\212zs\222\233yVPx}x\203d\242y\207\234\211\226\242HBP\217\205utsyw\251\200\207\204u_axy\243\207\177}t\212yus}zkfwp\215dQs\240\235l{fp\221\\N\217\200\237tc\203\205Y\210Z\203c\201\211W\210\256\220\201a{Y\255S_]q\210\244[:\201Tmen}{utiiokbX\216xmV\203[y\203orphg\207Nj9{As\207\205O\2152n|j}\200\201\213z]\306JNq\232hY\274g\236\254\215|u\234\230jt\212WWgXMV`\'\203zi|AdV\027J}pr\316[i\210\207x\276X\254^pyr__Hoe\241o\300lUM9fo$w\205nl\205wv\226y\213r\215\270jP\224\205\202f\210\234\225k\260a\232\244g\256p`\216{Um\237\217\204yb~\234Vilr\210_\200mxAt\203q\177OyOZiq_iZrm\206z\227or\202\201\203}emo{}\240w\261^|\206\223zY\245r\262\226n\245\231\212\200\211c`Wfihj|W\222\204]iG\213\210V\232\230\177\177g\220\222\263t\223\214R\213zXxp\202in`zuZs_jb`naqJJ~c|\204ov^\202\177\203sof\222m4roP=I\223jKF\247z\214p\243\237\266\210V~{\216\277og\333\204v\207~Cr\216UevP`lyT=_kxicp^\210\204s[X9quUS\202Wx\230~R\211\223<\203UmDipz\223fz\202|_w\200yV\224\231r}k]zToRrfqTl\211\\hu\215ru\242;Yu\213jef`\1772ed\205a\244X\214xc`\200ka\222>\231l\220\201q\227\201r\214\232\240\215\256i\217\222\200\245_|\302\226\215q\216^mZuv\234bng\211\212\223\226\230\230\202\250pu~i\230uf\316_b\261\232C]\202c\240sYM\203Olz\237\224yp\216xnSW[d\227]gbX}eBgreaxkw\203ri\\ISMe\221p\\\210\200hn\221\216\230PM\204D\217fd\200\211\202ilM\206\227\217c\204\202\223]p\201_\211Xys\202\210Z~Z\230\177[Cq\207Wm}\204\205}rW;\221ZWae\234\221Ravt`kgT\202\\EnN[M;j{\204\\{l\222\260\235p\221PMZifu\207q\200x_w\204\215>\225sggzmwAazYZbsW\213S[~wk\225\233\265\242\225\213\214\240\257\204qa\206\377\203]\361\205q\211\213\000m\211<zwB\241j\250\246f_xQqwv[e]y`e\177q\177\203uZcmi\244[fY\215\\lX{\244\202if\240\207vmap\200ls~Aw+{\203Rmjmd\177h\202j\216\202\235V\215\210^xmm\232\217\177\222m\214\210\230\266Ur\307~er\201t\236qSd\202Slb\227qQ\240\252i\210\230\253up_r\250m\307i\200\302sH\207t[\210\205:Qukk\022s~V\216ra\221y}h{U\206\260\211x\253\214\207\221o\201nYd`\\{{lilvw\203\221e\200\217o}s_pyaIAjnP\205k^k\212^p\205b\200\232|\200}\226y|Ucgw\207sa\203quydwg\240yfeuks\201\220anokcn_h\235\202P\\~\216\202\206^m^iod\256\246\206\200|s\200jScxs=\211lRg\207kGxyohwwX\213\201\\F|[P]kaN~hy\200\237Q\275V\230a{\205zLXs]\204sQug~\216\256uk\321\224rfec\214}[Hzr\225Ol\223U\210\207\212kr{x\232d\217p~\224tlzsb`\204Vjq`N\215z\230\212\224\200`o|\212kvc\200lj\200[\205\\uW\177f~\203Or\202ml\216Xgh^DY\213pn}Xy\214\263x~\203=j5oprF\265si\244U\242\275z\203\177rw}rr~i\201u\201\222\240RouK\206>\210\246\201c\254Q\206Pkn\225DcCmbL]gshjT}\204\202Kjq!\204\\\200{\202tRsqi~z\217M~tp\207\214Y\235ziV~yWtw\202o\267\230\227m}n}y{|wzR\\v\211\224\202\222k\246N\\jo\036\200a{eT{\201\237~q\206hTi\200lk\230s\210~~wUweq}u\210\204\231fgD\220iq\304J\237\235t\211\205o`wS\205&?ku\214\211Q\201\255xyp_t{Q\200r\205k\240\271\203}\236\210Uxmo[~XO\\X\205lYch^lUrlv]W[\\suja||\205\222goe`qL\223f@ZgnfYv\234P\207\204bwn\243kn\316L\277pA\221\234T\207\204Ay[*\206g\221{[\204\201Flyhg\177~|\216{i7e@pYh2wkmhct\242\225UgnoKrqt\223Xak\214y}x`Djbn`st\210dyo`\200{fl{\205=ja\202`\203_l\204tKdqxg\212{t\221k\207ai\201WxXFb\216jhv\204mieog\212\210cTMh\240\200r}~_l\237fyvQo\\u\202xTh\212~\231\177da\210\231o_OtkN~[ZjWUvXEndnTAStwb\177\202\210}fjzqmwu`wN]`f{\203JB{saadh\204\216`hupW[\200\206k\203\214\177~u\200g\177j\205\177\207i\232\220xomg\205]\200uzut\210|t\220~x\220cnf\202}\202w\234\213\245\213\225\205v|J\215\204tePK\205op]u\222\202k\205\203m\216\222vfkz&\\\201m\206\210c\201\206\202[\216\226\204x|\206hl~tu_nwpOcR?nd8\177fZ\235\202\211T\207ZfYNu\201cI[l}w\244b\211\250\220q=Dlt\210\243+\303v?\207\251I_xS\206~9nl\234\205Ts\332\205fkn\201Pg[\203jzd6\207u\221u\201zR\217P\216]]fe\215f^}\223diZ\223\207|\232{xvmbwHpZ\201mf\226W\224e\205\205^swmmr~\225NfL\226__Z\211qk\260^\223\215ph\204yZ\204r\215p5TZ\212sM]\206e\203\236k\225`WJ\251tb\350A\222o\\z{jkhfhX&\203]\210\235Ydg[i`\211\223\202cY\206dv\345\202n\203pu\207ORi\177u=Ioc\201~\200}\202i\203Y\211\222\177\203\200Zmna\216cv\224g\223s]~vX\210\221cw\213n\202\212|\201qvW\204m\237zto\203\223`b\211W\217d~Zl|ju\205]qn\203vzs\207mt<rFF,\203rgl\212kUp8\221q\205MSkzd\224nil\250KsbX4z\210b\216wlgo\223SW\224bfdp\206P\202R\221\243\200ghe\236j\233\205w]agfnK\242|v\251V\247\207U\243\205OZqz\215\215E\\o\200b]ddfunqk\216gXqqm\\znhQ\217f^<r`|^pQ\217\232yxj\203Ng\177nrur{lfzff}\222Zn_nh?g\217_y\217yN\225\177Ma\202ry\200\201s\213\252\231\202p\202\201W9tk7\300\212nH[\200\236|gkeg\200r\211\234Y\204Z\207_p\325fK\207\217\252^g\226\201\206s\224\001\225ih[[m\267R\221cy~\237d\206Gm;l\210sb\207l\214xdz^r\212g\202zSPY\222}m\232k\203wexiqVzh\210vm\260i\203\242svm\213euc\220wmb\216Uju\204GZ\200hM~m]aL\230ot_z[UWgv\177\205t\200\207TWH]Sn\202p\200psR\203b\200Xfu\211phllv|n^]Zx_icqjeqm}z\206\207c\221]hIu]q\206p[{Qgq\215Ux\205\217\207dP\221yxsDvtt]x\210femaEdnVDs\200itCuf3\212Bu^sp\177y\204tzR|}\216Lt\014\'S\\x*F\211eg\205;]2\303Vcbvv^9\224Od-\213`st\200\210\215\222h\\tV\\tK\2027\200i}5gc\230\205ab\225b]]\201doTDw\236\222\212m|Vj\201pMrjci\216}\206\237\230x\271y}_bE\226v\216m_Swkg\212qdwcz\177s\207xe\242\221\217ni`U\203Hf\205]\177vkenh\205\207lu\205oo{\222\204T\236sl|vt|\\\207r\\Yya^\200_\206~kXm`9uYQrM\203\231dKZjY`A~\206hie(pi_o\\[\215v\241k}AYfc[\204_gm]f\240gb\233t\213\273o_\200\212hkk\264z\201\212\206yQ}R\203\234Z\240pSz\217lE{l\2005c[\200r\244t\205r}q{rEk\203Oam\204g\223a\237\202y\237g[Y\217\213\215pog\237ngus~\213s~\211qkz\202dhn\177\211Ej_b\207\177t\177xroao}\225j\216\245im\221\231D]T\201pe\225m\216l^\251y\237t\243\2257\232q~w|xvN\201\235\220r\215\203\222r\202YXv}whos}\201\223bQ|\227U|ob\207\226?Iswu^n`yn|ukarXS\207vya\233f\200\210Y\177viza\251jo|uwoZ\212v\201pu\212\203\225s\206\216_c\231kV\177\227}\204yqinF\203]\211\234m\207\204om\\}\263cq?nda\215\225rs\225xDdW\214QkSTWnOmiY\210n]`{a!cf\213BZ\224\207{\230TtP\214Xgl\217bpe\242fpdct{\207lej_nk\222Ck\216W]lVQG\227kalivnW\216\\d\177^H\231\213\200mbmt\177i\240UwX\\\203z\177\233`_\206\200\200^\210X\200y|\200vow\202e\212\201\226k\221nTifH\177bwf\200nof~i\202s\200ol\207sm|_m\216y\253CaQw{[\241\206xp}^Wz\243\201|p~uT\240SQlTFv\213i\220\220\203r\200\227~\207\220SXf\231uu^\\\230{\212tn\215}wt\177z\227p\213\202\207k\221qzV.izhtbonr\210~~jz\213\205Gz\\]\204\204\\|u\\|qq\177\220\211Muxx\207lv-\203\205`\235\211B\233\212SxRX^\177unb\200QfhwZb\262U|QoUidj\213zjk\221z\\1`N@\222\243[hH{\260Tg\210f\202\247\207\\Qp\300H\205ar\207\212\241\216W\204\244\214kh\201{qViY\210n\273rWm>P\'jvla{\204(;d\220nxJ\033:^J\232waZ7r\200if\253dE\201P\232uc\202\235\214ZsUp\212\202v\206\225\255b\236\203ox\201nt\2240z\200\216s\224\244udvhu\237\224\206\204ai\246\252rq^\240Zz{`iGmpu|^\210o\205xdi\230ex\204qlonryoraofk`c\246\320\252ahm\232r[\236R\224\270ff\230\207Y\220P}cQel|\236\200\246{s\\O\202\233cnk\245G\204\217\216\202\230n\206Y~@zK^_}\206\214wdyZ]zdm\227~vE\210\207S\213\206=\232q`\200\207Csvxx`ZhKTeqt\2017GWki\206|p[fs\216\251e\211\220k\203o\211oh\210\204\245vt~Vru=N{]FW}\207\205PyZdY,\217hWUhQjgRp\200\207b\211Qf7\211s\213xu\200\240p^mS\214d\245~j\212\200]\204BeZp~kB\212D8\216T\200tN\237|HbnuSqc\2019\274\202sr}}\247vou\232UNQh\2100\227\230\214\200\213\232\262\205\212b\253t\201\234\220\224ym\233n\242f\231s|[k\216\277\232sg\242q\200q\237\303llG\206\216\215\250\210j\215Vm\216\237p\255\204\226\245q|m]PVo\252kLc\240Hn5Zwkva\202pmblZ]RWeadu{AxX\\X\\I\244Vl}\226L\216yv\2029tpG\227`\204w\205y_V?\222\225n]\220z}J\236eG\224\301vr~\177r\206F\210Zu^poS\202x\202x{uq3j\\a8lu\222lmo\206o\232u\242\212Psb\207qEt\210W\217_U[\200\212\222qsewH\255Mmw\205XbWw\202\213$\206\235h\\w\\MSwc\261\\y`=\222oWN`*fj\222\310YlB\212zV\201\236[\205z{ufBG\206\217\220qTjfVug\223^Bs\226\216w\205jq\224X\217hU\221\214f\224NT]ia\222zVD\205[g^\213\207y\202aW\210i\226mY~s{\2248SL\217{Q\256d\234bdg}k\201\205xh\253bmy\236J\202>j\206s\223k\207sym\227Ks}\227v\236yl\224\206hPl\244jMP\232\250}|J}@i\211wpd\203\216|cW\230x^\210nnR}iYP\206gUt\225\216\226cJ\220\240^\205\204{zln\220j\216S\206zlp]Ty\203\227T\200s\213\253]U\210~\231fxm\221uZb\\\205e\201{Nrdk\206gj\206^t\222\221\225\203\227g-\232\201\216pM\212o\221\216]s[\241[hqxQ<{\231R~y\207gv\246i\201\234~\202\223Q\233[]rN`\245\306f\230}{o\230_\246qE~K\244\221\177\263}\241\214N/rlj^8I\214[s:xfCeXvReQwm\246t\235:\233k~\204kT\211\235g7pjr\207\203\222dt\203\207YtO\210\227\247Ux\206\211\205g\222{\206\216y\226\242bi_\210\243\247\222q\213\227\\Hd\207\2320\213l\213}WSfm\250`\245rZttSd\202c|[{}n\220GnJmUvQLrf{m\206\206NlfZ5\222\221qWqq\257tdla}\250kAVp\233F\220cOo\215\251\202T\225\220\202w\216l[`n\203i\225g19fn\232lk\234Sn\\\205\243\030\026mz\242~vt\212h\234\210i[ko\210\211\227hp|i\251x^\224c\241`|v]N\177\207\\c\202u\244|\212w~l{I\\ls\227\226i|{\273zd\204q\202\212z\221\220@_\203\216y\217e\2057}Zcb:Qbm7q\177{\260h\210\206\216^[\205s\202\255\202\201qsL/rjqhl\211\232\200\177W\224\263~d\251#\177\213tQpyPla|]Tr{\245\217rr|\177hu\216\214\220G\234\232^|e\206x\213wuH{V\222\204\226Nm[\233brap@e{g\203\243wZ\200\\[o\224O\200vH\211\237Otf_\\|mnM\201w_x\210I\240M\221Y\244Q\260\223\202FbI\202q\245\244P\253_g\235\324w}Id\201\204I\2245S^aZ_l\213jTagqrO}QpRK_^TJ\212\210\200obqkM\242j\215c`g\216\207\202}Xz[rWRzr\200dtx`K\202rp\215ChbXq\200L\210vmzgul~apf\251avmi\217v\203\244{yL[M\217^\\\200h\200\232\207\200\214\276C\313|~\235aYoPxz\206zpu\236wfW\203\207\240krm\203u\223pky}:\227p\2016cAyHvf\207\223di\213{kafN\221|}wdYU~Pr\"uTskNz\240Rk\211`Md\\b[WUsbpdtwck\232i`\215\216v\207\200l`o\201\217T\210V\201\205\217lqjf\177\210rm\212\205ro\204zZ\222\271z\212_s}\213M\243W\235v~i`\254P\213s\222wkJc\203f]uq\200_{\177ur\242]ujiv\324k\212}|\204X\210\220hKoz\214\203`\207\206z\237XGRlRYxb/e+fjqy\212dw{h<\211]obgbqrqTWdqc|rn9\221\215p\222\253)\205[vL\216pF_\277{o\202\\g}fdeZ]u\232\220\177hYv\260t\205GM\253\210\207\215fo\\\202ToiKQlwdQ\221kcmOOz]\210]Zd|q\237=ee\232pE\215m\201\212m\214jgkup}\232\201nj\220xh@o\224xbn\033\223\200``d\226nqy\234nj\200Ox\230x}VE\217\255\220\214|(\204\177\212U\214\'~~x\2217\241|c}\213sSJ[\210\177Ev]d{{\260\202\207K\231\223tlfPj_\\n[\2224\201\217\235j`Je\215\204f~\202s\243cZ\200\205\217\213PnzX\222ga\230k\213ls{^L{g_r~X\231\206\244\210\206k`\253q\223tiw\212\256ygxd\212WunwuHf\206Jwx\247k}\262~\210\226H\232;U\217\222\214Pk-aU\004k\235\214p:\233\257cpt@K\225K\205z\211q&0\234W\\\200?P\210q\212Oym=hR\216RmI\200\213\223y-R\254e\257\202\216|\201\177[G\203\210gpIHW\203?pL\216`t\203\256]e\204\214\207eZg\213\214uvgo\262{\243\210\222zqQ\200ELx\203}Hg\232^du[^\204\204il^Smv4p\177byc{\201sqq\207TZBn<;xwnq}\250(\217\210VQ\210xlmej\222\263|dG\224\226LJm\222tb\227dvx\177\232\203B\177kjr\202\205uCoG\264Q\213;z(]\202\207\343\203vn\223\242\243\177\242YK\243y\234\226\223~\221\226\223\230\215\231\206`\250bxrSolc\221o\200h~\251ls\216SX6\256zt\215\222\177t\\ydZvhm\232w\206Kpl\211Syr\214Y\204\177x_\207Q\234kjket1bq^dtgYg\216w`Ufbu^Xxkx\205\216vma:\202]]\224cuw]\\\213ll\205p\202}Mgjwa\210x\\Pl\201n\203hm\217ewWr\221}\210Nq^O`jW\211]ud\207Mst\205f[\217m~dQ\275d\242}M\215v~qj\265mTGaPe|Fuv[y}NsV\207ordhtn|U\221\204]\234sDHYlvVzQiaJHri]\2263.mc\212v<lw\216YXb,dJw^z\202\201eVd\212_QtK\217=Vjwyzw\202n|N\212kauqjQZZ}\200\202\234c\230y\216rraPtEu\215x\200\206\211\213\326arf^\201\213d\211sss~qu{_Yqs\\\226Sp\214\214\221\200\205}st \213_h\216o\221\245uex_\206m\244z\215qo\214_\206s\237[~o\203\214}U\211my\\eXE\210\220\234wj_CgjyVo:n?\246\206q\221\200dnQxon.\234Gp[\210NBjdt\201n]Djip\245`R\200uj]yZc\227A\221\232~Q\202rkb\200\261W\211\205\247\204\221RMx\215{o\213Vy\202\225X{\\\200ii`y\207\256v\177\177i\206\205pV\205ylK\200P\177gG_xzq\241{_bi\223~oL\214yM}Oy~y\204\210\227\177\201uZRs\241\223\221\211\221xem\207\231\241gnw\210>\237n\231\222SPytEyi\213Vex\226X\177Q\216S\203\253uwa\224\201gn\223p\207TWycf^\215nz\200s\204`\245|\223_\202\254r\225\206vquc|\236Y}^@l\211`^U\233\201\205^\\T\214o\177|y\242\205iu\226h\206{{y\201\\cc\222Gdyc{Q`c\207\200\206Ug{\210`\205|NS\211jLN\234d\234w}g[{\233y\206\230jg\212gm\202quVrNspp\223\234j\206\214\240\"ebUq\220D\237u\212ZeE\216\231Pe4]+kudu9RPj~y\223\210JiAE}mYwV\203f\201Zr\207\177x\243x\231i\203}UI\203l\\tb\226VXzOux`W\206c\213Y\204z\200Qu\231\207e\203}o\212]\215]u{wyo\216\212rbimsI_=\210x\215\211qba\230b{zct\221{\225;e_vR\201}\234\224K^\202Q\204`\214jp{dy\242r\224\177\203d\220mTN\204m*\204\204{\212dO\220\\v\230fGcs{\210U\216P.j\232aa\236dN\212o\220\214muQfgh|[gzl\212\211E\206\226v\215\214\211\253Y\212\204g\207rO{d\207izc\225k\220pKC9^os\236f\207~Y\233\220\204h\222mt\225\227\220\244\250xy\200Qo{\217\203t\215}_\220\177bSxdfbY"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.04768323898
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.28052270412
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/convolution_eightbit_reshape_transformer/residual/residual5/MirrorPad"
  op: "Reshape"
  input: "transformer/residual/residual5/MirrorPad"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/convolution_eightbit_min_transformer/residual/residual5/MirrorPad"
  op: "Min"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_reshape_transformer/residual/residual5/MirrorPad"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/convolution_eightbit_max_transformer/residual/residual5/MirrorPad"
  op: "Max"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_reshape_transformer/residual/residual5/MirrorPad"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/convolution_eightbit_quantize_transformer/residual/residual5/MirrorPad"
  op: "QuantizeV2"
  input: "transformer/residual/residual5/MirrorPad"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_min_transformer/residual/residual5/MirrorPad"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_max_transformer/residual/residual5/MirrorPad"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_quantize_transformer/residual/residual5/MirrorPad"
  input: "transformer/residual/residual5/conv1/weights_quint8_const"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_quantize_transformer/residual/residual5/MirrorPad:1"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_quantize_transformer/residual/residual5/MirrorPad:2"
  input: "transformer/residual/residual5/conv1/weights_min"
  input: "transformer/residual/residual5/conv1/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_quantized_conv:2"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_requant_range:0"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/convolution"
  op: "Dequantize"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_requantize"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_requantize:1"
  input: "transformer/residual/residual5/conv1/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/residual/residual5/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/residual/residual5/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/residual/residual5/conv1/convolution"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/normalize/Mul"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/normalize/variance"
  input: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1/shape"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "f\227\360>\2762j?\271\023\237?IX\232?\235!\037?]Cv?\005\017\035?`\366\242?N)\224?\2353\350>\205\352\226?\r\007u>O\315\224?\253p\214?\005)\237?\261\024l?\343\264P?\022\242{?\335\247\024?\216\236O?uI_?\374\003\214?O\r\"?\301\'j?\0311\213?\334\032\336>N\203\261?\241a\240?:r}?\345mg?\347\nX>B\020x?\234\nC?\277\276S?\252\004\264>0\003\232?@\030\003?\266(v?\205\302\223?5\353\220>\330\270I?\242f\366=S\207\272>\002\013|>6Y\326?\270H\177?A\220\241?|\221\373>!\252\216?5\257\244?$a-?\252\250\336>N\307\030?\216\311\220?\022$\235?\325)\233?\246\035\233?\214\235\245>\322\201\271?+\225F>\333~}?\324PD?\306\034\200?9\023\226?l\007\032?\345/\247?a/\214?[6_?\241I\341> \264_?f\321\014?q\363y?3\n\203?m\005?>\264\3446?\312\220&>\267\214\225?H\265G?^gh?\361D\265>\013A\224?\301\321-?\362\307\217>\027\346I?i\\*>@Y\252?\020\345_?\017l>?$ig?\271\266\t?-\325\035?\243\3517?a?w?\032ye?\312\t\234>,mS?\266\303x?\211\014\301?\304\257c?\205\202N?\311MK?\034\264\314? \\\205?xk\241?\364\277(?\376.\217?\026C\222?&\311\010?di\241=\024D\323>\257q\272>\024\232\032?\002\257A?F`\300>\273W\260?(M\225?\327\3079?o\204=?\031W\225?\221\334p?\213y\274?\364\233\223?=0-?\260\273*?~\240d?\"\017l?|w\030?\270\327\037?\035n\024?\031\262$?^\367\\?\010[\221?\215\027\021?\035X\251?\371\343N?d4\230?\356,f?\001\200\220=bJ\016?#R\263?\tL\222?\302O\350>\262\356\207?\336\233\263=\231\003\311?N\305c?,\212\021?\2335\036?\261\335\032?pO\203?\317\231F?G\311\270?P5[?SF\375>(\327\217?\246\226\221?\351h\004?\016\273`?\303\343\200>6\212\237?0\340\021?\343ez?j*O?\333\342\210?P\017\032?\330\222\227?\032v3?\243\361\231?\273{\271?\355\237\023?\271~U?\324\333I?\377\254{?\304\306\227?\036\017\242?\234D\217?\273\261`?AL(?\233\261,?(\032\250?+V\364>\376\265\246?\362}\236?@\351U?J\nb?\344\227\203?\344\314T?\260\014\250?[\360\300?\305\375\\?d\215\203?e\223\201?\025\'\233?~g)?\254o\022?\362\355\203?\336N\317?#\375Z?@0\025?\242\222\013@\365p\250?MJ\275?\023\354\021?\226\210;>\001\363/?\376\026\t?M3<?\025\273:?\335W\311>\353|I?\236[w>\234\233C>\336]\014@\2008\267?\3400k=\330\010\366>\\\363-?\232b0?\027)\'?e\233\301?\331\300$?\241\321%?\274\272}?\004e}?8r\256?\304j\024?e\324\031?\251{\232?\n\257\242?@)\020?{\322@?\211xT?\344\351\026?\"\310\274=c\010\237>c\207F?j\377\025@\213\t:?\377\233\246?\300\256\347=\220\255\220?\336j\324>a`\324>\257W\010?p\333U?\246\355I?\221\374Y?i\027K?-\274\023?N[\351>\363F\211?\203;\263?2u\301?\210\3770?\017c\225>c\244_?\255\311\273?<\367\207?\240;=?\367[t?p*\026@ \210W?\300\372^?\0207k?\252\210\213?]\320\204>\203\221\241>\336\257t? ;\264?\036\025\205?\342\0346>j\323\345>\010;\027??\371W?\316\231`?\306\214\017?|\002\214>\312E\276?\366\r(?\205\033T?\230\201+?\033\r\260=k\0026?\207R\r?$$\021?\362\001\017?a\306;?q-E?\016\350\016?\313\003\243=\037T\213>*\215/>R\350\001?\023\261,?!4U>\016e\261?c\362\352=e\017\321=\337t\333>\2006l?\314\233\322?\354[a?\233\025\325>\024\243\317?\332\376M?\301\325\224>N\206\'?\210\2550=\235E\233=\216P\216?QA\004?z\205\362?\236\025\306>\245\301\274=\3119i>\345s\004?c-\003>\361O!>+\205#?\"#\"?\265\325\026?},d?t\020n?\331;\276?\350\221\020?\237Y`?\270\350%?\320\337\236?\217\023\237?rv!>\240\'9?B\342\267>\321E\211?\327se?\375\376\241?\245\035b?N\241\264?\023,\037>H?\022?\025\006}=)%\264?z\272B?\263i\020?h\214W?9\377\355>t6\376>\226\007\303?\245=\276?\227\347k?\251\243\001>\207\025\205?\0323\253?\3731_>\311Oo?\326\265\346>lV\211?\n\213\210?<Z\210?\3009\027?\007x\203?Khq?]\321\344=\361\265\002?\353\341\230?j\344\327?p\022b?q\267\255?ZQ\245>\032\036k?v\211#?3~u?P\363\035?\024\362R?\326^\236?r\345O?\217\300t?*\031>?\263\025\016=\210\374\222?\331\3117?\000\254!?\263e ?\324@\204>@\247_?\206\235\326>\246\265@?\035`\275?\270\270\223?\030\332\326>\367\001\201?\216\220Q?\254\024\221?\334\007\326?\244\035\335=Y\237\343?mI\246=-\177Z?U:C?\004m[?\262\001=?\203\0176?5%4?y\277x=\243~\326>\312\035k?v^\027?]\2378?IR\036>H\267S?\2257e?\361V\336?\262\253\273?\371\210\270?\204\370\250?p`\256>\347#`?\253-\200?w\266z?\030T\332>\224\353\231?\372\276\362>\007\033a?\2229I?\242\317\250?\024\342\241?\3760&>sS\n?)\367\035?\241\201\243?\313\303\010?\337\022\342?Nf\326>SN7?\235\"C?\3546/?\314\243~?\221\302\307>\363\016\202?e\253d?\222X!?V\030\277>\203\205\370>\267\375\331?\225k\204?\370\204/?m\304\031?\217f{?k\247\212?\024$\370>\334\363\220?#\311v?\367\303\213?\007\2627?PG\203?K\362y?\245Ey?\221\256\255?\360\325\216>=\004,?\327\353%?\013\315\322?\351\tL??\374U?bM@?\323#\200?\227\304??\376\273\256?\312\312\037?\206\027&?Yv\203?\027;>?3d\314?4!\016?|\341\'?\213\200P?)\200\247?\372\256\244?\363\005E?\276\\\335>\351x\263?{\227\354=t\223\213?b]_?\031VK?\246;9?\326H\224?\000\377\250?3@\354>U9\252?\014\341}=n/\025>b4\261?\324\376\226?K \276?\024;/>\322T\324>\260l>?\r\030\001?\352d\203?\216\2558?AZ\220=a\375\251?O\230G?1\301U?x\324E?@\356b>\206\222\010?j\314E>FO\315>C\n\203?n\336\276>G\365&?\006\023\226?\247;S?<4r?\2021\034?\272\213\203>?#\005?\301\207-?\253\273\221?\023g\330?U\000i?\321\254P?j\271\353>sFQ?\340L5?\267\303\317?\022.\214?\271\257\325>\020GI?d\326\261=\345l\330?\363\237N?\037*\246?6\204\306?(\365\366=\372Cn?\'\036d?\\u\004?\023X\240?bu\222?#e=?\3731\213?9\032\210?\313D\035?\357\377\354=VmD?\3308=?\246\010\224>\"\261\300>R\366F?\322\306\310>*\273\377>\326\232\301?\347\344\'?g\202\026?=\247*>=\234\001?\254 L?\223\007\033?Zg\334>\273\204\"?\276\021=?\021\014\271?\360\023\230?\207\273N?Zi\276>\207d\240?\010(]?j\372\257?(\267V>v=\004?\007\302A?\034\272\212?\024\324\353=W\332\010?\362<K>\t\336\374>\004V\221>|T\n?\243\337d?j+\221?\247\350S?$X\226?\017z_?\304\200\022>\353\344\276>\341}\364?\271\254;?\031\320M?\254\004\302?\313\274\353>\030\0368?09\267>\225p\372>\014{\301>\316`\253>R\264\205?\025?\266>z\340\317?\371\000\016?i7\277>\357\214\275>\272\267\254>\026\324;?z\020\277>\244@\007?\241\224\371>\352[9?\"\031\224?\2740\033??z~?\315yT?\376\341\206?\26557?\305\303\374?\273\t\264?\270\214\241?\336/\327=\235\014d?\023nm?\247*&?\000\033\203?\t\227\005?\275\244.?`Vu?h\242h?\221\236\032?\371\211\201?\022\026\256?\305*k?\262{\037?\361\254\023?\325O\037?\010\2359?\3320\225?U@\212?\003\336\376>\227x\r@\217$x?f\223_?\027\'\247?\\\313q?\033\234\376>K\260j?g5x?\004P\031?o\320\211?%\007O?:\3324?!\315b?\262\205P?\213\025a?pj,?$\026\236?|\213\250?:\225c?\324ME?\"\277<>\366\322s?Z\252\031?\235\003\220?\243`w?e\010\375>\3768Z?c\210n?A\241\262?\211\327\245?w/q?\331\024\376<!\332l?\302\325X?\034\026\271>\353v\362>\270#h?m\343\254?g\206\026?\226\305\201?t\022\215?\364\200z?\001\021\257>\311,\263>\374\242-?\363\224+?\237\026\250?\271;\236?\350\2479?\203,\323>\350i\306?\347_w?\306\004v?\021\3672?\226R{??\231i?\207\223c?\265\000\013@|h\201?\013\341\t=\340\036\242?\245\227\024?>\371=?\230Z<?3Y8?\372\222\220?oS\241?7\033\211?Sk5?\315L+?\277\227\032?t\224\233?\250\314\201?F\224e?\265>\312?\026\021\003>P\365{?D\372\350>\205\357\240?{|f?\377\005\271?V\014\026?\001r\232?\005\\\214??\260\255>\351\342\"?\021\216#?\034v|?\367\376\256?\312\014G?\220\005[?\\G\363><\3703?pvx?\211\344B?\036BM?\251\343\205?\207/\213?cMg?o\245\021?\306\216\210?\035=v?\353\217\r?i\324~?f\241\035?\"s5?\305\037\206?\211a\340=\211\376V><t\336=\314\353\303?\230\'^?o\201D?\214w\271>\n8\233?\341\274f?\200\301\013?[X\322>`\242\310>|\344\\?\254\201\304>\263\370\253?\245\250\266>\3077\336>\0318\307>\016f\213?\375ZQ?.\010\237?b$\301>>DG?\242wX?B\027\036?.\005\221?\212\243\020?\221\235`?\247\347??w|h>\037b\336?\246>\177?.\304\013?\367\233\n?\264\"\245?9\327\222?h<H?T\262\271?F@\331>1\371\302?\247TR?\222\027;?\352\t\236>,\304\314>\010\303t?s{_?W\220\312?\274\035J?\n\231\020?os\342>\314>9?\302\237\202>\233\007\215>\230\240\031?,5\210?\375gV?8^\211?\310\024-?\021\\\031?]\302t?H\243v?\277OH>\243\241\336?Sa\207?oE\247>a#M?2\374\t?\232\376\244?\324k\031?\203#\007?\263aY?\325\343W?n\317 ?\336\016\244?\301\372\n?|\363\201?^\n\217?\\\252\210?\005\244\317?\313\341%>\016t\272>u\270x?3#\331?k\022\014?\304\240\033>\363\013x?zs\256?"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_1"
  input: "transformer/residual/residual5/conv1/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/residual/residual5/conv1/InstanceNorm/mul_1"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Sum_1"
  input: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims_2"
  input: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual5/conv1/convolution"
  input: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape/shape"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\345\377\330\276\016a\251\276\302\305\303\276L\2637\276\357\200B\277~\276\023\277\322eW\276F\001\277\2769\\6\274\245\027\306\276\222C3\277\261\375\222\277\231\334\267\276\2057+\277\224\211\341\275x\266y>\225.\222\275\036\231\325\275\2337\023\277\225\"o\277C\367 \277D\366N\277\221H\216=\375\307~\276\340\202\000\276?\365\315\275\244U\210\276>\t\337>\217\307\211>0\234\352>\305\005\307\276Kx\312\275\177\301\313\276\325\310X\277\336\331\331>\216#\030\277Zn\\\277\366Y\003\277\351\322R\276\r\310\031\276\357l\244\274\370I<\277\320\273\037\277$\377\326\276\263%}>H\262_\277\356\257\017\277U4\313\275\211\374T\277cg\306\275\365\353\210\274d\014\315\276!a\217\276\200\2631\277\004\'\311\276\356|\233\276\313\371\274\276\222A8\277\337o\335\276\344\244/\277ZM\320\2763D\266<\320c\030\277\337e\021\277\351\207\'\276\026\027\216\277\326\344\364>\017\326\214=\232\000\373\276E\035/\277\232fd\276\252 \344\276O$\001?\024^\\?\276\206A\276\202\013r\277h\223]\275UD\004\276\013\334?>\327h\246\276\213rE\277c\324Z\276uE/\277\260Bu\2777\330\266\276S3h\277\002\367*\276\013~\313\275\036\357\010\277\300\326_\277\366\352\262?\345\320N?\371\322\263>\311\234\232\275\013\321\n\277\235\217\372=\2031\007\276o\023\037\276&\270\002\277mk\324\276\266\346\231\276:2+\277\307)\264\275\210\021%\277\274\330\244\276c\272\302\276\212|]\276\001\246.\276\276\252Q\277\264E\r\277,\027\034\276\017\027#\277iG\026\2766\252\212\276:\234\361\276\007\'k\277@\212\221\276\022\371/\277\211l\233\276\221>\263\276\324w]\276\266\367:\277\216+\317\276F\346a\276\352\340\350\274\032)_\277h\255\311=\304}\253\276Gs\022>$]\205\276\'\230\313=^\246#\276\3153\032\277\021\344\222\277P\251\025\277\025\027\252\276\221\2108\276\250\345\007\277\315\270\242\276\'\204\036\276<\0233\275\215\323\267\276{\n\302=\017\306=\277\257E\257\276!\224T>\321\225\027\277J\343C\277}\300\215\276\371\351;\277qpx=\261\321\032\276/\226\355\276\275h-\277\255\334)\276d#\317>\341\254\252>f\026\224\276\220\316Z\277j\331\345<\032\003\216\276\020\323\002\277#\227F>\357Xm\276;f\026\277\232H&\277\264\207\034\276\3303-\276\003\240\027\275F\246\367\27554\375\276\277\332\037\277k\036\263\276E\364\201\276\023\252\r>\023\344#\275\326\345/\277\014n\007\277{\311\031\277\026 W\277\207\361\016\277\013\263\216\276a\033\030\276\213\334\304\276\2630\200\276\320\314\276\276\255\274\204\276]\361;>hR\n?=\205\254\2764_<>\211/1<\345\374Z\275R\356\276?\224\377\024\277\247(\303\276\003vW\276\211\325\322\275\376\356\337\276\276V-=\322I!\275\177q\"\277r\2764\276\374\331\026\277\332{/\276b\266\330\276AQ\211\276k9\230>\007\306\030\2778\373\212\276p+\r?\254x\300\276\320f\347\276\222\336\232>\307\365\001\277@\215\300=\032\323\260\276%F\355\276h\247z>\242\324\356\275\241\025\323\2760E\273\275\212\324\025>\230\306\235\276}\225\013\277\001\205\024\276\274U\335\275\346y\361>w\213@\276\262R\355\276\036I\336\276[\342T\276e\026\301\276Z\2700\277\266\203D\277,5\232\276\335\365x\2777\3707\277v2\343\275\0072\375\276\301\234\n\277[\376?\277\010$\231\276\234A\324\276R\272\013\277\224\234\007\277t\'K\276:\210\320\276\270\214\201\277\027,(>\027\215\n?0\017\270?\241\234T?\\\216\365\276A\nG\277\350\n$\27585\031\277\224\261\000\2772\243u\276R\342;\277\377\227\267\277gl?\277\031<#\276t\257\335\276\367j@\277pE)\277\267\202\007\277\267\317\233\276\031H\302\276{\312u\277\377J}\277\270g4\277\373\357G\277\356e\331>n;\374\276\343)\035\277\344\321\330\275\224\3111\277\237\363\250\276T\370\016\276\230\207\316\276\245&w\277*$X\277\334\375\006<\370\250G>*Cv>\343j\343\276\254\342\273\276\307\'\214?<\007\355\276%\224\001>\366#_\277\201g\363\276\007D\364=\331\361j\277\017\'\330\276\314\031\013\277\0161:\277*b\337\276\211b\263>B\355\334\277\365{\035\277\215mq\276\332\246p?-i\360\276\013\323v\277\364\367A\277h\312\375\276\230\364\325\276\247\325\333\276M\250\000\277,\225\221\277\005\207\201\277\266\203L>S\375V\277\3515V?2\303/\2774: \277\352Xr\276\314@\004\277\010\241\257\276\025\223\264=\254w\363>\343\0104?\226\3109\277\373\325\262\276\347\261\010\2769\377T>\2234)>\271\t\231\276\255\262@\277\304M5\274\202\306\254\276\332\323b\276\232E\217>\"I\313>H;\243\276\307\371V\277\206_t\277V\t&\277\322\034>\277\227\376\030\277\003\251Y>\233\344K\2779D\013\277\033\227 >\310\324\200=\256]#?\354\350\341>6R\345\276\322\312\327\276\366\207\234>K\243\031\277\214\227\032\277\355K7\277w\365!\277J=h\276*\n;\277\266\331\320\276\345\022;\276\242\322\010\277\006\372\032\2775\252+\277x\301,\277\217VW\276\001E/\277^6 \277\005\025Y\277\341iK\277\0226\r\276_V\214\275\264k\n\277\360\225x\276\217\227\010\2776\330\225\276R\347\312\276\336\215\t\277\013\261\024\277\006\336\355>(>N\274fds\276\366V\265\276I\344X\277\257\311\222\276\216\256\260>\214\331q\274\222\257\340\276Z\323\324>\213i<\2773\222F\276\036\347,\275o\210\n?z\205+>j\3100\277EC\253>\200\017A\277\013\322^=$\353!?\2029X\275\032\256\021?2\344\371\274XEU\276+\2625\277.\234\333\276\310|\005\277\243\324\256\274\326\375\342=/\212E\277;\317K<!\001V\276\375A\210\275YDp?t\200\270>\033E\324>{\r\030?5\032\330=\0231\013\277B\336e\277B\271\026\275\305)\375\275\\O9\277v\2140\277\311\314\006\2775<\025\277^A\036\276J\030Y\277\004g\373\276\354O\204=\313\272A\276\020\242\254\276\032?J\2754\1778\277\370\355\022\277V\314/\276c\013:\277\023\364\217\277\033\307Y\277\326\356c\277-^\343=(^\010\277|3\025\277\275\252\303\276\006?\364\2766F\242\2757:\007\276\006\365_>\300tg\275\340\252\001\277\327\253\217?L\014+\277\311\317\007\277_\361)>\376$\317\2754}}\277\251^\266\275e\370\226\275\324\311\000?\2178;\276\204\0311\277\243\004\207=\204e\323<\255\234\273\275\234\245\330>\363\270Y=j\001\031\277\'\024\232\2758/\027\276\245\277\327\276\366!#\277\376^(\2761\341\016\276\364\004q\276y\266\003\276\250\037\345\275\0214\026>\301\264\236?\002e\272\275\306\241\226=<\0059=a\252\277= \354%\277\325C,\277<41\277\0321\010\277.\314\237\276\177\001\032\277|\034\004\277\200\343*\277\3462W\277DR3\277j[B\277r\004\332\276K$\206=\342\354\200\277V\320^\277S\271\004\277H\370\021\277\234\234\241\276\305c->\355\266{\277\016O.\277\355j!\277\366=9\277\276\340t>\240\302S\277O\177\241\277\017\332\354\276\210 9\277\315\264\037\276((s\276\264\360\301\276r\326 ?\307\211\202\276\330Z\335\275.\204\305\275\245\265!\277z\027M\277\306\340\332\276\035\352\222=\006t\276\275h\262]>\266\034>>\273n\333>\375\242\317\276~\024l>\267\213\312\276\365\361E>\351\346\027\276C\345L\277\222\263\013\277\364_\014\277\'d\022\275Ecq\276\2363D?4\340\310\276R*\013\277\324\2014?h\212\374\276\306{\000\277b\001~\275\202\302A>\324\213w\276\375\253\267>\372\240\330\276\376\245\277\276\273\316\340\276\305\266E\277\177Y#=\316\336d=,\207\270\276\032\256\t\277/\270<\277\013u\264\276\307g\232\277\350l(\277\225\237\017\276\037\302F\277f\376\"\277\326O\027\276B\247\004\277\020\017\241\276\347$\202\2768\242\272\276&\343\t\300c^)\277,\376=\2776\223\001\277\347\257\220\277fV\201\276\216F\343\277_l\r\277\263v(\275\241\001\276\276\364\033)\277\rQ/\277\026\2529\276\245VD\277cp.\276%\032\216>%\000 \276S[\204\2771AD\277\014\030\025\277\036\365%\277:\320\'\277p\262G\277~G\021\277\206\"\002\300l\"\214\276\334\227S\277\316\255N\2761\230;\276\225\276>\276\330\374F>\364+4\277\367y\264\276({\362\276-KC\277\303R\013>\216\231h\277lE1\2776{V\2774\035\016?*[\247=Z<\335\276\267\005\343\276\367+\273\276+\234Q>l~T\276\332i\305\276\033;e\276\"\\\373\27667\234\274\305U\n\277]]\000\277\220\270\341\276\302 \017\275R\356\016\276\010!%\277]\226\254\276\232\352\002\277FL\367\276\213\346\014>\236\221f\277\027M\365\276\366\353\323\276G\267N\276$\363,\277\236\375D\275!\227\236\276\354\247\005\277\342,\364\276\004w)\277r\274\021\277\200_\346\276\034B~>\317\003:>i\250\377\276\377\362M?\327w\003\277\231^\005\277\252\223c\277g\326\315>wp\002\276\010\312\001\277\330\225\n\277X\276\341\275}\261\023\277\034\212u\276\311\031\344\276\200\377\320\2755\304\202>e\356\230\2759\034\325\276-\326\033?\2211\r\275\203>\366>\010\373\305\276\344\350p\277\006\004C\277\307R\360\276\340\217>\277\226b\363\276\216e\274\276\376\336\371\275\303L\220=\343\366:\275G\312\\>~\036\362>US\344<\324\300\013\277 \220\260;\267=c\275\000\332\220\276\310@m\276\2037C\276+\203\027\277\344\177\355\276\322\240\022\277\345A\022\277\210P\'\276z\253\263\275\035Mc\277t\222\240\276\331~R\276\217Av\277B\360->?4(\276{\256#\277\305\271`\276?\000\014\277\221\201\367\276w\r\260\276\303\234\'\277J\344\020\277a\317\030\276\202\014\262\276\3104\375\276\340C\033\277,V\343>\023\371\202\276\345\234\004\277S\244\247\276\270\r\364\276\260\266\014?\344\014L\277?e\233?\340Dp\276dC\222\2764p\025\277\023\202\201\276\211\224\270<1pl\277\355\324\035\277\243?\\\276\207\326\356\276\253{`>\010=\t\277I\261\231\276\032\234\014\276\344\\,\277\325Z|\276\206\234\224\276>\364!\277\211\t\023\276\224,J\277\2577\364\273\232s\017\276 \370\306\276\303\371\250\274K\300y=\000\376\'?\030\347\211\276b2\027\276\277\031\034\2761I\266\275#\227\306\276j\316\211>\006\264\245?u\000\303>hu\314\276]\016v\277f\335\030\277Ul\252>x\254\303\274\033\0059\277\354\322w?G;\232\276p\210\033\277@\321\272\275>7\365<\361\0238>\263d\017>\332\241\327=\243\232T\277&{\361\276\213(\324\276S\363 \277\301b\220>\034\277\000\277\'!\032\277\212\204D\277\3633\346>V\006\257?\340M\262>\242~\334<\231\372\375\276\214v+?\214\000\026=PN^\276}y\004\276/\247?\277\211t\307\276x\007J\276(\rQ\277r\363\005?o\311-\277B\177\035;^-\370\276\003p\210\276\356\324\t\276Fw\"\277\'-\343\276P\323\024\277\017L\210\277\276\026$\277\031\372\274\276?\244\256\276\323\323,\277\263$\232\276\025\265\027\277\256\265\273\2760f\007\277\352\260 \276\202\177L\276;\336\316>\200\315\206=;\221\032\277\365\315G\277\2467\022\276/\241u>\347u\260\276R\276\370\276\3529F\277 $K\276N\245\320\275\360\031O\277\227\000\344\276\244\t\234\276\334\303&>\024\234\"\276\211\3163\277\301\315\177\277JP\355\276\2545\360\276\177\323\223\276\303F&\277\032|\021\276\355}\300\276\257\350\310\276\023\2310\277\235\007~\276\272\367\241\276\366\342>\277^\215O\277\004W\221\276\226\367\030\275\311bq?\322X\303\275\004\237,\277E\221\206\276\240\250\007\277"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Reshape"
  input: "transformer/residual/residual5/conv1/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/residual/residual5/conv1/InstanceNorm/mul"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/residual/residual5/conv1/InstanceNorm/Sum"
  input: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims"
  input: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/residual/residual5/conv1/InstanceNorm/moments/normalize/mean"
  input: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/residual/residual5/conv1/InstanceNorm/ExpandDims_1"
  input: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/mul_1"
  input: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/Relu_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/Relu_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/Relu_eightbit_reshape_transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1"
  op: "Reshape"
  input: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/Relu_eightbit_min_transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1"
  op: "Min"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_reshape_transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/Relu_eightbit_max_transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1"
  op: "Max"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_reshape_transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/Relu_eightbit_quantize_transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1"
  op: "QuantizeV2"
  input: "transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_min_transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_max_transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/Relu_eightbit_quantized"
  op: "QuantizedRelu"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_quantize_transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_quantize_transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1:1"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_quantize_transformer/residual/residual5/conv1/InstanceNorm/batchnorm/add_1:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual5/conv1/Relu"
  op: "Dequantize"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_quantized"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_quantized:1"
  input: "transformer/residual/residual5/conv1/Relu_eightbit_quantized:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/MirrorPad_1/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/MirrorPad_1"
  op: "MirrorPad"
  input: "transformer/residual/residual5/conv1/Relu"
  input: "transformer/residual/residual5/MirrorPad_1/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\202\225\216\245\200\240s}\224\252\226M\211\216c\211\205{\215\200wn\322y\204\236\206\241h\243\236\203v\216\220U~\273\240y\215x\212{\210\227q\252\244\214sa\225\252\235\333\272\211y`\232\244\237I\226c\250y\242u\230\211\306\203$wp\231\205o\205\204\210\233\222\230P{\214\246\226i\201\215\241\204\200\226\233\225\220\222\221\214\217\243\227~s\237\214y\205\230\205\220\212\257\255\177\252~|f\223\222\226{\217x\325k\220\216\242\276\203\220\207w\236\214\206\205lh\203r\246\240\222z\214\245\210n\221\203\240\205\204v\223\225}\311\201Z\245i\217\206\204u~\223r\223\223\224\221\303\220\225\235;\211iZ\257\233f\216\202{\210t\226~\234\303\232\231zl\225\233|p\247\202\233f\211\221\213\201\200\213\203{x\221\203\204\236\226z\270\203\223\205\225\212~\207\232\210v\211\225\251\221y\217\221\225\245\267\r\265\211\241\220\205~\215q\225\206\230\267\222Z\220\177h\227\252oq\270\250\307er\201F\214\246\247\217fw\242\300{m\254h\225Mz\305\215\227\262\207\224\202\177\263\203\320\207\305a\272\212\261h\302\241c8`\220N\273r\252\213\234~ql\200~\215w\250\201\215\232\203\262`q\227\220os\236\236\241\236\211\232\234\313hr\232j\212\200\224\222\177\256\205\203s\215\241\231\210\215rg|r\205\245m\202}\240\231\205bc\214\201\230\247\224~Tu~\226\245\244\254\203w=\255\2029\204d\203\214\214\231\202\212\224\222\343\225\256\254\221\230{\256\224mZ\211\200\226tw|\177\255\226y\240k\213\231\213tix\207\225\203\240mn\217\253\213\211\326i\207}\214l\245\252\201\232\231\200\250\225\177cu\204\205t\177|\220\204\237\253Q\227{\231\232z\233n\217q\224\204\235\211P}\242rM\235\242is\203lne\205\224\271\200\257\262\231\203\252\205qm\217\256vr\204}\214\206\215\211\235\206\214\220\202|\230\213\253~\210\233\237\200[wpzt\235\210\225\203\211\217n\177y\214y\225\234ws\226\220]\223\243~~\245x\200\245t\223\201\245\247i\217\220\214r\207\221\240\210\235\243\251|\210\247n\232\213\220\221e\203d\262|\232}\201\200\224k\252\237=\256\247\241^\217=\233\\\223x\262\220\217\307|e|\231Z\221t\023\234ia\213\234i\231c\226\207\200e\253J\210zo\250dr\210\216W~\245\266?\267\2033\200yq\235\205\245w\241\305mb\267l\235\216\233\211\324\257k\233\217v\201v\250\247\234\216q\237{\227\223\210\222\203q\227b\217Xs\231\231\202\177\226o\243\206\204\226\207\311\204\244\223h|\207r\222\212\205r\232\221z\205\240\216\235\210\223~a\207\214\205|\252\222z\211\247\202\204n~\220\234n}\225\247\204\232\201\256{s\223iU\226\214\215n\324\242\210\202\215\226\267y\207\202\223\252xs~\215u\226\213}\222\200pp\234{\263\207\233\213\211\222\241\244v\234\200\264\200\245\210\362}\236\330\211R\267\223\206\240}\000\210jg\177t\216u\211\201\227\207~\223\220yyw\206\200\215\220bua\242U\220\207l\216\210x\220\177\262\201\252\276\235\215k\244\230y~ao\245\217\200k\312\276ox}}w\212\204}sf\215\204\220\213w\250o\220\200wi\201\224w\221\223\206}o|e^\205\242\227}\213|\214\221\204\206\254\204\205\214\226\215\242\177y\241{\204\233\225spy\237\237\214v\217}s\204\177\235\217b\213\252u\214\211\216i\311\217\202z\221\273x~\215{\217w\216\210e{w^\241\255\225\220\243\201f\233\235\213k\250\276\217z\205\204\224\213\243\276s\271o\272z\222u\212}D~\235\227h\253\221\226v\207m\260_\203\200\252o}T\223^\206\207\213\211\234\177\205\211\201\220\244\220v\206\220\203\203\206\205\222\203\242m\221w\222\223\212\235\200\211\230\225p\230\213o\210\265\211\202\241}\224\204\211\210r\217j\223j\254y\222\246\253\213\231\226\206\212\200s\213\236[\242g\252\225\241\247\277\214?\201\177xr\213|\224\232\232x\225h\212\221\242\205o\215\220\231\203l\256l\235\204e[\204a\233\240\202\202t\245\206w\204\267\243\206\240\252\216W_\177iw\217}\204\203pu\213\223\222\222\227\234z\235fxqv\206udk\235\210\207\220z\236\207\210\224\215h\253\244\212\225}\035\237\246\225u\252\216sh\222v\204s~\240KT\206\311\234\270\270\213r\233\240\222}s\210\201iG\237\203\235\223\220\216\221\207\230\266\222\224y\202\216d\223\223\205\245\252\300\223w\271\226\233\200\221\244\213V\263\252\244\202\205\207y\204\241xy\211\235\272\206\230\\\232\215\255\371\204R\177\225z\203\201\201\242\201\210qu\207T\277\241\221\235q^\246h\246\205\263\221|\212\257\221\270\234\233\221_\237hf\247}\302Nr\246w\221\243\235\231{\206\223{\237\221\260|~z\221{\262\217sMf\203k\257|\210\202~\226ze\214\205\222t\203n\255\221w\222\177}\223\241\215}\233\207\204y\207\224\213\225\203\241\204\212\214\177zouY|^{\210u\226\204}zcI\230t\217zlqh\247\224|\207i\220\216ghi\200l\202\242\206[\216~\260;\260\305pT\223\213c\243\231z\222}r\220\216\251ok\225\256tj^\221\221\215\275\240\232dW\226\221m\220j\202\226\240kz[\221\235\230\237\227\251\256e\207\214~vzr{\234\204o{\226\221\237\217\230~p\203\226\213W~\212\212r\210\201c\224\224\207\211\200\251n\232\242\220\202\266\254Tkr\237\201\206\202\224\200o\201\\\217\203\207\257\245\235\272\244\243\216}t\241rw\253\201\214t\205\211\213\245\241\226\206\216\244\271\214\236\237\202\212\213|\222[\254w\320\243\214ywu\215\232~\205z\222\177\217\231oy{v\223ki\212z\220\213f\214}\211\211\215\224h\212\202\221\203\224\242\211l\212\262\246y\224}Y\226yw\204y\212p\242\227\241\224vq\204\225\225\177\036\217\233\215k\240A\250\202\201m\240\254\211\034\225\304\200\227\201kh[\214\204n\221\222f\220\222^\223|c\226\216~\223\216\236\206_\266\204v\201\205v\205\220\241\235\212f\210\230\212\210|\304\210\247\223\233r\243Y\217\212\357\232\211\223s{\275\234\226\235\215\301\270\225\216z\223\216\254\302\242\215\231o\263om\273\240\231tb\220d\267}\232\270\202|\200\214~k\272\220\200\204\215ql\202\234\265d\211R\217eg\240i\220\214\261p\200\205\223\177\210}\236\223o\204\214\236k\217\203\206\237\216\206\217\253g\206\217\205\222\254\207\251m\216\223\205\201\214\206\215\207\233\201~m\243\275D\230m\211\223\214\177w\177{\230\232\203\200\275\212\223\240n\263|o\220\304\203oZ\243\233x\267g\226s.\221\211Zx{mp\241~\211\215~\230\235n\201x\256s\207\207\203qx\255\263\220\210mr\235|\206y\240\214\226\203\233\221\205\240o\215zc~\222\222ym\236\235vn\217\236\201\213\274\227\234g\201|\216o\210\213\217\233\212x\177\212i\226\226\204a~w\202}\212\201\223\205\211\177~\215\234\177\206\216\224}\223\211\207e\227\201cox\206\212\207\224\210\216\217}\217\231\177\211\222\223|t\246\226\226\210\201\233\241z\242\222}\232\227\212\201\225\225zu\250\201\221\234l\222Q\203\235v\207P\221U\224\213\201\227u\201t}\207g\217\251z\260X\203\204\271\222\216\251k\317Mr}\207p\222r\211{\201\266\251C\210\223\212yw\203s\215\216\222\215l\206qy\252\201\260\250\211M\201\217\214\216{\224\235|\221l\230\212\241\264z\236\216~\235\221\222\236}\216\217\216\201\244\235m\241\224\222o}\225\210\300\254\214\203\216\213u\231f\203\213rz|\237\245n\220w\245\204\262\250\304\202-b\253oi\211\227\217\254n\217\202`\214\224\217~e\222\224\215\217f\215\222\244n|Ry\202\204\232c\177V\\\242\236\205\235iu\247\272}Vw\222No\211Vt\212\2007\215\220\221\201\243\222r\237j\256iO~\205\204[\214~\221\221\220\224s\211\243\217ju\252\207{\232s\243_\216\205{z|\206\223\200\210d\203\230\202\244\214\255z{\230\203|\204\212Q\223\246\214ufo\223\236x\207\241\206\244\210\206e\205\226o]\203m\246\216\221\240\214\235~m\203\242\221z\217\224\234\241\252w\211f\225{\203w\251`\211Un\227\244\233\206\245xy\266}\203xon\206\223\216\227\272\221xamzy\222\251\237\227\215q\204\237e\177\244\212\202\260\202\225V\177\202t\237\207\225\227\224\210H\216\232\207\242\300\254\210my\211\200\221\200\273\204q\215\223\220\306\245}Xf\222\220\204wgi\215\254~\206\214ur\212\\|\237\227f\240\201\202\216\247\221\216p\202ko\226\225\230v\203\235\200pWy\236vz\215xzsr\260{\\\233\216\177\203\216\221\206\221\236y\177\212\230\257\206j\207x~\202\237jfJ\225\237\205\221\207qq\221|\231\177\243s\272|\225\242\216\274\251\242\205\276\224\212\223\206Qqn\205|\225\242x\244h\217ym\216\301Otu\177n\252\220\211\227\206hx\232smv\203>\254}\213\204{\177\236|\222fq\221u\207\211\221\201}\220\207|z\206\202\213\335\233u|\224{\203p\213x\177n\251yhl\177\202\212\210vq\216\232\237uj\220~\241\203\234\253\205\240{~{\226XR^\221\216Q{\225\224\247\213\216\275\210\226\240H\231\241\230\237\233|zg^g\261\253\204g\201\215\211\207\217\204|Us\216t\224z\235w\207g\205y\204~\227Z\221u}\216\206\225\200\204t\217m\264\237\222\177\207\245\204z\245ns\215\204\203\222\233\214\225\212\226\300\221sb\203\214\205m\023]\252\224z\214\005\304\201\201X\213w\246m\216p\255\252\243\263}a\203vc\236_}o\251\201\242d\274\220\206y\234\206\233\204i\251u\210\200\216^\216\247lu\221\217\231\227\205\223w\231\215\241\240\227`\203y\225\220\373\322\177\217k\216\210\220\263\213|\271x\225\224~\234\204\246\200\206s\211\226\226{b\213p{\232\206\212\203\252^\206\316\254}~\224\207}\202t{\223\216\207\211\214\221\232\212i_rqf\245\220\232\235\243x\232\242\211{\223\223\214\224\207t\205\215\232\250\226\214\233\212\214y\206j\206xu\243\222\207\251z\\\201\223q\221\240\230\226us\211\177\207\244s\216st\202\242r~\243\213\203\215\177j\270\223\226\225l\262o{\221\314\201\224r\226\226\204\271W\237\202=\201\205x\202\206Vn\272\240\262x\223dT\243\201\203\262y\265\321Qm}\224qsZ\230\251\221||iy\205\236\232\262\213\257\264j\251\217\216\203\213\263\237e\237\277\226zu\226j\264I\205\243s\214\203\251\201\212u\253\236\216\204\244\223\276\214\225\207W\211\227\222\252\254\212m\224\210\226\242\252\214\213n\236\211\233\235\211yj\260\206~m\225\247w\223\204\226\177\214fq\205\277\213\213\226\246\205\213\210\214\230\201{\231\240\245\255r\234r\204\227\223\267\221x\251\206\254\226\200\250M\221>xzu\230\250v|u\206jVut\202Y\211\251y\217\201\224{\265\221\235\204\227\263ks\200\222\206ze\232\201\245\260\207^u\227\236qw\316~\177u\216\235s\216z\244\201{\233~\237_\212\214}\232\205\200w\207\205z\254\220\205\207w\235\220\211\207~\206\216j\235\200\204\214xu}\222\230{\211\221\177\201s\207\250u\241m`yp\235\202\214{\202\177\240k\200~\217\210\232\221\263\231U\220q\236\236q\221\177}\216j\230Y\205\206\210\232ym\213\214{\220\231\226\203\250\231\225\241t\220~\213z\200z\214\224\215^|\214\235t{\200b\203\207\224\216\240s\215\222\277\200\206\225{\231\212|\245\232z\252\254\200[v\210\213\237\245k\203\\wo\207ge\217w\202|n\255}\224\200t\212^\217\210ov\214~]}w\242\227\213\243dv;\246\201\230\205|\247v\210\237\236\223\207\203\217\264\203\201hv}k{\203\202u\210h\227\203\215\223|\221~l\223\204\217\220\232\204\260\231V\206q\236w|\201\253\264\214hV\264x\340\315{\225b;,\324\207\236\246\216\337\223q\253\234\203\250r{m\234r|\204i\247\310~\223\227\215\217\224bov\210\204f^u\231z\225l~\214~\207\213\245\273\226\204\202\177\260\210\221\247\201p\230\227\202Zswt\243{\257f\273\256\252\201\203lat\227\211w}\244v|\210\234\277_\200\216\207\214\205\236\242\255\247pw\223\251}{\212h\202w\240\200\234\262k\265\202\216\255\224\204\221{\200xy\223\247^\231\215\206\230\214\260d\227\224\227\272Ky\236^_uk\226\246\204mxm\216D*\236\202\211f\253\245gj\260\273\211\360N\246\226\\\235\222{o\243\230\240\235oi\222\254\177\220\252\202in\212\210h\247\243\227\211b\260{\246\275\206qk\213\217\210\214\223\201~\211\231\256iq\240\211\206\212u\204\224\201\200\211\225\222\200}\247\215\224\215}v\214x\207\210\177\211jqm\212o\203\212\211\204h\211\257\202}\204\210\235\200\254{\253\261\226\213\207k\221~\213\220|\225w\240\223\207\237w\253\254jy\201\177\212z{\213\231\220y\222\207\210\204\234\222p}o\206\227\224w\250\210\223}\177\232\267w\177\232\232\240\210\227\214\251\220\177\230^\251\263\207\222\202\206\221j\201\210\241\275T\244\234x\206\224\177z\221\267\233\224v\220SMr\257\236\234p\213\253\023\177\227\242\210\206\022|\223[e\215\222\251v\224]ry\212\266\227\205\203u~\224\237\243}\210\211\235s\207\235.\235\212\225\220yr\204[a\265\316\306U\216tZ\215}s\235|\225[\256\273z\200\250Q\177][\234\312\260k\243im\232{\232y\227\266o|\210k\203\203\244\244\236\247{x\234\221\204\207mo\211i\253\200\215\234\203\223\215\230\214fh\200n_\221\201\232\252\206\243\204\215x\222x\213\201\202m\241\211|\210\233\216\211\234\211\233t\207\206\202\225dr\251\211sg~x\227\211\221\225\250\230\214o\273\217z\236k\217\267\206m\210\225\240|\206\230\226\201~\273\253c\215{\215\212n\226p\236n\240\210^\205k\211\\\226\225\202\226\305n\214\222\230c\223~\272\241\234b\212\245\235h\215\240\212n}\204}\222\226\251P\212{m\207z\201ozY\212Z\226\226t\217\200\202\224\230\224\223\236\203|\206\214\266\203}^Wd\236o\216\211\241\213\217\242u\234f}\223zzW\206\240k\231x\247\257\214l\221|k[\212\216\231\237\225Z\227ez\223\226\202\202y\207i\200\214\232mw\220r\221{\223r\221\232\202\220\247\213\224lZ\213\202\234\210\220\223\177{y\215\233\235\177\231\210\222|~\231\201\212Sc\241\252\224\177\206\200}{\235\244mj\200ajvp\213v~v\211o\223y{\214y\206\200l\237\177\262\233\177ufsw\215\222|zb~\210\272\252w\222\205`\204{\243p\202{v\206}\205\220\177\234\223\241\227\241\200\212\205}\177x\242\227\206\220\207\220\216\212z\230\227{p|\202\200v\247\221{|\215\177\233yW\213\211|u\210\201\233z\217~x\216|}\213]\225\216\222\261y{\223\217\227\217qK\240fel\224\243\236\241\270\233e}\201w\216\225}~\216\247p\227o\211\212\205\224v\216\214~m\230|\177z\267w~\236uz}\201\254\226e\210r\216tq`\232\177\246\224\217d\202\217\207\214\221\203\222}\230\207\242hzxz\261\207z\222u\212\230n\222\276l\212\223\211yrl\240\231Z}a\221x\211\177v\277|\217\252\217\202\213\216ix\204\215\236\203\\~\315\205\232~@}\212]\230\212b\210\207Dj\252i\263\213\212\213\204z\222\263\223\227Rj\215\227\241vs\225\253\257rs\241\234\202\247\232\206o\204\210\221\202\235q\301\215\200\242My\263\254\225\232RX\265\200\213aT\263\220m\202}9\207\216g}yrW~\256m\203\225y\253\235sw\206\203\202w}\237\235\233{\201\212\223\230^g|\206x\205\200y\201\200\221\225\204w\201\227\207\204\230\207\216\250\233vr\210\210\225\234s\256\177\215\220\226}t\204my\212\211\217\206\210v\237\215\216\221\202\233\216\203\242\210\201\223\210\177v\206\222\214\212\206\217\230\215\255P\265xY\201k\235\227\177o{\224\230^\304\266g\205\233Skc\266\233\221~rp}\200y\216}1k\221U\264\230k\245zQ\240\306\177\217\215Yq\201aov\222t\343\250\255\177~\231n\235r\202\244\217\241\214\235|U\254vkRb\216\324\217s\216\177\216\213\216\233\246\261W\246\177j\261\204\202\206\207x\237\206\206|\227\211\223\225[\236{\222\210osm\220\233\236\206\221\212\221\223m\220\231\206\224\220\204w\222[}[\201~ykt\226\\_u\210x\241z\227\232\247\232\253\263\214u\226\211\235j\225\177pu\223\243\205\212\225\203\226e\200z\211\223\215\222\211oy\236t\244\213W\253\177\213||p\223\222\213p|\235\274\222r\214\230\\\243\224|k||\230\230zw\237m\224\246\222\220\203b\211\204\210\177\225\216^\241r\213|\244\213\211n\250\267\211\215\221ep\215\221\203\232\203\177\2140`\216\223\211\235;\260\210pizvuM\244\244\221\256\245\211\227{\211uk\203~{}r\201\311\221e\220x\223\207\221\201\205z\274tm\213s\206\236\214\212\223\224c\233\201qtr\245\213\237x\214r3pi\201y\236U\204\201\234Do\341\215\206\241\214\265\214\205c\225FV\225\221[ek{z\237\223\227\205q\200\223\231g\212\203\221\213\212\222qs\235\256h\223\205|u\215\203\221\211|]\263p{wN\204\212\226\227n\217\235\206\213Wr\242\227gb\205 \207\216}\255\226p\232~\222\236\204\231yd^\211v\243\241|\321\214|\201g\227\230\203hy=q\230c\303\250\233on|z\321\201\232w\211\215\205\222Z\252\214u\252\232\204jN\264\250\207\227\266\211\236\214\205\214\177b\214\214\206w\210\216\224\242\235\254Y\225\206\246]jr\206\202\232\225\236\242}\243l\221w\214\217\211uw{\200\216\230\213y\203vx\220y\216\203\227vz\216\223\201\203\240\211\210s\217\177tej\205\220\203\206}my\250\210\216z\200\225z\212\223\212\217\235o\231\203\260\215\204\250\212y\212x\214{\223\202\217\210\215\216[qx\220\214\226\215`m\227\233\226\247p\216k\205p}\245\226\177\223\236\221\200g\232\215~\235\222o\242\212ld\200\251\224\256\220\276\230rf\225|\240a\242\254\210}\221\177\230\221\202\204\231\200\241\252\216y\236\201\207\202\202\\\212\200gv\233s{\210\222\241}d\231|\231\203\205f{\207\204\243{\205\200\236\236v\216w|\237\200\216\231\235y\202\233x\211\223\235uovo{~\224\253o\257\214{\207\213\214\200\223X\216\252\210\253\231\225\213nsp\205\245t\225\234\177\200\232}\334\275\202sqmu\207\257\255C\233p\215\225\255\266\271\222Fh\244p\237\235\232\221\224_\235\232Z\213\233\200\205P\270\215\256\236\205\\\230\210\261rt\200\212\203g\212\212tW\206i\252\235\225\211\224\222\235\204\223xl\202}\201\217\202~k\223o\237~\240u\245\243\204\234\216\177x\233\200\200t\200\212s\220\204q|\211\246fz\213\226\206\227Rx\200\217\225\206\232\205~r\177woj\224\241\260\237\243\203\237\222\225\201\216\205\204~\214u\222\177\226\216\203fp\224d\232\227\231ay\243\230f\240\251h\177\245\\]\215\210s~\237n_\200\202\202\202\254\220\210~\214\215|\177\212\220vw\205zy\203\251\226\212\233z\211\241\233\206}\206\225\217qo\217Vk\204us\222\204\217\216e\225q\211z\232\243\224\247\216\273\245qt\202\200x\223\240c\227\213m\220\177h}\233x\177n\226\211\200\206\232{\215\202\216\203\230\237\243\211\205m\235\236\202mih\233\234w\225\211rt\217c\212\244\230m\225\230\230\177v\237\215o\212xw\233\220\202l\222\207\233l}\235\210\225\222\217Z{\200\233\237\220l\203\223\205\230l\237\226{\206\211x\203\226\240\206\241\250|\201\256\213\201\243\240yq\177\221\210m\252\214\220\216\247l\213\271d\212\216x\221z\237\224\207\272w\207\231|\251c\220\202\226\226y\274z\204je\226\271D\260\2033]\236U{\227\205\\\255\200^{\215\217\204\206\241\203\246\206|~\177\212\212\232\223\210v\232\222\243\204zx\206\207ynzo\230zo\204\213\206\222\246o~\206\241s{e\205_\200\205\213yu\237\216xn\222z\234~\257w\215x}`\216\332\245[\221xw\200d\252\211u?\215\320\236R\336\247M\215\241An{\302YDi%\213\201g\213\217p\211\225\210s\206\227\253{|\204\237j\225\260n{\201s\222\232ia\211i\205\231r\225\201tc\230\227e\225\206\200\234\177\231w\221o\205vj\211\226\236\205\244\233\226i}\212\204{sD^\250\215\231\231W\257\227~v{r\233\224\216\223\240\251\247\255\234a\231n[\201v|b\244|\255y\237\200|\216\221\205\213\221\204\230\222|\201\220\205\210\213}}\212\210\220~{\212qh\206}\201z\212\237\225o\230K\232\206\201\232~\252\205e\223\246\206g\241\202\222\251\177\201\206\210\234\227\204\216{\206\225\252\210\207m]\220\243\271\231\254\233\205\230\226\256\221\217\214\237\213\177iy\207\212\207\206t\202~qw\222]\250vX\202\226\225\213p\243\202W\204\206f\207w\206~\212\252\245\221w\207\207\212v\223\220oYm\205\203\225\217\217\252\201\220~\225\246\177q\203\\\247\256\215`\225\205\215vt\232\212\241\220\207e\243\225\203\232p\260\227\224\245\236x\234q\221\257x\211y\226\234|\211fh\205\204Ry\247\230\272\214~\200c\214\220\216\243\223\260\262dr\212\235\233\211s\226\266}\207nl\210z\205\204\243\223\220\203\215\212l\207\220l\223\234\213\206\217\226\220\233\237\212\202s\214\217\242\221\217\246\211e\214tr\211~\251\224\240x\221\224\207\204\227\261\272\224\227\210\221\232z\251\221\214qu\245\237\214\255\202\204\237\225\215q\200^p_\243\216\257\215w\234\207\233\233\234|\227o\205\243^\213\264z\241\244\232\202z]\227\207\224\222\206{\225}\242\212\211\232\240\250R\211ok\253\235\216\256\262\215c\223\204\213\214\204\177\224\226\215{\215\252\247x\202\246\206\227\205\216\224\222\207k\230y\231\214\231\253q\201n\220\201\224v\214\201\204w{\210\217\247{y\236\207q\301\225\226N\207\222|\214vk|m\232r\317\226\215}\177\235\225\215\232\235\201\213\202\220\231o\223v\211}m\214z\226tq\205|\202l\206z\243]n\202\260\213\204ni\236\233Ur\201\255}\243\237\237\204F\206s\226z\211\212\213Zy\204\231Q\210\203\203\253sw\213\221\227\214}^\242c\207{\243vZGa\177\213\203\216\233fa\205l\235qnW\211\222\322\262\216t\202\200v\274v\234\223\234\254\326\201\205\201\211\263\270\237q|\225\213\234\250\210\224\201\241\200\214wj\246\204\206\211z\227\235\202\206\213\206}v\206\206\214s\213u\241\221z\246\204\233~\211z\241\240\261]z\242{\206\204\204}v\230\203\244\213yv\202\205\212}\214z{\234v\233v\227ql\204\220\261e\203\230\234z\220z\216\236\300\247\241\205fz\252\230\206\210\210\246\220O\251\247{\262\305\242L\233pQ\227\203\213mq\201\245\244t\215x\205g\203pY^\217\204|zx|\244\207\213\202\232\245\214wz\216\216{\206o\251\212cl\211\305pv}\243\200\202^\247Ntw\227z\224?b\200\320\275t}\206\254\267\213\200yM\215\233\226V\211\267\210Oj\231\346h\201\246\201sp\213\216\246\242hh}\276tnxf\177p\214\204\200\263lfx\221\246\203~\243\212\222my\216\253\207\226y\241}\261pTt\220\216\212\235\205`\202\237\231\244}\246\270{p?\254~\224\214\226vw\210\201\244\177z\221\205\273\202\207\215j\240\206\230H\212\212\315hJo\213\230u~~\217xz\206\212\206\231m{\214\\~\211\225\236\220}]\244e\213\205\177\212\220\207\227\224z\254\231\235~\227\244\205w\230\207\201gc{\265u\200\203\205\212\234q\212\234\214\210\222\241lrqd\205\227\240r\215\221\202d\205\203\204\230\205\254\215\235\226r\203\205\302\211\224\206\232\203\206\206\232\212~\215\210\267\203\215\220\217z\217\204xj\220\233\216\203\215\204z\214\204\230\227\230\214\227\212\221\237_z=\224\235\235\223qkl\252w\206\234\206\220\226\204i\257\224\205\212\200\207\215\250\205z\221\251{\207\220\216\220t\201\215\212\237\225y\200\231\225\220\222\230\232\236Li\240-\210\265\200|g}\252xCp\224\312\212\211{\211\236|\307d\263g\205\220\227\207\221\244~o\242\234\203z\244Y\251{|\213\227\217\202hh\223\275\314]9eQ\213\203q\230w\244\201\210\305\235cwhy\217\224\231\021\250\207\227i{o\177\260\224\\\254|\200\214n`\227~\216\257\262\213\212\255\237\233\222\223\222\207\220^\241j\220d\216\206|\320w\204\212\254\216b\200v}\221\227\223|\205\233n\207j\201\213\264h\2236\200\233X\241\213\224zx\213~tc\210\357\226\211\211j\240\237\205\226\236\234\231fz\236\227{yrw\226hh\201\225\232y\214\231~h\224\252\250\220w\212\232\220\207\230\213\207\204\216\237\233hpm{\235~\203\254\317\250\177\232\204w\213\216\242\201\224|\216\241\250\237\225x\224b\205\260\213\224\242\245B\211\240[\252\264\302KSQ\271F\215\250\211\220Yt\200\244x\211\244}\233\205\205\230z\274\212z\207j\241\177\255\232}\273j\234vl\210s\206Yr}\211w\201\211\213{i\225\245\200^}\201n\215\216y\211\237^f\224\200~k\210\204]u\235\217\256\232~i\236\233\230y\257\320u\233\200\177\211\210\226\210\177\250\253\241\214\200\257\246\211\244\220e\233\210n\220\226\177M\221v]z\201\245\205\227\255\215\214\207\270~\226\214f5ti}{u\213tky\203ys\203\216\221\211\273\211\262m\205\255\226\211Ywf\222y\211\\\203\217vo\200q\220\204\220s\251z\220v\230\212t\177|\262\207\217\253\213^\217\203o\263\205\233\213\205\216u\213}t\220\213\222g\243\217\215zu\252\224\207\206\225\220\200\206\202\211\226\236\230\204w\213\204\220}\206\231x\226\225\233\212\245\204Sm{\226~\224wx]\221Ds\204\271\225\235\243\231\240Mrysr\254\210\211\215\240x\222U\202\215\177\240{\206\212u~\242k\217\203y\203\225\225\222\261Ifs\234\232s\251twx\227\256ix\211\225\234\215zy\255sxia\202\214\237\231\202\210\177\225\224z\224\210\233{oh\265S\230\246\235\236\240h\232\200c\202z\214hh\275\200\260}\235\251t\207{\221l\242\212\213\220\223\216|\302\253dk\025\235kr\207\206r\225\201v\212\265\\\237\205\206\261w\211x\232\214\221\205\206\216\225\244}\\\242\221\220\204\206\244\200t\234\210\210\226\300\216z\250\206\237\236\203t\245\214\233o\220\213\214\272Ex\215\214\212\\\243\214\222\206\221\202\221t\233\246\216a\210\204\215xuwZ\223\252k\207z\271\307d\241\234Pd\220\227\220\220n\211|v\220\200\225\235j\216{\233_aw\203\207\202|\233o\207x\235p\207l\202\206\257\236i\204j\202\232\205q\231v\225|\201\210\207\232y\214\214\206\201\216\233\214l\252q\214\213\201\220~{\226\261{\200\203\204\234\232{\220n_\214n\202\207w\231y\233\263is\250i\206\231zo\202r\262\245\202bu\214\251\216\210^\177\256\255\202\210\245\214\206b\210\232M\265\244yk\217\216\222\232\200v\250n\177\220\255\204t\227\240\236a\234\220\213jPwq\220pme~y\241i\225H\231\267\221a`\216\251g\237\206}q\263\210\213\223|y\232~z\216}\220\204\216\230\225\213\212\203}\227\231\201\177|\205\201\205\222t\215\204x\242\226\217u|\261nia~\222\211\200c\252l\224o\204\205\205\222\205\236\206\234w\213y~s\226\251\224\200\202_\202\250\212\237\201\221\243\232\232tT|\237\200\232\212\240\217y\225pf\200\207\230]\213\247\212|\206\240\215\205\212w\204x\217\203\215xq\206g\210\255\230\230\232\220\272\241\216\233\235\213z\220\207~\223\225\213\207\216~\207rp\251\212z\227\201\205w\225|\202\220\233\210Xww|o\205\203r^\231\216\275\231j\212\236\317pp\177}\255g\250]\256W\222\263\222q\215t{\244|\257\217\213\213\241\213}\203sw\202\242\220gvo\242\224\226\243\224\255m\211\206{\222\204\241\230\216\206\202\203\266\254w\255W\206\265h\223~\224rM\235\204g\256\232YJ\255\200\207\230\230\256\260\233\210\213\231\210W\203x\211l\250\231\255\204\226\240\222\260\242\223\215_h\203\241n\252\247\234\177c\216\215\260\211V\204\233\214W\214^\177\222\222\252yp)]\251\300+\225\266\003m\2479T|\270\214d\245N\200\201|v~\235r\213\211\201\221x\211\233v\216\213\205zy\261]\213\211\221\222\205~\215\220\214v\177\200\215\247\230t\226\207\254\213m\260\303\317\201e\225\231\221m~q\232\216|\270\237\222\227s\214\177\221\335\235\224\257\256S\220\272\216\220\267\247T?\214\301\236\240\231\215Wtj\224\235\214inu\253\202vWu\177\234\241\243\213t\225}n|\231\224\242\201Y\202Zw\223}x\177r\226\227xZx\224\212\251t\230\202\201\213\217\213\241\246\204\202\220\215\215\220\224\227\177\203\215\234\256u\204\234\237\227\206\222\236tky\202~\205\241r\217by\252\261sg~\245v\242\234\271}\222s\223\221gV\224x\204W\207\225\203j\223{\236\222\241\251\236\225hQm\262\231\254\251\263\212^\233nu\224\256\216{\242\234\211\211p\213z\236\207\203v\206\210\212\246h\234yf\226\231\216\261s\203d\231\210\233\230\177\237\216\204|\206\217\215\235\207O\200\177q\275\241\227p\206\233eov\202\224\205s^\255\210\227\232p\265\226\216\215\244\200y\207M\222\253\225\261\266z\215`\225\223]\247q\245\226\210\216\256\254\261x\210\177j\245\177\206O\2154\302\222\252{\241\245\253\254&P\220q\215\236\247\217\212\200\231\231<\177\227\214\233a\177{\263\227\224w\202S\217\215\233\206\213iEw_\205\225\222zv\265\206\260\277{\210\204\210\223}\205\177\221\224pGq\221W\245\235\254\237\262\216\204rr\200\230\205uly\210\210\206\233\216\217\202s\221k\225y\231szWw\276\226\265\237\224}\221\220\266\\tz\263\220z\232\330\212\223te\240\205\225\243\203,\221{~\263\230\221\207t\225\211\203\203\220\201\215\224\221\210\204~\222\202\221wy\224\231\220p\232\241qt\207\223\245~\200\212\205v\213\207\200\253\247\210\240y\210\216\220\216\247\236X\037N\377\234\224\240\204M\177eokit\233}\213ev\212\244\217\211\246\206\234yl\242\215\214\247\210\237\203\223\242\203\232\260q\213g\234\251o|\203\254fgy\300\202~\210\234|\247\212~z\210[\230\211\243\223\207\251\211qcq\214\245p\222\220ch\205j\200\226\245o\177p\215\202_\225~r\223\203\220\240\215k\204\221\226\251w\257\243p\214~\230\206\217r\222y\234s\177\247d|\204\255\207\224{v\206i\234\207|\225\205\206\223\204\221\251\220\344\245\211\204\243pQ|\234\240\236\243\235\204\221k\226p\227so\237\203\236l|\207[\220\247\215\212\210\230\216\242}\260\227vzz\203r_}\230}I\204\223\225pVe\205\247\211\226\205\355h{\223\237\232\276\233|\237|\215\245\201\200\200y\237\225\212q\211\232|\230\2032\214\250|\234\260\202\206\215\224\207tq\201z\211r{t\231\243r\201\201\244R\202\214\216}n\267\222\215}\212aUo\225\275{t\226O\255\237\214\221c\250\246\202\223\213\226\214\254\201\231\222\243\244f\203]\207\227\221j|\235\230mk\210\220\233}vu\214\204\217\205~x\223\211fw\213\244w\201{\233\233\210\215\224\215\217\214|\210\215\222\177\203\233\226\237\242i\237\205\220\212\213\220\205zyo\214\227\204i\211\202~\245\215\213mx\231\236\253\232k\237\215\235|\226\234\210\250\200\266\214\243\\\235\263\210l\232\214u\262~\237w\235c{~\207xs\242~\220\205sx\223\216\206\213\201\223\231pt\226s\226~m\234\206\230w\206w\232gpj\206\204\232}]\221|\247\215\216\235\273}\245\204\204\212\211\253w\214\214\206q\212\226\216}\201\205pv\242\224\252\213\254\210\236\227\214o\251\200\236\215\224`{\224\227\230}\217\222\221\210qZ\256\202xaE\201\213}\224\230\204\211\177v\270rw\217\247ppr8w\267\204\231\233\214\227\213l\202\207\237\214\227}\227\223p\216\226\207\212x\202\217x\242\204z\207\215\206\203\225\216\206\232w\202|zg\256\202\227\222\240\241\207\251\254\251\232y\206\227\207i\203u\226\234\216\256~\224\211\214\205\213\230\345\212s\232d\240\215\276\236\250\347\354Hi\202\253\200\226}\222\244`w\206\212\232\205pp\310\223cZxzz\241\200\226\211\217\202gX\243\177\202|\200\210\227\200\202\226\222\213e\273\234\177\200v\207\214\252\211\210v\223\220\256\220\227x\243\225\223\206\245\237\215\253\204\210z\212\244sf\237\221\202\213\222uY|Dgr\245\243\262\213\210\300\210\224}\177\224\201\211\240\307\225\222\247v\225\274v\201bw\206\207r\201\203\214~h\226r\225\245R\223f\221\227s\304}\247\220\226\212\226n\211\237\262{r\230\224\213iw\212v\200\210\223w~\236\220\250d\216\210o\203\201n\222\221\201_\227uj\242\222\224\207\204\224\251"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.51269769669
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.32384395599
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/convolution_eightbit_reshape_transformer/residual/residual5/MirrorPad_1"
  op: "Reshape"
  input: "transformer/residual/residual5/MirrorPad_1"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/convolution_eightbit_min_transformer/residual/residual5/MirrorPad_1"
  op: "Min"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_reshape_transformer/residual/residual5/MirrorPad_1"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/convolution_eightbit_max_transformer/residual/residual5/MirrorPad_1"
  op: "Max"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_reshape_transformer/residual/residual5/MirrorPad_1"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/convolution_eightbit_quantize_transformer/residual/residual5/MirrorPad_1"
  op: "QuantizeV2"
  input: "transformer/residual/residual5/MirrorPad_1"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_min_transformer/residual/residual5/MirrorPad_1"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_max_transformer/residual/residual5/MirrorPad_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_quantize_transformer/residual/residual5/MirrorPad_1"
  input: "transformer/residual/residual5/conv2/weights_quint8_const"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_quantize_transformer/residual/residual5/MirrorPad_1:1"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_quantize_transformer/residual/residual5/MirrorPad_1:2"
  input: "transformer/residual/residual5/conv2/weights_min"
  input: "transformer/residual/residual5/conv2/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_quantized_conv:2"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_requant_range:0"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/convolution"
  op: "Dequantize"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_requantize"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_requantize:1"
  input: "transformer/residual/residual5/conv2/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/residual/residual5/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/residual/residual5/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/residual/residual5/conv2/convolution"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/normalize/Mul"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/normalize/variance"
  input: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1/shape"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "I\212P?\017\226;?\334C\324?|\231\251?\324\332^?\265\270\002?\307\365x??\372\230?\nS\242?\263\035o?\360k\360?\177\244L?1\265\366>\265ko?:\256\246?\256\324\364>V\n\244?0lG?\321Z\300?\214wu?\275Dh?\334\004L?\334\203\024?}+\230?t\2451?b\225\262?\210vW?E\005e?S)\325?\317\026f?j\230\177?\251_\235?\222\222\303?o}\254?\\\324\370?\213\234\004@\256\217\350?r\031\271>\022\347\322?v\204\360?\022l??\307\246\325?\3342\236?)\224\274\274KQ+>\255~\232?\241\244\246?N{\202?\007\016\227?\354\346\330?\375p\233?t/g>H\363\311?\351\341H?\322\250k?\311[\261?0\005\330?\321\244\032?\206\201\006?|\030\205\276Z;\243?q\250\020?\351\263X?F\217\364?\215\251\246?\331\014\251?P\273#@\373t\306?\245\213\002?\031\371\350>a\354\235?OGp?\205\214\252?\351\361\000?K\333\301?l\272H?4\234\300>\274\325k? h\207?*\237a>N\036\215?Z\313\204?\207\242\325>\3234\251?\310%G>\333\235>?\220#\202?d\021\253?o\261\017?\221\tb?\n\023\247?db;?\310\333^?\3067\024\276\340\357K?\025S\210?\230\231\224?u\347\264?TN\203?/\265\206?\213\223m?\034\203\313?I\204\230?\216b\306?\273\205i?z\357\255?\267WR?\366}R?\301=\276?\023lp?\317\327y?_*\253?\327\000\212?\302\211\277?`\206\266?\255\244\210?\346\022\205?@)\252?\374-\014?\333(\274?\013\261\323?\2100\255?\213x\245?\335<\324?\314u\233?\032C\221?vy~?\202)\215?\204\022~?3[b?\331R:@\370\226\224?^\235\025?`\366T?g\206:?w\251\227?$&\252?O\213\351?\010G\262?\203s0?\026\267:?\336)\256?f\243)?\213`\266?\376\0319?\277\352E?\220(\262?\342mt?\026\350J?\250L\"?o]\027?pC\201?\206\2140?U\306\226?\035\323\255>\203\003N?h\016\016@\261\344\037?\350\266\240?\367\273\030?\226\231\227?\346OO?\035\315\331?\'\356\213?X\020U?`\017\226?\001tR?\213&\221?d-%?\n\262\220?an\260?6O\206?:\021N?\346\366y\276\236\3221?\357\255!?\004\220~?!\034\204?{\207b?\335\207\267?\346\312x?7\250 ?k\363%?c\334\245?\324\330\010?)\343\225?\3546\243?lw\027?\n\274\007@w\306\206?\312\000\266?#\367\213?\014\323\201?\214A\036>$\260\017@\244\270\315?\322\257\331>\317>\222?\2634\315>kb\356\275\343\025\330\276>\021\321?\377L\202?\255\206\364?\314\237+?\3707W?\241\277\032>\202\241\271?\231\245:?\346\377\031?\177\270\227?\3763\241?\020\202\007?4\301;?=b<?\370\220\235?\004\243_?\224\371\201>\346\312Z\275\311\0333?\021\346E@\341K\260?\340U\010@\300a,?B;\263?\315\366\243?\227\266\231?\177\302\256?\225\351\267?\371K%?-\225Z?\0209|?G\353J?wH=?\300\001\300?X\354\013@N\032S>\246s\205?Q0\311?\016\222\034?9\274\261?\204;O?u\241\247?\343\201\017?*gi?\307\236\227?\271v\244?\361\260\324?[\370\375>\241\3010?\030Wl?\253\237Z?\023\252\177?S\265\277?+\327\276?@y\250?/\024\253?=\205\262\273-\333#@t\262\241?\370\211\303?\355\264G?\007\334\223?\220\221\t?\206\203\306?\021^\026@\370\016\233<o\353&@\330\021\263?a^\372=\351g\237>\033\211q?8\027\226?\324\t\313?\265#=?\200\000(@\252\343\335?\037\nF?\323\027\215?{e\316?i;\200?DX\204?\244\302\032?@\024\235>\250\321w?\021\003U\276\307\365D@$,6?\2557\005>\210\201\310>\341\322\311?Y\016\235?\022\025\030?\351\322\364?\355\366\344?H\010\235\277\302\241\377?\370pZ@\261\001]?7\326\276?\177\207\203>]#\350?\327\023\314?\245\303\301\277H\261\314>\232o\366?A\2139@\374$4@\316\000\211?\r2\232?e\021\021@\216\3741@c\211\243?6\250\320>\202\035\267>\364\254\331>\242\317I>\375\342\302>\236]\376?\233|\272?\331\025\246>\333<\220?\235i\022@\035\276;?\354\264\377>\017\027 \277\211U\031?Y`\264>p\025\225?\315\353\272?\310\206\324?\0209\313?c#&?\212\272H>U\300L?\355\226\340>\240>B?\236h&?o\016)@\352\302\264?\221\357\006?\265\213\245?\034\002C?2\004,?\003\346\310>:@\032?\230X\240>\344\256\255?\301\335\366?\341\270\004?wc\333?7o\253?=\016P?\027\261$>\010\330L@g!\212?\211\002\252?\234\310S?\024y\236?\352\303U>\360\034\237?\315\006\222?0@|?\367\002a>:\321/?\370\345\247?0\372E?\3579E?[\250\017?\014F\210?\303\177\331?\315c\260?\274\267\222? 1\033?9\205f?\240\205\237?\005V\303?\373ty?\270\272\306>\336\364 \276\320\026\315?\3561\235>\016\"\307?\2627\314?E0\250?\205o\211?\361\214\033@\223\322c?\364\215\223?s4y>\256sV=\311\355\264?\022f\241?\261\326D?\234\025\352?Z\345\224?\025\316=?\374\206\216?\177B??\264\201\006>\266\313S?\3026\177?\376:k?h\247\320>\t\227\006?\337\037\222?\305\311-?N\354`?\323\323<?l&h?\303=\007?\203\275\246?A%\321?\032\320\277?w\363\306?R8t?\337g\225?|YT\276\201\205!@\003\341\277?+\244\223?@\307\025\277\005\246\237?+\030\'?\357\017\322?\307\355\326?\347\245\336>E\333\242?3\337\027?\357O7>\370\221\235?r\031\233?\363\270\246?i\247e?\033\021\'@\206\257X?\343L\227?\226\"\221>pZ\307>hn\277?(\317k?\274}\366?\373\317\246?\376\303\230>\332\030&@-h6?\300{\375?\321\242w?\300?P?\332\245:?\001\343\361?)\350\207?\337h#?\245x\n?k\265P? \2712?D\334\003?q\322+?9\370\266?\212p\265?o\251\003?6z\204?jC9?kT\314>\277\367\222?\346\0375?-\201@?\261~\206?\346\313$?>\313\372>7\336\033?\234\200\227?\n\222\266?s\300\332>\211<\365?\357\225\371>w\270\213?\003\3348>#\375\221?8\234\207?R\224\364?-r\336>\354kU>C\022\030@\0225\033?M\337\\\277\264\006\304?\262\003j?T\246\242?\257\035\212?k\347y?\317G\250>\326z\024@\357\327\214?J\0230?t\006\310?Y\313\226?\251>\245?*\324\244=\350p\177@\227\210\275?\177Jb>\362h\n\275i\206\016@\267p\001@%B\000@XU\215?\207L}=\366\006a<)\204r\277\257\333\024@p^\266?T\336x?1\367)?\"A&@\376O\010?\241Fv?\354\002\212?aj\026?\026\206\204?\004\007\265>\347\371\322?L\034I?\017mO?\021H$?\337\341\250?\272#Q?\344J\232>\000\313\177?\222r\224\276\215}\006@\325\227\353?Y\346S?\222\310\207?;\240v?_\260b?0W\200?\237}\253?\236_k?\021cm?)P\"@\331P\310?\222\332\320? vI?\340\030E?\207@&?\010t\342>#\240\215?\303\037^@\025\205\362?\343\373\213?\230/\247?\275\273\364?&Wq?\360q??7o\300?\240\327\353?\352\237,@\021\214=@\034$W@\336\357#@\311\010\267?/4\007@Ma6?s\3077@\353\006\017?\351\263u?\322\276\237?\264\2265>\020b\322?\240\203\274?z\314\254?~$H?\305\235\377?\\z&\276\242~\001@\267\030\201?3\0102?\312\346\306?_r\003@\320\222\341>Y\273\224? \313O?\030\3755@\205\033\305>i\346\300?X\310\264?\225j\255>\005g|?\215B\037?OJ\t@9\316\214\276T\234x?t\333\216\276\237\256\370?\214\016B@\0100\004@\342J\263?\334J\231?\244\221\337?\2430\023?j\373\207?Y\177\242\276\021\375\001=\333*\006@\264C\273<[\241-@Q\375\271?\366\353{?k\3260?\027\006.@x\373R?I!_?\035\023\236?\354\344\246?]\306n?i/\226?\013f\305?M%!?m\344\215?\376\3709?]4\320?\034I\201?\3607\242?\3270\351?a\346U>\323\331\326?\343\021\343?\344\010n?\207Z\251?\002Z,>W\322\251?Z|\304?8kw?\307\304\003?\322\202\021?\204\301\354?\351\230[>\250\n\236?\342\267\231?\267\035\374>\367\241\200?\353\357\246?\234\215\003?\n\\\020?\324\035b?W,m?\204m>?\325o\r?\201Y\307?\343J\271?8\251Y?\236T\326>\350\0140?\337\032\360>\017\274\220?\344^q?\253\005Z?\250\300\352?\340\000d?\224*7?\200/\345>\365T\222>_\322\224?\240\260=?\377$\200?y1\003@V\036\205?\0045\234?\"p!?\201\246N?vH\307?\256\267\212?\315R\253?%\317t?\303\001\312?}U\262?\377\213\362=\254\036\305?\362K\247?@\356\242?\010\356\345?8\r\271?@\225\254\275\014j\305?{\323\376?^G\254?Z\226\010@\276\241\347?^\232\332?y\013\035@eP\272>+\264\353?F9\206?\233\227\244?\347\224\344?N\341\220?C\340\352?c\374O?\201a\202\275^\n\221?@\310\031?\377\240\205?\223Y\244?\030\200\205?4\214h\277o\r\266?%Z\300?\3153\334>\221\322\020\277\340\221\233?\214]\335?\332#\003@\2706\020@\231!O?\004V\206?\031\245\007?\1773\020? \224\203?\211j\234?\000\262\312?\025kC?SS\302?\206\036\321?i\341\312>o\331)?\316\333V\275\246\374t?\367_\202?\324\014l?\036\034\n?\255\212\264\2753\203\373?\"of?\201\303\234?\324\224\360?\270]\315?\253\256V?\323\021\177?\035\207\221?\351\000\010?\351\031\316>6yF?}PY?\362\245.?\340G\313>\373\010\343?\365\343\327?\370\236\256>\360)M?\323\313\030?\337;\026>b\264\207?u\3049?l7\024?\026\004&?\236\347\020?,\242T?1\347\313?\271\242\235?\017\363\375>\033\300R?q\341\367>\014XJ?l4\237?E\373V?B\214\245?\034\335f?\207\2346?\356\357c?W\315\000@\307\315D?KT\r@v\302\332?\273\207\"?k@n>\337\321\351?\353\254\221?\304\244\273?\027\230D\276\177\231\363>IR\263?\367J\\?j\306\311=\'\200\221?\215\005\231?\250\277\024@3\212\017@\331xX?\2579\017?\240/\302?Ox\031@w\r\'?\035z\t?\222\313\214?\242u$? n\t@\272W\021\277\305\224\001@R\271R?W\337-?!F\224>\346\2465@0\325&?\376\034\034?<i\314?Ez%?J\302\214?\003\341d?G\t\354?n\032e?$?\234?#\3532?\220+=>\"\333\207?`\211w?\345\370\304?\037\335\224?\243/\326?\211Q\r@U\260l=\313;2?A1\201?W=\272?\237;N?xsc?\207\355\332>\261\243\315>t+\317?/\311t?g>\013@5?w?"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_1"
  input: "transformer/residual/residual5/conv2/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/residual/residual5/conv2/InstanceNorm/mul_1"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Sum_1"
  input: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims_2"
  input: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual5/conv2/convolution"
  input: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape/shape"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\007e\210\276\003\002\360>\217\303-\276f\023\324>\240\263\002=\r\r\332>:2k\276!\255\205\276\237\002\377\276\023\322\357\276\005\267\016>Q\220\376>x\266\007\275\364\353\262\276\202\220a\275\266{\026\275\272\232\203\276\310\345\247\276\206\"\210\276~e\327>\177\331\205\276\271\301\235<\3668\304\276\207\306\301\276\304\206<\276\235\217\226\276]\333\317\276\206\006B>\343\2668\276\0268\003\277\017\332\"\276e8<\275\264\266=\275\226\333\003>\272-\216=\356\347->\354@\345<i\327\270<;\322\277\275\253\311\201\275\357\226\013\275+Ti\276e\2373\276\265\241\230<\226~r\274K\260$=\234$\200>\270q\202\275{\325x<\221m\212\276_f\361\275\305\007\272=\236\347\261<\344\345\347=@\202!\275\363R\004\276%\245\213\2761h\312\275\271\r\211>\267j\t\276\251%:\276\365\320-\276\352\243B\276\267\2102\275\225\205t=\240\200\226\272\271\0333\276\336\321\200\275\0077\365\274\221\304y\276i\251\320=1\201z\276\307X\206>\222U#>E\3521\276![n\276\352R\303\275\027\333\261=;\316j\275\316\2717>\r\3560>?\010@\276\305\345\327\273\017.\205\275\027\302\216\274\326\033\210=hr\210=\307\033[=RO\017>\010\262\371=\247\031\002=\206+\007>(\351\016>jt\013=1\207\303\274!\317\373=\375\300\357<;$\037\276\033\212\263>\346\234@\275\226\205\n>\314\013\227\274\213&\335=\037\024\303=\355\237\267>\355z\334\274\255\367\340\275\252\326\332\275\013xf\275%\334/>\354\3731=bgQ\276>\317\343\275^\342\203>a\344\245\275u9Y=*\222\230>\364\257;>\336\375\215=\255EQ\275a/B>\370\242C=\227\376\213=\004\315(\276\n\005\223=\350\312\204<\305q\204;_Z\222\275\230b\355=\024\237l9\017!\333<Z\r\307<\205Q\211\276\357\236e>v\003v<\351\021\336\275-\033\335\275\016i\200\274I\241*>\2709\253\275D)\320\275,g\374\275\325je\276\373\207e>K\237\032>\262e\201\276g\377\017>\274\334\377\275FU@\276>\320>\276\263\307n=\270w_=|\370\211=]R\376=\032]\212\275\363\306\212=\334<P>9\361\237=~\237\031>\2129,\276=,>>\245\006j\276D\365\215\2768I\252\276\237\306h\275\301\242\256>8\273^>p\316\033>\325\345\244\275\333\026\251>\375\221\022>\311\016\210\276X\352m\276\232M\204\276D\227\216\276&2}>\033\330\251\276F\3454\275\272\021\376\275[\r\256\2765\254\001>\271\017\031\276\212\347\271\275\024\355\226>\t:\016>\026>\246>\337g\036\276\237\306\360\273\205\233\264>_By>\360\004\221>\362\022\352<l\371\375<\375\334\010\276\245\3252\275\204\357\005\276\321X\224>\321bR\275J\354e>\365\357\350<\004X\257>\251\305\277=\313@\262\276\274\255[\276\336\026~\276\3742\236\275\247\034u>\270-,\2762\311V\276\321\320\004=c\356\017\276\206\006\025>\247\266C>S\272\276=:\276;\275?\207{=\360:\022>\007\343\260=\324~\030>\216\330\234\276\027\3675\274B\211\365\274\212la\275\342@\233>Yi\363>z[\270\275\204\020\300\275\277\350.\276O\360h;\347K\266\275\267\025v=\212\251\324=\211\211A\276\260\252\300=\335\307\236>O\225\t\274\336RG>\223\267b\276.vE\276.\307\275\2747Ez\276\267\025d>B2\376\275:\373V>[h\031>\002jG><\214N\2756\203\031>kL<>\006\334\341=\334\203\267\276M\3606>\026\241\256\275Etc\276\212v$=\"\024\n\275)\r\221=\010\247\022>\000\310\245\272\321FX=%\367t=Y\255&\275j\344\r=\016h\310\275$J\000>\003i\364\275\245f\361\274F\203{=\272\377\032\276O\260\307=\0033Y=?$\307\275r\201\013\275\270\304\217=\356\002\t=\356\002M=\213\016\313=\304\021\233\273f\0060\276?\036>\276\2652\204\274ae\262\275H\365\234;\354\267\032\274\324\027\202\276\345\215\034=\020@\237\276\304\357\n>\326\255\226\276oY\r\276@\323w>S\037\225>\036\245\223=>\333P>\262\343\253\276\224\226\206\275\014\354h\276\267\235\214\276\201x\343<\260%\250=\375\240\237=\232\200\362\275\272\340L;\232|\217\275\220>I\276\310W\330=qn\004>\006\021\030>+\232O=\022\210a\274/\000\256\276\243\t$\276\253)\257\276\311\257\310\276\307\375\301=94\203\276\034\356s\276\324$.\276\\\361l\275B#\\\275[\230\027\276\236C\r>R>\023=\210\270\">x\016\r\276\340\365\272=m\314\371=>\n\203\276\024\374g\276\025L\212\276\2328\026=\007\235H>\025(\207=G\265\207>T\253$\276G\333\005\275\277\346\024>\220}\207\276\322\316\215\275\250\226\206\275G&\321<\262Qn\276e\250\020\276\364\364\030\276\020b[\275\273\302\201=\245\376{\275\222)\303=@@\273\275\212\305R\276P\2406\276\232\016\014>q\017%>\323\372\300=\250*7>\235\301W\274G\321\254\275:\035A\276\031o[\275\031i\003\275)\360/>\243\030\322<\221\367o=\231Iz=];\257\274\210{\300<-\200\365;\244\371#\276vA\'=\343@l=\247\034\224\275\255/r>\272\363\001>A&\n\276\313\024\255\274\371g\010\275\024\356#\275\n\276P\275\017\323\314\275\202\200\337=\243R\214\275\221t\201>=5\310\275z\264?=\027\267\376=>m\342=\265\036\350=\270\206\"\274l8->\337d\260\275B\000E\276\013\311F>\327\273V=.=\244=\343\263\361\27520\233<\030\211`>\022\234\270\275\004\036\333=F\027\267\276\\\236#9\264b#>\325\177\034>i\271R>\"\306-\276\002\354\326\274\344\234 =\307lM=\310\316\343\275y\315 \273\3460K=\203\272<\275\263\024\316\275\356@\366\273\343o\310\274=\262\215>#\221\372<\002\365\265\276\365\242\213=\202n\225\276\003\361\263>o\315\327=\367\354\220>/\216\273>U\362\203\275\315\307\206<\\\241\304\276\202\367\r>\232;@>\266\033g=\002?\336\274\223\240\320\276\016\222W\275o\225\001?\323\230\351\276~tX=24\314>\032\337\301>\377;\201\276R\036\260>\244`\303>q\017=>\370\375\233\276\345\002\215\276\026`\215=\225\323\372\275\'2\021>z\345\230>(\002s\276\363M\330=\366B\324=`]l>\031-\362=[vm=\374kx<d\305\022\276\360Xn=N\260\223\276\000\"3\275\033\351\r>\301$\026\276CPC>w\214\t=\306\024\243\276\007\250\014>\313\326%\275\014\036C\275\000\371\312\275\300\017\215<\330\310X\276*w\006\276E\271\201\276\215\344n=x\027-=\302\001`\2758\254\207\275\347\220\004\276\013\255\205\274\2706\261\276\337\373\301=0\310\371=\001\001 ><\327\220\276\334<K\275\335\312\250\275\247\322z\276\t\242A>_7\336\275\366(\036\275\000d/\275\2475\314\274^j\245\276\n}n\274\367\221Q\2765/L>\246\033t>s=e\275\310%\241\276Dl\">)l\030>\023\275\235\276\3649\264\274\2151\234>8\304`\2761\314\230=\002 a>\364\311P\276\261\035\'\276h\371D<\034\323\222=\205\312\372\274X\325\344=\235\0141\276\377C\232>\270SL>]\344\260=\203\300\376=|\351\230\276\375M\'>k\207\201\276\036\244P>\007G\362\2753\370\033\276\3529!\276\023\032z\274\307~\274>\240\350\220>4\367\216\276\277\037\213>\371_F\276\330\200\256=g\373\023>\254Mm=\035n\"\276\350\214t>\305`\210\276\237\305\n\276\'M3>\271wP>P9C8\345a\321\275\344\231u\276\037&{\276\306I\035>\377\317\302\275\240\335\007<\271p\261>^\325\340>\306c\025\275\022\276\375<\363{\331\276\027\250\250\276e?!\276\026\264\260\276\005\261\036=\236\002\024?\307\267\221>\336\017\237>\263\2349>\203=\002\276\017QV>\317\367^=\346@\205>\016\351\277>-LF\275\222\353#>~\356\313\276b\231\305\276\255\205\345\2764\017\324\276\316\363V>y\013\030=<\314\333\276t\271r\276(5\276\276r\352\221\275\206b#>\033\364\324\275\016\254\177;duJ=9\261\r\275\317\255\331=\354)6\274J\252$\275\311/q\275o\211\211\275!\271\240\274\221\002#>0\232}\275P\304{<\277\333\001=\005)+=w;v=6\255L>\220i\376=\337\017&=\006\263?>%\265|=e\232\221\275}&\245;\372:|\274\341\251\245\274\361\244\373\275\205?7>\304\213\231\274\366L*\276FQ\332<\205\277\001>\267X\003\276B\347:=s\020Q\276\237\037\314\274\307\347\005\274\256In>\256y\201\274\353o\221\275\363\027g\275\2668\227\275Ylc=YC\371=>\337\245\276`\316\357\275r\371#>j\335/\276\322\357e\276\245\2075\276 \270}\276=\217\210\275@c\363=\364e#\276\321k\320;\t*\205=\267\004\317\275\375\274\344\272\266\317\020=\004\244w\274~&\031>3\227/\275V\372\332\275\314\331\001>\211B:\273\255\\\000\275\014\022\327<\235_?\276\346/\345=#\363\203<1\214\023>\240l\216=c\005\356\275\375\375\224=\356\226x\275M\376G<!YI>\030\032>\275\271\234y=\000\310(\276\355_\205\275;\327 =\242P\225\275k\371>>\"\305\016=@x\206<\3118o\276\315 \332=O\232\206=3\324V=\265%\210\276\013!\214>\021\323\010>\240\'~\276)\246L>\243\217\211\2766\262\'>\366W\r>H\206_\276~\203\027\276\004\317\003\277Q\315-\276G-\301\275k\214\037>{\275N\274\313\374g\274\343C\214=\030m\233=)4F>i\030G>\214\267\037\276\237\026\217>r\235y=J\341\206=\320\207\206>\273}\274<\354\354\014\276\205\215~\2759>\\>pX\221<\377N~<\r\360\251\275\\\027K\274\327\030\031>\330\353\t\274;F\231<\241_\326<\211\022\217\275\333\325\231>\252Z\323=\333S\247\276\314\212\000\276\274\343\342\274\236\257\322\275.\023\223>|\007\232\275\024\027\002>O\342\331=a\030\215<A\225\272\276\020\324\270\276\274}f=B\206\310\274\032\335\316\275C\201\013>\374\350?\276>\251~=\224\331\243\276F\202E\2747t\203\276n\330\013><\210\221=\364\273\206>\375\340\320>\236\220\037\276\352/\022\275|\326)>\262 \320=sK\017=L\026\256>`\271\177\276\304\201H>\n7\360\272\177o\264>\263IN\274\032/*>\266\236\334\276\315h\321\275\266\202n\276MI\242\276\032\322\325>\307B\214>\265\242\202=\023\321C=jm%=3\300\n;\007\024\304=\002\240\213\276\202\210f= \361U\275\346H\272\276\000\273\211\276rJ\206>\3622\023\276\245y\250\276\222\237\232\276t\315\202>~w:>J.\235\276\030L8=ss!\275\003\232\341\274\311\002H\276\355[I\276ln(>\271\272\032>(\257\225>\2338\\>\375%\246\276\367\266\325<x\373\177\275\251} \275A\024\212>8\242\361=\364\345\251>\035\277\211\276\300\331\200\276%\2460\276\271a\217\276d\266\327<r\r\232\276\213\354\253>2x\321=\273\231p=\233H~\273X\245\023>Rx\215\276]V\237\276\375z\202>\352fX>uO\013\276\354\325+>SFB>9\220\343=@\233^\275\215Dj\275\204\306\270\274\261\355)<\372\274%>\022\316\t>\177\346\266\275\r\013j>\214O\255\275\3178\021>~T}\276\200\t\246=gE\266>pO\366\275&(+\276K\327\2359\311h\223\276@\201\323=N\252\373\275\177K)>\312Y\365=!\211\037>J\231\371\275\245\251/=?\304!=\031\255V\276\t\376\257;\020:\346\275Md*\275.\017\007\276\036\207(>\372E\265="
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Reshape"
  input: "transformer/residual/residual5/conv2/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/residual/residual5/conv2/InstanceNorm/mul"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/residual/residual5/conv2/InstanceNorm/Sum"
  input: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims"
  input: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/residual/residual5/conv2/InstanceNorm/moments/normalize/mean"
  input: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/residual/residual5/conv2/InstanceNorm/ExpandDims_1"
  input: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/mul_1"
  input: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual5/add"
  op: "Add"
  input: "transformer/residual/residual4/add"
  input: "transformer/residual/residual5/conv2/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/MirrorPad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/MirrorPad"
  op: "MirrorPad"
  input: "transformer/residual/residual5/add"
  input: "transformer/residual/residual6/MirrorPad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "[\234\213\230}\207z\235\200g\217\214\275\206\254\207\233\201\201\204\216\210a\246]5\200IowvYk\202y\216_\212\177\303~\213\224\206tv\240\234x\220u\224\226\204\223P{\230{e\204x\215\203mf\214{z}f|~y]t\204\227s\220j\226\206zt\266}[\244yp\216\203o\226\\\257\215s\216\210{\205\223\220p^[\234c\207\205f\260Sw\204cnn\230\270xw|{\236\230\213}{ei`\217\177v\232\266\224H}b\244\206g\221b{\253\206\237\256ok\231\222\216\301\211\226eyY\237dlp\200\254\213\037S<_\232\266\251h\223r\202r`\201\234c\203\227mfZx\213\200\215q\216\267\227\225\255\227\213\254\204\244\216\205T\223\210m|S\230vT\251r\232Hk\236cw\242VjT\207_\202pj\177~b\203`H\214\235\200iy\217jm\202DsY~\217\225\201\\v\205z\262oV\224o\203\221~E\206s\241\247t~\214\217[?qN\263\200\214\211\210h\251zz|\202y\245\216\223\200]~\224\221l\254~ocu}\233s\242rR\262nf\206{\227Z\214b\216\207\215u}nTvo\207M\227TK\217\215t\213q\236nduxn\231\205\200~;mxu\210\236\227j\205d\214{\202\215\231rq\255\211\223\225s\214pfr\220t\200\213]G{>\213gy\222\177xxc\221k\032a\177\223ax>Tq\243\204L\207\216z}\207\212\273~\201\177\230^d\203\230|\225\221\207\236l\263{\213\202n\207qo\220\205\212ri\236|\202\207\237\205\254y\220\211wz\213\275\205\224\200\275`\231~\203\247L\222\214\210\226e\265\215y\265\235\267sr\231U\217t\240\215@o\205\251k\234s\224Vfo\207\215o\206x\222\202UnYQ{p\236Y_\247P\231\275seS}\210]\207\212qgcv\207xC\206x\263Tmr\204~\221\213gr\216dcvggp\211\225\221\206\217\241wft\214\206wbwb\230b\273}\204V\237hmr\200}px\233\207\260l\240\212\241`\\\201N\225\203d\250\230\206|wor\235\235\201|\202\220\246\240\230\201\224u~{\224~\202\\E\\x\252T{:7~kv\265\207d\226D\236\201\234\202\234oRn\212se\200\211t\213\\\242\252q\224\206}}`\273v\205\261o\257\207}\224\244vjj\214pZs@\200s\227`\216\253\241\213x\202vr\242kw\205`\207~\210\201h\212tX\246\201Q\254\220\201\254n\220\216\300vh\242\200\262f\210\206\222q\215\217\251\247\250t\260\202\205\212~iX\250_\205\205izM\177Y\231\223\231\273\217\217\201e\233f\216\242\177\231\211\272JynhclNri\227O\\nt\213\203\243\221\231\275xh\204y\257<\247o\204}\220\216i\204xny\236\204h\241\215g\231|\300\230\244\226\255o\264\252\202v\177Zdyx\252n\215Z\203Q\236j\177\203s\217\224z\265zq\327_~\\\234?]p{\225tj}ij\254h\203Y\231\207\206{\230\210\227c\214\231\177\210{\272\212\250j\215Mz\207\205\207\231b\221\215k\227`\244s\204\216vk\206v\207\216Y\207vuR\211\210q\217n\244\225|\226\230{\205vcsdkpz\201`\220d\204\217\236w\206\227v\246\224\267k\247~\201\223\210\255c\216]\241\232o\215\312o\216~\200~de\213\200ge\236eh\221\200\230{=\225ysQ\177\224}n}\262S\200\210\236\214\215e\206pmZ\201~\241\207\237~\205o\251ye`\202>\202\203\230\212\200&c\271rzowR\211\241[v\206\220\257\226a\200hs\215q\212\215kdw\237\217\207r\200\203g\226\213z\232\217\242\225_A\224\200iypy\212e\241\214\220}\264{\201\207\244gZ\212\220^\243d\202\242zb\200\203\224^\202n\243\212\216z{\223\221\223\264xz\177\217\257]\212\202\211\211X\207\240\272Q:Q~\203|\221i~\221R\233\255\220v\235ew\227\207\200\214\177ns\221\233\210\236\271Dh\202F\205o\201\222\261\227\214\216\230z\207\203\205r\201ey\212\242\241nxwmj\235m\201\207y\215\251\205\230\203\205\227~tu\217hmt\213\216cw\216wnszXz\260\252~\206\216\233gzv\233\212\206\224w\200q\253\253\204{\211Pm\227}\244\222\240\215m\261gs{\204\202\177\221\222j\235s\207tpui\231Vp\224Yv\250g\212\216\220oxtj\216}\202\201VJy\264\272l\210\230yw\241m\210\234\201{jro\211\220\202\215\212z~u\232\225f\241\212p\206N|\222\210\213d_\213k\221{p\216hy~\206\223bLQ\217\244\210r\224\231o\217R~h:\225p\233\306y\315|\210k\240\247FW\215xif\206k}x~ll\223q\201o\206q}\217}pt]}\205\210~h\251s\206y\177[\207\204w\177\203\211\227\212q\205\211\222\200\223k~\234\216\203tp\204c\207{[{zuzC\240\213\220qt\251\210p\232Z\207\211F\203\222no\214i\205\223Gt\\}\211\201gXss\\vXyB\266d\211\216\241\216j\203\211\220Qxive~v\215g\200oi\217~\254x\200|\234qTZu\207c\220\204k\222\204O}gszjz\204{\272\233\217w\212\203y\207Tf\247Fwz\246YxorT\220\222j\216hpf\221sM\220yZz9\203x\205sbg\216\213\217\203\334\265\205g\250qSI\217\315\217\271\232urUj\234\206ps\214{\235\216g\203y^squ\200(ni\214\215\217{c\214\217\210av\214w\242\226\203\241\213\216\205\201Ls\232q|tu\177}\227c\224g\214\177\262y[\217D\251l\206\223\201\217~sqpx\247@\207\206et|\227ta\214jlj\177^u\241qwY\240m\244\240[f`|j\260zZ\206\226X\245\322d__\221h\241p\216i\266k\216\210\205\216Ot\204h\342\220\207\243\252xrh{l\302jo\211wf}Eks|a\233wr\232\202\256rjxX\203\215b\246\213\225|\205zw\177k\242y\211\203\220\260\233\233\223\256r\204\202\216\211r~\217\227\205vy\205bt\233\200\206\211r}\231l\216ZcrQzv\211\224\277j;\231|t$k0qsi\203\254\232\210\210\2215twmb\222q}Qq\205n\232\213\261il\252~pVnl]\252\203\203\223y\177\177n\207h^xY\205|\177\\\202\201\225\225g\216\201\200\247\202ym\201]`mz\226\220Qh\211tkk\224oj\246\201}\311\200\202\223M\216f\261\203\204u\213\224{\214gzy\226qtrs\221s\215\212x\204f\226\222~\221y\240\215\207o{m\177\206\212|\226\212\231mq\255[\211n\217or\212cy\212vo\217w\264\256n{lo|^t\207Z\240s\216z^V\201ek_\205ZIq\204u\220d\213\206\204\264x\214{\223<k\213\221\247\243\177\223\217wu\200\215Z\222\200\251\220q\203\204x\221\205\215}wv\201z\252S\251\202\215\210\235l\236i\216Q\226\220\231\220\200lub\211p\304gqw\245ndn\250\231u\215\274\233\200~\230]g\215\203\260iv\225cvkn\236\215k\214\215\231\240Z\254EU\216f\211\216\215rk\226\235\231m~\214j\177v\216\217\207s\274^%qg\214dc\224\234o\214l\262\206\235m\251y\214Lw\214\213z\253m\210\226\201c\204~cr\231}vx\216}v\231\202\202\264kxz\214z|fw\255\177\212|q\220\241d\202\212c{\223\231\212\203dF\242\220\235\237\\\201_czWt\232g\245|fg\203o\203\242\200j\233L\264\233\206uPc\221a\203\204\201\206q\237\202\207\220p{r\201b\235w\206as\202~\207\236}\236\211\230\204\212\226{Kt\206\240u\202D\206\213T~c[\210\237jf\177\220c{t\222\214w\200b|\207w\216\220\221q2_\213h\216\201\227\240s\237xb\204\227\207\264\203\234h\224hu\204shZ`\256\217\232Aa|qx_f\207\214\207n\203\237K\177M\205j\177\214|e\217q\242wD\226\246\245\210hi\222g\205\206\211p\200\230dz{|\240\203Qtqk\204\212\204T]fqU\207y\\[\207\233\225\214z\236Hi\242}l\233b\215Y]{\234je\230d\212\202\207\227\220\205\207p\230\227\203_ucr{\241pwj{\212\212\216\277\213R\226z\234rrW\251\200\263\214h\270fU\217|N\242\211\235zlgr{\215f\241\247\200\223r\221f\221}\226Gwd\224\205R\252tx\2217\247y\256k\201x\201z\206ZilQu\206uw\210o\221tR\212\220st\226\221\243\236\240r\210r\216sz\223\231|n\204\207Yjp\262\222hpey\201n\200i\221ti\204\215\207|\215\237\220tk\211qtx|u_Umt\207\207e_\200{\210y\215q\201}uzG\234\211vZ~\223\203zr\220\213V\240}ut\306ed\205x\204^\225\210\207\223t\237z\215pj\220k|\234\214k\214e\217\232t6\207\261\206yciptv\226j\226\211\245\202\205{\200\225u\204\232gn}a\207N\203\251\215\300kpg\207AfscX}_\232z\200\214v]~\202\327s\210\204\214\221]\212\233\202x\224o}\201\227u\245jk\222\207t\200X\216xj\261\216tu\212.l\204x\235f\234\232{u}\221z\206o~\204`\201d\213\235\244\177\235{Xl\210a\236\230f|gN\225\217{b\237z\224\210\216q\226j\220yn\206\222t\212\234\216w^[\177{y\207k\221sq\231c\214\214]o\214~\203}sr\177j_dvzp\245p\245\211\203\201d\213s\215\212z\215\214^{{\227\250cwp\256\233|\202\222\203\215\220y\202\227\211\225i\177\206\232\223\237Xsep|\253\215v\242\254\237o\207Z\177ya\213\206\244f\\h\230\207z\270p\215xe\211{\224y{q\200\202r\253\245\205\223uau\231\201\202qw\234\226dcxr\227I\213\202\211jn\206\213\234Su\202\212\236md\237\235\204\222\241\210\205\240\246\220\215huid\203o\221\216\206x\212\213\215\207\265\206\214W[\206p\243s\242q\212\206\200mL\211\207|i\222\200R\303\231qnfSc\251\212u\245p\214\203pYv\212z\233\206r\215\263\226\200\211\246b\222f~p\214\237|mndl\226g\207it}\205\200\271\210x\204o\247q\215v\206\211a\213\220`\236m~wnvfz\220\305l\254q\220{\217gD\217\203\233\271\250\212\207]\221\212\242u\210s\206\225\210\207z_\200y\235G`ynh~u\237S\210~m_\206fk\206\203\200o\216zx\244boow\247\235x\254pvhe\251uU\222\240\221\221\204q\232\255\216\235\200\201\215{\210Z\216\254\204\213aD\220\220w\260\211\237w\225e\221{\202w\207\177\205\215vy\203z\255~\203\206\220[\\\250q\212x\245ar\221r\223\226p\214\253\231\177\235\214t|p\216\212\237m\240o\202\203k{\211nH\214\241R\241jvj\\bk\230[\234\240BE\246\202r\225euNsvCsyiumNq\205\203\274\235zz{\214U\231s\234x\214z\257pntbtPy\204yAe\221\202t=\206xis\202\215\207Ax\207\230n\274e\224\246\235\232\300\223\223h\314\204p\251\204t\212\217\236\300\224a\207\225\222{oR\274\214yko\217\207O_N\216r\200\206`\224^^\205dC\211_\\b\270\256\207q\216\204\237ctT\210t\212\201\266h\202\212\200us\306\234a\247q\237\206t\235\310\222Gr\203n\200\217v|\231\204c\223g\225\200\220k\222qR\216\270s|}\234\205u\206\211\227[\213~s\240qgj\200\204\211]v\203n\235}Uf\222mwpn\267}W@yj\246\213o\234\210y\201\211k\233\246{\212l\221}q\241\212\214\256yxe\220\231km\200~\206t{\233q1zcs\230l\201\211}\210\214\215l\204hp^jS_\206w\235\201}\216qM\210\220+\216\203\204\222luo\200\210\242qp\220m\207kz\215\230\215~\217\204\220\177s\233\211gp\227s\214\223sh\202U\230;\227\203oD\243o\177rc\210\231\263wk\200 t\250R\210\210yc\22484_\232\204\206\215te\267\216~\231\216\210\307\200\261\276\216\237q\300p\214\207\240\261\203u\252\326\263v\205\203\222\206g\240t\177R\234K\257X\263\\\254{z\2539\254\235\215\231\262\244\214\222\225\230\310\247\231KdyZ\221n\200\203\206\177Uvfid\177Hw\2132\217spMT@UjQ[\201\210x\265ezg\203\227\213\204f\214o\200\254;\215\225c\252%J\213v\034I\246`nR[q1\202lf\210hk\275z\215\216\221^\201\226\177Qwz\212\315\223T{\225\242X\217G\345rw\215\216y\212\201s{N\236\205\220qR\225\230}X\217oyko\227}]tq\202rQ\243ka\205\206fa\2002k]_\231\216\235\232\211\256hySO\225\211x\221\235|u\\\200RejN^\203\215\216\\V\210sxms\224\243a\203\213\232\256k\312p\234\213\264\244\222\210t\304\250]\251\202wb[e\231\\\220mZ\250\205V\246}_j\225fz\200}o\251\210ki\220\256nf|o\243\214p\206^\234\202\233et\231\211\206y\200\222\215\230|\236\211\210\215b\236\226\206R\223w\243\251lz\252\225z\203`\220kd\265\205?\225\257`\325\201\337\267X\207\274\272Ppv\313\213y\215om\205\232\234]\237S~Z\205~\226rv\335v\254j\347\222\200\214\230wq\206\\\375]\213p\202\223\220|\230sg\207\227\177\202\205\324|\200\211\206\216n\334q\237n~\222|{r\277\211o\244\233\245\212|\\\236q\204\207\300\215Z\220\212tz\223dWkR\277n\202_\263\213\263Z\240\217}zu\211xx\233\202\231\233\205\224\232\217hq\215\227\201\216\212f\177\213\212\201\210~q{r\221\203\215tj\201zC\210\245M}\204\231\325\227ss\213\204l\245uw\225;\271\212\203\204\177\214sS1\211\230}\201\2367}\255\234}\204\226n`\211\\\227\221m\262\213\234}\203{htKh\200k~\227iz\224ol]\\iXxg\230\212[\207\207d\255\177lu{~\226\200e\267q{p\211\205\240\210\240Y\177tZ\216r\274\250y\244{\213uu\274\205\243\212\215\177\227\237t\267\231t\215\207~\206r\224\215qu\204~vr\216W\202Vo\202\202\177\253]\221\234\224\237\207j\214\177\202\213qp\227\236\213\242\213\267\245\235r\216\241\177g|\214m\242Wx\215}N\210\214\201\222wZ[Z\223l\202\207k}Z\207\220\224|}\230\205sj\207q`\305_\260\223Pj\224x\220\234\235?\234\237\215|^f}m\270s\250\206Uz\240\213o\252\201\2104*\277WQeyb\222n\222\205t\210\210\213\205\200\207\220j\205\242y\177\231\273\217\312\233\204\213\311\203}\275\261\215|\256\255s\233nVyl\206uaiP\207Xr\204\232g\214\274f`\254S\224\227[h\242\220js|S\245F\230\235nya\237\216wI\200\212\201\203\271_fvxvt\265\235R\235\244uv\216b\234p\254\207\217nl\243x`k~x\242`\205t1\231i^fx\332\243A\264\300\217\212\200]\220\266umS\205xey\215p\233vp\226c\262y\237O\210\211I|\222\215\207\231qk\214v\204cY\214nq\201yyL\223q\221tgd\251%\215\322^dc\310\251T\243\255\207\223\212Y\206\250\250\232h\211\221ysyW\242~\201oopym[jx\210m\240\220WQs{\207\177\211\\Zp\217~\216\211l\177\243{\203xz\241os}\203\202w\201\177~\202\214\221\201\202hs{s\206~\204\251\210\241\223j\226^\211\247k\213~\200\252\230\230\204\217\261yyd\246d\213\204m\202~\213dev[uj\250xS\231\264\212x\236\237\204\177\200n\212\177xi\220\244\213\200rU\220\231\237db\203zP\213\240lX\212`\233y\204\205ocgkr[\215g\236\244\202v\202l=3\235\202oVy\202hOz{awx\217q{dfKtfN\255\203Og(\210Kuo}M\250\247\255\206\234\211-\212\221}z\207\223\265V\307\205\227\256y\263\222}K{\201\203u\316\271\271k\241\204xl}\202|\252U\202\222ky~\204\204\225i\233m\362\263P\220\337\201x\232^\224\224\245\217an\217\213\201Zp\272\211\203\220y\201\223b[{\223znl\252\275Imd\204t\220aEq\206tw|\030\205l\236r\242U\000q\311L&f_\241:=\274i\003nw\201+\\`Y\220{}sz\231\324\203K}b\177`\223\207o\200\223pq\256\213Z\236\372[\203\210^Mi\274\207ouml}_j|SP\214\214\203\177\244lf\220[\177\204u\222\265\231h\203}\210\177m`n{\212ow\206~\212\213syw\216\233\214~\220\204\205k\223\250LU\227Z\221\211ww\204{\201n_\213\213\216\2124\216bd\221\224kz\311MnX\255\324?\236\302\212`~U\220C\231T_\202p\215\252m\2414\220pt\202\232LX\301dz\205\321\316}\262\261dy\221V\221\206\205\222\200\204\200s\243nzh\240~b\220\261l\211\211wtZ\343\274e\217\254i}\253\206\214\230\215}\225\210\205zu|w\234\207\201\243qx\254\221g\232\223[`(\230{co\215r\201e\215t\212\224\210x\205wv\211\251\213\215{l\202qj\214\226Z\245kr\227|n}\234ke\244Uhzs\203\212rk\250?\202j\243Kmw\236pS\216Z}\216\234\226\235c\201\242\211UThlk\206\215\212\211\213\266d\212\227~\204z}\230\207l\207ohk\247i\200\202\210\225x`k}gx\217\200s\227\265\206}:\203[ptXt\207\210kuP\274\312P\242\306Y\240mt\212\275\250\211g\226g]x\271~a\212\225\207A\233\244W\211\2174\244h\212\235\212\225\201v\243\\ea\233d\223v\231fo\240\211\201\203\212qe\203q\206lo{\204z\212yz\205x\260zJ\202h\222kf\202\261\222vk\177\301\245\230\231\206\212e\212\235\216l\232s\207\227vsl\213p\216\241\201pk\236\200\211\213\241\205Pkt\232|\272\247i\202t\202~@\214yF\212\256\237\204\214\251d|\243g}{\233u\255i\216\221^\216uu\217q\232p\216\202^\201Zw\224\200\215n\225y\216\204\236\230\205j\210}\216\254\213r}\240Jm\214\245\222\255\234\201\200\212\202k\230\216\220p\232\221_\222\216{\205Bz\216\211\233`ya\177im_v~nQlb{wo\213\205\233\177\200Txl\256\230\265\211glo\241\204ij\253\226\207\230\202q_\204\226\225\202\201\206\201\177ax\204|va\273\203\242UZ\243\201\216At\210\213vxQwjQB\204]u\205z\272uryZv\202\214\225|ww\212Oje\\d\203r\177\213\235\204~Vlutgtv\225\200|I\210\202Xq]o\202\216[\227~\255{ksob\211e\216c\214`}\217\\\241fx|gt\225tbf\235\223ig\240p]\201y\233~tz\200\206r\251\206Q\227{\231\243\230N\231v\251\203c\273{z\213rb\251\224\211q\244rlp\202\217\200\214\177\205\203\202L\201\200\232r\205\202\250dT\245o\212\202u\254^\202\231d\206\202\222\215Xva\200ql\211\202\215o}xx^bOu\231z\230\232}^tm\230r\200m\216z\241\217\200\212zwx\220znzxkf}j\222x\223\220t||b\222\231\220\204\211[\304XO}\215]\250iw\201fes\230\203pz{\177txoOc\214c\\\214\236l\210m\206pu\204jfu\235\\Cc\220\210\206^R\247\200}\200tv\227{\217x\244\226e\204\206}#\214b\216a\231\205\226\210\230\200\213\202\223x\177}\253\\\240\211~\232\261g\241rk\235\210\223\213\201\226\200\206qoeo\236Tlv~\222z\226\246g\206v\210kN\212a\177\206\212\201t\224xedzk\235\201z\234\\u\231\220{\225}\215\233\205q\261\233w\215\236\264\210\200\222q\227\215U\232\231~\213\244p^\206;\204\224h|\214S\232\231}\223t\263\200\246n\213iuc\244\210f\240mty\212\220z\222\207\214\205\212\201\202n\232um\205yY\235kbjn\220bl\205o\206l\206`H{_p}h\211bk[wv\205\215\240\227\205{\203]~bh}\202\210Vk\222f\206\244ms\201\233\216\207\177\234\221t\207\214\204\203\214\210e\214\177\237{\207\222[tL\177c\212\205d\221\226UU]\200c}g9\206\200{\177\205\215\207\247`K\207}[v\213\227^qm\206\204`\251\213}cdes\232jN\235\200\223\225\212qxr_i^\202l\177\202\216wRz\204l\233\236\230\204d\203\243u\226\177w\256\231}\216{t^l\212\220|l\300\230\211\216z\231\214\205sluW\252\206\214\251\210u\242\223<j\\ssQ~X\236\224i{|\200x\240rm\213q\210\243\221\211}\205\205np}\224\207\237{}\241s\213n\226cr\275\177|\200]\200|\230pQf|\242\231t\217zu{b\203\215\243\177\255\263wgs~]f\221}\245\236\205\210\272\202\235f\216\216\233\214\\\222\203}\211\177\215\202y\214\177\233\177`\203p\226v\217u\216\212v\231c\210\205n\2725f\212o\222h\236i\243d\207\243i\247\300qh\204UvU}k\243U]\225p\200zZ}\234b\222w\204\247\223~\233\252\235\220qp\247k\227t\231\242\256\225}\202\215\210w\331\212\254\212\217y\207\231\224\217yd\200\236Vgiw\252r\201xeMT\257d\242\247\243\207\220\224\200\207\234Xy\220\224Y\200\216y\231k\212\234o|\235\177\236\254\202\205\227\201a\260S`\251\210qr}{\211vXx\216\274\255\247}b\211v\214\212}l\204\227\230uSx\213syD4h\177k\215\220}V\203k\212\242\220\237\200\221Z\235t\211\225iz\225\211\225\223n\212\232\224onk\206\264\230u\241pvh\260vo\204us\204\206nhf\241\205q]fsf\275`uzd\247t\217R\273\212|}\215\200{iy>\202\204_\232\221k\242f\234q\214\220cafpp\202l\227\236\300n\204^u_\220\211\202j~\211npS\227\215x\207Viqn\245\241\177\216vzy\201^z\201\222{d\224\221\237kr]\237\211{\210\207y\214y\216VrY\200\205\222\227\213k\260^l\217Tm\201Nd.k\235\263n\233\234dyme\207a}^\274\215u\226|_\222r\213v\233\250\230\227~fsg\240\216t\222~rn\203\210\210z\206{P{mc|\255\233\260\217q\234\201\215u\217w\223\207s\220\206o[\244]\203p\243\222v\211\264nN\221\214OqW\227\216a\213^i\200r}}x\217tr\177\211\224\200\205\205\212\206vx\207\242V\204\230\225\231|\205\216W)\200vL\205\177pp\212aZ\256}e\264qV\210Nw\233l\214\207m`\262E~sg\240\212\266\217x\216y\217qfb\217\207\264Z\220{n\321d\254\205\255\261\227\206\246\255\270\225\227\234nxq\265o{r\235\231\240g\244Qz\202s\213O\177og\204x\245\220\177\215l\255\303\256s\202\226d\202\254\255\201\223Nxyu\213Y\253i\205\231u|\235ubO]V\201xuaZB\216G\221b}\234\204E\240r\234g\311/z\243l\263lnu\223\2203\255\224{gh{N\231rhm\210\177xv\226e\266S^ftx|Htp~\223{\211\205t`\201\273\241\331\243a|\226v\215ngp\215Uf\261\212\223\213\207\201\224\215\200\203o\215\216\237`}\216\233kWNf\203hJ\247Xyfcq\231\216\200p\237\202\177\225j\255uiY\213\220sC\244\242?z\304S~tz\204Zx\250\222\207\207p\207r\205\211\204y\200\212u\204\205s~\215\224\214\224\257\\\241\210sY\212[\231\232z\202\177\327\211B\240u\203okqh\203\217\177\222\203u9\230\200oAp_\233\210\212svt}x~MZ\232\262ek\257v}\222\207\212\252\207\213\226\234\206\204g\213\204\224\223\204||p}\214\254tvf`b\214g\206\201n{}\240}\211\205~u\207yu\216\220\212\221\222\205\216nzo\240\231|Mh=\210}r\206r\211y|Yx\\[z\241\224l\205\251\234\202\212\242\254p\231\207\214dUw\232Z\220\202w\212[\230\225\204s\212\207pz\243\177\267\243\235\223\211\203U`o\212v\203\241\231\214\232\267\205\207\206\222\226xwU\201\207a\232\243i~\214\206\251\203k\204e\227\243I\213{\234\210\217\255\177fx\233\247r\241\205k\274\246\212|\247x\246n\202\202\237\205mo\177b\220nv\216fJ\202|{z\234\220v\225\213|nm\211\246\207l\255\202\216\234\255\177\261~]\236cw\234\251_s\226t\200\232T\234rz\310ny\221\200S\177\222B\210\214\224\217\236^b\222\227\211\202shq\206ms\220\204\216\215D\200\205nk\236T{x\213\215\365\274\243\212\241\235\226\271Va\250q\224hp\221g\306{\224\325`}dq\206\210{\306\240\235\227\227\226r\234|\251\214\200v\201\211\177\225\177}zI\232kP\213~\200\241u\200zlsx\232w\216|}\213\205\231\201k\250e\254\230\222u\203\235\254o\177\205\203\206fsy\257t\212\204\216\202\202\207zZ\237uqe~\207\256\230\227lj;o\212t\270\200\207V\201C\234\221\243\213kwZ||\231\231dj\202xj\302~eucl\207\202\340\240\250|6\224\202z\210]w\213mr\203r\211\214f\211ov\312\236\224\222P\225r\253\224mjw\235\206\177\200mn\225v\207\212\222\211q\223\222\244\177K\222{ddem\202{\245\227o|z\266a\204|k\242\232pm\260\253\205y\230\203\250t\215xk\205\224\253f\244d{w\207\267\230]j\227c\203Q\222buz\215_tyg\201r\240n\216n^vt_\230\226\177b\235\226m6\241\210g\235q\251\245op\311\202tRU\206o\236\2369\236tvy\236olp{Y\204\232\270\254|\222\220^sz^r\260z\206\215hqWe\177Yjl\220\200C\253hz\204ze\253P\212yj\213iow\234L`jmpg|m\224sh\204\227\215\203px\224\211\216wZ~t[~nd\201\222\234d\212xmn\211\224\214wf\222\233n\234lU\201c\203\200r\247\222vqi\204u\223}\217qx\215\233\226v}\221\227\206\237{\247zB\214\267\237\217o\200R\266\214b\243\212\210\232\243i\203\202z\207~ex\211m[S\275\226?\223L\233\230\251\223V\266bv\316\225g\222|\210\325t~W\201\246\263\244msXro\236v_k\211pg\211\236\206\227\236\212b\215\214x\220jI\216[cj\220\177\227\177j\201fd\2218\204i\212WIT\201\201\215\243{d\177\213Nf\200`\214o\221Ykn\'\2251Vrn\222\271\240\221q\205\216@\202\255w\261\224`\217h\234e\224os\225\232\220q\203Qy\217\246z\216\240\377\205{ow\232\201tp\234q\235\213Xa\214\225k\261wt\221\201n\256zk\210\177\205[\201\244Ef\210~\212x\210n\253oTA\210\203^\261l\200vn\231\203n\202\233jzep\212\264\227\245xv\224iw{]nea\207p\253K\304|Jy\204uzo\234\236\204tg\215\261\206u\\\201vX\201\333\226|\226j\226\233\222\203\200\244\205\231\211\207k\226\201\207W\207\212gd?ynXo\\\201{j\232\201p\205\271\237\207\201\245ch\221nx\216\234s\233\203jHbfgViE\177\207\245}{y\215\215\216d\234\222\255\206b\243yo\211yo\235b\253\203\233\216\222\220\205b\213\212v\207\225\215}\217\237e\211\271Z?cv\200\334i\200z\216v\203rrp\220\207\\b\226r\222\200\212\255}\217a\236u\236\204\2113_ox\257u\210\213\202\216v\\s\214\227u\223\215\205rzgs\337_\225p\214if\242\230H\234tn\233d\206\236\214\222bq\203\202\204m\236\232vwu}?Mt\250\215m\234\221c\233\316\234\260\200\\e\206boo}qvvfw\\yv\202\201x|\227km\230s\224\230\212\205ixu\234u\220\224~{\231\207}\253\177b\256y\202\211\177\226i\224\216\251\253O}io\262\204sbn\222\252fy\216\201i\225~\235\215|d\223\220v\251\216\235\204e\272\200\212g\263t\241wv\262\205mwXy\313i\237\235\216c\204|a\213ow\275\200`o\224ds\215Vi\231nsw\210Z\202\205SGw\204wTj`u\211LMo\225k\254f\241\222\254\220jq`\177\265\240\221h\234\177[\200\203kh\261\214~\202\214xqe}d\223k\242\202\\\177\240\234x\213p\202q\\\221\203Z\201y\211\205\224axc{bs\203~s\202z~\256\212hia\251\226\236\201\201\233\204\203lymxg\207p\240nmy\232\177\223\215\244]\255z{l\201\201\203Q\255c\216TYn\207\217^je\203p\224g}\235\266|\210\220\224o{{a\211U\214h\231\211w\211e\206\204\203\261\220\217}\215pWT\220m\204w\213[\210x\226\252\252Lm\300\224\216\213P\216W\250Uv\214\247\231}}|o~vlQ\201q\207\201\220\206btLj\202hku\241\221x\211\235\222]c\214|\200\204X\230g\213\214\233\254\200\225\227\207r_\\\232\211{\214t\236\226\231cy\223u\221\200}\220y\207\216~d\201V\203T\214b\211\177\206Zi}Zk\\{\235\202\205\236N\245\234W\234~\2529\227q~\221x\177\225s`*q{{lp}\222\203\203^zZ\207\177iM\237\226\204Tsq\240e\211sIr\265cDxoc~\211\247g\206]xZv\214\210W\223zR\200|Z\207\223kwd_\217qmw\211{\223\221kOl\\^\214\177qhu\202\216\205\214r\200c\231eP{r\241\207\\\213\240w|}x\256\207\245\223}W\254h\221}bwd\200\257\206tx\201\203n\203H\206m\201\204\203\217\233r\177\202\257\243\200\246\200.\224\225\215jgt[\204\227v\277Ps\216\226ox\232n\222i\220]\247\213\207\234E\225`\204b\243h\201k}\201kf\203\212tgm\234\207ox{\222\223\220`{~\251\227xe\255b\202\236\211{\200\232\272v\216\211\236m\221wz~q\200j\203w\206\224|\212]l\225\210s\276\212o\234Tl\216z\234\214\221\204\222v\204\247}\204T\213\233\214si\177k{=\203\216\203}hf\231\206Ul\200\237[\206\252\212\214\263}\217\210\210~z\233z\236pW\252N\267m\211\177xl\220n\207\226\201\243zf\276{\271\222?\204n\233i\275}Qz\233q\177i\203m\251{uI\177\232l\210l\214\224\201{\224vO\221\242\200\211\203e\210t\203\213h\224\253\245o\236\204\205\235o\201xynQ\201\200\226n\220\207\304HGxq\255\206qviwu\202\220|\210\220N{\210\231\246itamjk\212\243\204\206\227e\236\224g\224\216\207\202\231c\237\211h|}l\251\224\215\202\211vXR\206\205\205\214\237mo\235\227u\206t[i\235my\203\225j\234\205{J\210;ty\211O\220g\224~uU\240\243\204^\215\205~\211n\236\221\230\207\211V\256{\233q\252\204\240kkoQ\205q\245o\204\203Z{E`\213^ae\226\220~l~\232\223\200\207\211~E\216q\214ffi\242{\260v\237\205W\225I\212sqm\216\220tao\232\241\230\210pzog{e|l\204c\224\202\210n\210\200\201~vam\242\213\207\177xX\244\246\227\225\224\202iwz\204spz\177yzfMIn\254\231Y\240\252\224\241\262n\224\207\220l\200_aq\214khx\203\203\177\233\230y\222c~\222{V\216~\254\202g\201Rzw\225m\211\177\200f\214\223v\264t\214\226\230y\201f\217h\263[a\201\202w\200\211\250\217\202\215\210\242\200{\232{\215\200xycw\237\177\207Wz}\217\263\202o`\221\214{\2556\216|G\244\221q\201r\223\235\221\214{\226d\232t|\203\211s\247\250\216\215\\\212Suyfo\233^\201qm\221\220R\233\206\231\230\227\220\212am\234\200Kq\213\260U\241p\202x\224M\200v6\243\322eo\2574xsI\205mwe\236\244\240\204\222c\234\205"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.28335261345
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.28508651257
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/convolution_eightbit_reshape_transformer/residual/residual6/MirrorPad"
  op: "Reshape"
  input: "transformer/residual/residual6/MirrorPad"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/convolution_eightbit_min_transformer/residual/residual6/MirrorPad"
  op: "Min"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_reshape_transformer/residual/residual6/MirrorPad"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/convolution_eightbit_max_transformer/residual/residual6/MirrorPad"
  op: "Max"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_reshape_transformer/residual/residual6/MirrorPad"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/convolution_eightbit_quantize_transformer/residual/residual6/MirrorPad"
  op: "QuantizeV2"
  input: "transformer/residual/residual6/MirrorPad"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_min_transformer/residual/residual6/MirrorPad"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_max_transformer/residual/residual6/MirrorPad"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_quantize_transformer/residual/residual6/MirrorPad"
  input: "transformer/residual/residual6/conv1/weights_quint8_const"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_quantize_transformer/residual/residual6/MirrorPad:1"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_quantize_transformer/residual/residual6/MirrorPad:2"
  input: "transformer/residual/residual6/conv1/weights_min"
  input: "transformer/residual/residual6/conv1/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_quantized_conv:2"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_requant_range:0"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/convolution"
  op: "Dequantize"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_requantize"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_requantize:1"
  input: "transformer/residual/residual6/conv1/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/residual/residual6/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/residual/residual6/conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/residual/residual6/conv1/convolution"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/normalize/Mul"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/normalize/variance"
  input: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1/shape"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\210\017\027?\005\266P?2\363]?\220\334t?\000\213@?\336@H?\025\026\325>\330\337\376>\303\317\027?\332\376\261>\223\257\226?\312\006\350>)\203\374?\331\244\247?\333\337\230?\310\332\037>W\350\230?;\255\214?>\342\003>\306\036\206?\254\345\016?D\230f?\354\2764?\272y\222?\221\014\016?\246\334\256?\013Qf?n\252\317?\3077\271?l\371\267?z\2522?\274\275\275\273\205\334V>f\2707?\373\347<?E\177)?Hx\272>T\307\037?\341d\275>L\\\372=\310\035\203?\274\215\343>\370M\203?\326\250W?qi\220?\227\001\225?\003\302}?\037\277L><E\203?\3077n?<,\371>?\0254?\362p<?\206\253_?\326\022\251?n\344\330>\367J\356>#\036\212?\220\212,?\022\231\211?9R\014?\337\246\207?@\025e?\232\366@?5\302q>\310\233j?\252\374&?\273\266\005?\000\020\314>O\025\272>|9X?\013\234\271>W\213\005?}[R>\t\346\257?m\222\371>\251\r(?\252\254\376>\326\241M?\021\253\266>\325|\254?8u9?\210a\340>\327AZ?\213k\005?u4\036?\206\371\372>H\253\027?S\235\362=\351o\263?M\230\251=\254\025J?|\214<?Q\010\334?\365\251m?\203\274\223>\020G\230?\033\307\254?\354\324\201?Mnz?\230\274\033?\360\361\032?K\203y?\027\016\257?3Oh?\177\367\216?\035\004\222?\036\367\205?5\3200?\217\037\036?{\266>?\035\212\225?P\320{?\3018\223?\305\035\266>_am?\001\206\356>h\255:?/SI?\235\374U?\241\204\244?gJ{?q\222+?\023y\214?1(\250?\344{Y?\232\232\006?H[\213?\016\275m?\214}\210?m\2221?\371\374^?\232\2705?I\017\032?\320\273\263?\247\353 >\277\036\027?\242\334+?\220\350\377?9\361\032?HS\211?\232\232\204?\360RS?[\210\252=\273\272\230?\023Z\267>\250?r?\032\275\206?,@[?\016\264,?]\205\t?\"[N?~:\375=^J]?\002\310\207?T\274V?\303\305\241?\233\304\202?S:r?G\340\026>\371\203\246>\020\0228?\241\274j?u\001??\341tJ?\306\237\355>\026e\211?\347\271m?\014\025]?\263l\\?\363z\222?\370\n\221?\255\3257?y\026e?!\017\200?\035\326K?&5\274?l\024\202?N\2552?j3\227?+N\027?Cg??%\210*?g\017@?\255\336\034>l\210\232?\352\t_?\216\276t?Ry\350?Q\355\313?3\235e>)8->\0200\215=\205\306\272=\314\327-?0\\\\=\214\323\234?ku\340?\305W>?\216\273\221>\304\310\r?\202\365\034?\2309\360?\244\2105?\354\253z?\023\244!?\220\241\202?Z\177y?\035\252\030?\332/\314?K\347!?\311@>?@\243H>\367\215/=\255\320\021=F\313\330?EP\256?bsp?X\330c?\014r\230?\237t\232?\255\324\205?\231\307r?Gb\231?\357 \002@\037\226\220?\347\201w?5\214v?\017[\314>\'\353&?\"\245\204?\346^\255=\356\352_?T{5? \243(?\303\276\314>\233\201S?4\355??3\357V?d?X?\022\311\016?\004\275\216?2TC?h\322\271?\320\273\253?E\026+?)\306,?+S\376>\217\205q?\301\266\245?\3550\227?\330\242_?\203\222\002?\326\371.?\025\321W?\027\254[?uY\205?Y\336\026?@-\201>%\276e?-\350\364>lUJ?\023\352w?\344g\300>(\365&?uK\337>\034&\264?\352o\226>\306|\237>\007\353\201?\tJ7?\215\303\177=\n\321r?M\204\020?\033/\205?\264\371\002?#zV?\035\3148?V\'u?\010\340\344>9D#?mm&?\332|\300=~\204u?\244\247\347?\221?\250?\034\220\033?\3134O>Cx\210=\370\237\264=m\301\353=\373\0248?\300\224\213?\341\360K?\261\315\260>\221\312\332=r\341A?\203\357\020>\230\255\234?p\3607?\013\311\375?\"^O?j<\255?^7\355<\352\r\"?\376\007U>\277\245\225?J\263\301>VL\213=\315\322\274?{\212\t@\332\276\035@b\371|?n,R=\337\223\305?lcV?}!@?X\346\201?l2R?4s\317=:r*?\330\260O?\032\034\016>4\236G?aix?\177#\033?\3251\241?\374\265\r>i\302I?a\263\013>\022_\331?[\302$?\226cg?\003\215\267?\373\0368?\321\177w>b{N?\367\036#?\272\233R?[\'\236>\212Z\260=\227D;?:*\030?*\232\345>\201B\221>\024E4?\023\021U?\001\300\312?R\365\323?G\177\206?c\362\002?@\355#?:3v>\002\275\364>\304\362\212?\274\360L?\225\305 ?\205~\\?\247\251\207?\242#\202>\370J:?RJ\000?Rzq?N(p?\330\214\254?;\346c?\201\241\246?\342\036\341>7Y\203?\373\033\030?k8\277?\007\327\022?\342\362\005>\220\275$?\341\373\204?\304\271I?^\220\033?\217;k?\344\341\226?\354H\255?|\240\211?\313\372\242?EvX?\311\034)?;?>?\372\326\032?\246\263\372>(9\202?\307PX?VM\031?\314[.?\316b\311>\241\355\016?t\253\364=\316\031\214?Fz\004?\004C\242?\272\260\242?)\314\200?{\201B?\305\202O?\346\253\227?\002\242\353=3\377\227?]=\033@\266\227G?\023\037\002?Z\252O?AR\033?5\347\250?\377\030\265?K\273`?d\330\253?L\246\274?~\003\226>\267\253Z>\0301\252?J\0064?K\373S?7\335B?%\3668?\355\271\021?%\347??7\355\214>\263D&?\227\261\353>\250\t\217?\027l\"?\002\340??l|\273?\204\245[?\'ag>\272yX?\230]^?uz\211?W#\243?B\023\272=\315\0374?g~G?\277\313\025?bK6?\205\031\026>tR\356?\312\302t?\261\273\205?\317\321\216?\241\220\262?,\357\021?\250\316\030?\236\276C?\252\036\024?\303\376{?\363\270-?\2056\222?\376 \223?\230@\000?\246*M?\032\214\261=\027s}?\276j\305>\342\370f?\377%\234?\246r\324?\216!(?\\o\227?\327V\216?\336RC?\236\026+?\035,\341>\024| ?\245\2478?\005>T?4\206\360>w\024)?\270\207\022?\246\203\313?\305\357\231?\351DW?)\'$?\2235\032?\246\260\201>\001\322v?X\355\037?\377\205\214?\256Y\341>!\023\200?a9\246?\357KW?\004\255\005?\275\235\007?#\222\256?\212\236 ?\036]\344=\214/=?\211\274\177?a\271\337>\204\006\243?\235\206\036?R-o?\360\325\202?\367\276z?\361\021\342=$V\241?T7\375>\274\005\261>\306?\361>\312\273T>IS\232?\341\265\307?\322\370\250?QB\020?\030\032U?\325\253\201>\324\344M?Ua\226?}\224;?\013>D?\273GE?\214\226z>\212\337\334>\313\205\264>w\270F?6t\202?\321R\233?\r\r%?I\007N?Oew?\351\0240?\244\366\202?h\244\304?P\370\215?\223\245\224?i\347;?}\231\005?\t\362\325>`\227C?\233\275\003?\'\256l?S(\255?\2778\344>\000\277\023@6\370\305?\004\200\024?\206\310\336=\336F\037?\013/\203?dm=?\036\333\203?\010\300\252?[B\201?\252`T?\322\352=?P\202\233?\272\3629?.ZJ=\352\005#?}\275\273>\034\302\263?1\0017?\226.\220?\240j\022?\273\004t?m|B?\346\233Z?\203\220\245?*\nT??\203\340>\303\235U?\201c\214?U=\304>DF\324=\301\'Y?\263\'I?\225\364m=*\376\003?\242 V?#N#>\254s\034?}\267\361>l\210a={\261J?\t3\246?_\255^?\336\352\242=\247\203`?\"U\030?\276C\214?\246dJ?\360!\347?<\356\307?\320\321L?j\323\'=_B\267?\001\335]?\200\000\310>\352\213B?\364\020\256=\223\336\217?\337\357\013@\242\003$?\323\n\210>.\257$?b{\311?\027DN?\275\211\271?\252\336\211?\016\001\320?\345\351\337>2q\274>\203\231&?\2422e>\230@\026?\n\314F?B\310K?b\010\001>\202}\352>\362\203\200?\201#Z>\024\024\354?\222H\232?\356\271t?\374\207#??\214\232?\375\036 ? \320U?\311\243\240>\302+\310?\344\356\252?\341Z\354>:c^?\334\215[?^\020\022?M\335G?\363\030W?\305\361\325?\233\013\327>\233\031\207?\007\026\316?V_0?\364m\203?\203Wx?\350\324\266>\371\307\301?\275\021\002?\221\346\215?\013\220(?\n\035\037?M\237\360>v\303M?|\306d>9y\227?\227\022G>`qN?\336\304V?W+5?\372\374\245?:o\210?~\232\303>\352\372*?FV7?ZA\345>\022FF?\240E\006?\010q\016>\020\362\r?\340\254b>\'\350^?,\365h?\3018\231?\306.\271?#\311\016?j\005\264>3\252:?d$\217?\361\252w?\210D\234?\260\034A?*[L?\0303\206?6\025\245?0Z[?-\253\305>68k?|\236\217?\345k\321?-D\246?\351\337S?\265\266\220?\271\036b?\260\013\323?\336\223q?\314o\035?\266){?x\242I?\273b\271?\276l\232?{-\027?\302^T?\003\237\000>3j\230?\303k\037?\226)0?\251\361!?8\237H?\n\225\344?\337|\313>W\324\317>\354\321!?(J\010?\365\312\022?%-_?\001\016\367=\302j\032?\365\346\272?`;\275?$\237K>\217\242\221?\355 M?\234\375\317>\260\321\231?\007\245\240?\265q&?\221\002\205?\376\251\014?\341\377\000>\303FF?\314\351\216>\257\277\216>\261i\371>\206\233\207?Td3?7\374\032?\027[\226?\317\237\251?\377!\226?Hy<>\'m\323>3\313\230?\211\243\034?\t\2122?\315\345\036?\301^3?\267%t?\264\277!?\351\343g??\232\373>\266\230:?E\2146?\207\200\272?\355\361e?\032To?\003b-?\267-+?\337R\273?N\3273?\221\327\231?\260:\\?\222\337j?\342\342\200?Vh#?M-~>\025\364\005@\366d\024?\320G\201?9\305%?\226wQ?\264\032!?\t\326C?!\333\306>\030[M?|\006\223>4\310\223?\017\3350?\262\350\201=T\314\273?\310\315\344>\027\364)?W\367\334=-\022\233?!\254\306?ar\362?/\222N?\352\001\273?\304\244\004?\272\365g?\\r\026?}\331\203?\335rJ?\255~\002>\313\335S?I\217\200?Lt\222?P\n\026?\304_\r>\246\357\360?\327\035\201?\242\024=?\325\301\257?\334\364X?3^\022?\020mD?\371\245\026?\"\325\337=\010.\013>\357C\230?\320\260\033?\372\004\275?V\227\341>K\260\'?\232\303\351>B>\304?~;L?>*\000@\342\347\203?;\246o?\330?N>\241\235\232?\034\021j>j\033\311>L:\217=\305\002\273>\005\355\020> +@?u7q?\363\345h?\276b+?L\360\263?\002\303>?\022\036\313?S\002\216?\333\026G?\336\323N>"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_1"
  input: "transformer/residual/residual6/conv1/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/residual/residual6/conv1/InstanceNorm/mul_1"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Sum_1"
  input: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims_2"
  input: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual6/conv1/convolution"
  input: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape/shape"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\365\277\321\276\373\250\244=\235_[\276\207\222\027=\261K\305\276\243\345\212\2768\006\204>u\020\313=\"\032\304\276\320\315d\2778\254\031?J\n?>g\221=\276\372\201\362\276\206H\007\277{\207\t\277Z\0301\276%r\361>0nV\277{\360\362\276\327MI<\314\374:\277I%\301\275k\202\010\277\021_y\276\232\022\226>\002e\240\276\300\344\320\275\3565\210\276\261]B\274\0253+\277\352;\244\275k\3078\277\"\341\253\275\311$\177\275\001\246\273\275\312\023\014\277\346\213\356\276\357\223d\2779\316\'\277\325\250\300\276\363\310\331>\300h\346\276\206x\220\274\325\350\242\274\244\232F\277\375h\032\277\306\350\006\276P*\211\277N\321\253\276\024\000\303\276\267^\032\277\243\311)\277/\241\322\275%J\353\276\2634\020\277\307\034\034\275\312\356\247\276\230D\313\276\354\022\r\2775DE\277\256\007\210\277B\364\254\2760o\374\275e\0100\277\312\346\366\276@\355\270\276\206a\344=\212\223\226\276\365\335\021\277&XD\277+\207\341\276\356U\021\277`\210J\277\206\211\347=\261\022\030\276L\213\227\275\266\343\251\276\236\"\214\276\223\305\n\2762\030`\277\222\311\r\276\337\342\324\276\374\n\037>\n\231r\276F\252\235\276\\`\004\276\020\237\203=(\023L\277\021\177\253>\246(9\277\336y\212\276\325\346\314\276\217I~\277j z>z\316\266\276D\274\266\275z^B\277\201P\203\277\250#\266\276Cc\205\276\301C\330\276}oP\277c*J\277\376j.\277\032\342\037\277\345m\375\276y\376%=\231\201M\277\3708\334\276\276\025\r\277\351\355\343\276\013\314W\276L\341\340\276\252`H\277I\376\227\276:1J\277\314\376.\277\313=T\277\223\376A\277\350\026$\277\341C\t\277 \305\371\276\236#\325\276s\336A\277\322\024\361\276\262x\364\276\260\251\024\2774:\214=\337x\221\2744\365$\277G\247U>\201\352\030\277x\355\311\276\206|\331\276\000\0218\277d\215\006\277\356\013\032:\304\200\373=\251\270a>\262\227\004\276w\321$\277\tL\237\276\271}\307\276\227f,\277\'\231\025\277\227\324\036=1[n\276\000\335e\276p\222S\277|\277|\276\205C\225\277|R3\277\256\314\360\275\364\213\014\277\004N4=\364\027\"\277\220\223\222\276\273w3?\367\003\027\277u\315\377\274\351\213\247\276\035\327\032\277\334{s\276\357P\373\276\374\324\014\277\272q\322=\245\275\n\277W.\033\2775\2743\277X\227\241>fg\234\276\344q\035\277*~\367\276m\302\343\276Q\242\302\276\253X \277\221\312I\276\303c\027\277\\\253\032\277\021N\035>S\010F\277\227\036\"\277\225\022H\277\274*f\277\023\000\233\276Vd\006\277+\324b\276\342\326/\277\327~3>^\275z\277T\0135\277\315\312\016\277#\033-\277\336L\257=\255\205\331\276,\0325\277\300\216\177\275\205\014\364>=\324c?\345\347\366\276\262\206G\272\316b\013?X\005\377\275\2479\021\277\"\261\257\27408a\276\327Q\300=\376\351\252<) 7\276\267\341\r\277L\315N\276\323\304W\277p.\013\276R\341\340\276\337\002m\277\304\3447\277\342\323\312:g\003\223\276\252\312\323\276\372\346\212>\225G[>\221\265\r\277D|\251\276n*\020\277o\004\245\276\326!\324=2\177\327>~I\326\276^\242N\276m\n\214\277\354\211\300\276\331\212\300\276\305Z\336\276\326\333*=wl\332\2765\346\247\274\033\224\036\277\316\320\355\276\036^\211\276\013\316\276\276\001\t\241\276\3275\251\274rT\005\276\200\247\261\276\376?d\276W\244\202\275[\n\212\2768\031\202>u\311\034\27750\334\275]jD=N\003Q\276\233\273\270\276.\371}\276\204\243\327\276\354\363\275\276?\303\335\276*\r\316\276\216\253#\276<O\024\2777]\030\277`\242\301\276\355O\\\276\221\004\257\276n\213\020?=\312\266\277\245:,\277\017\225B\276\333\206t\277*\033\030\277\270\277\352\276\024\206\"\277&\233P\276.\006\271\276\265b\320\276I\224\004\277\222:\225\276?\371\025\277\337 \247>\262v|\276\251:5\276\257\3324\277\355n7\277T6\257\277\212#\006\277\225\202k\275\305\033G\277ID\265>\220\020f\277\365\246U\277\207\365\241\275X;\376\276\374\231\021\2755\321c\277\034C\037\277vF)\277\334\262\\\277,f\"\277\n\313f=\026\354\003\300^u\260>\033\256\000\277\002q\203\276T\010\343\274-BI\277\235\340\216<6\360=\276@\336N\277\347\320\325<\212\357m?\372\016\263<vP\227\277\312\247\367\276\320\344M\277;b$\276l=\177\276\334\300\236\275\202N\337\276s\341b\277T\312\231\276p\377*>,\257g\277]jm>eLo>\262-\003\277\024\205\203\276\343\036\025\277\233\361_\277X\316W\277\314L\250?\252S\000\277\'6\220\276\275aW\276i\252\001\276\255\270\340<e\253<\277f\312\246\276\313\2453>y\355\n? E\003\277m\000\231\274\215\266\372\273\352\332\376\276\350Xv?\311\316\232\276\240\300\307\276\265\322\024?\013\314\317\276\017\351\343>6]\317\276\200\020Z<F\034-\277\317\331\355=\024;\372\276\373*\374\275Z\311\023\277N\323\030\277zv\270\276\312W\204\277\356\t{\276\223\006Y\276K>m>\206\243\"\276\343p\274\276P`\241\276Q\230O\277\301\343\367\276\324\3212\277\326|\n\276\237\276)\277\247\270\027\277toR\277\203\344\013\277\215&\013\277\270++\275r\255t\2768\301c\276/\016\365\276\327\364>\277KJ\034\277\\2\223\276\020\300\356\276\363\033:?\346\262\326\276\300\363\017?<\"\n\276e\330\234\2753\253=\275\363\026>\277\237\032i>R\357\006?\217\302\371\276n\213{\2776\243c?\033\223\244\275\222\"\213\275lH\217\274l\367L\276\255\376\203\276\352\324\263\276Cz$\276P\253>\277\352=\356\276u\016\013?\337\242\363\276w[\263\275\234gp\276\260\320\202\276\331\220\305>\251p\222=\247\031B\276\266\325\353>RY\223>v\222\200\277>\030/?E\266\r\277\306x\356\274y\222r\277A-b\276\362\334-\276\033\226\022\277\207\212\002\276\266\252\245\276\304D\261\276\022;\240\276\244\274\257>\206B!>f8\320\276\331w\032\277\t\257\020\277\300\363\372\276\262F\003\277J\323\262\276 \375@?z\310\027>\312\013\331\276\020\260\007\276\203\267\266\275m\000@\277T#\251\276N\3575\277\237a\272\276G&\236\276\346K0\277\266\322\372\275\347\001\316\276\220pi\276\364\204\232?\321=\n\275\240\005Z\277&!\201>\246#\320\2763\214?\275\021\017\017\277\240\211\220\276\261e\252\276\024*;\277F\255\211>\020\376\272>\202 2\2769,/\277\237\243 \277\3322^?$d\257\276\030H\377;\006\354\031?\020\036\266=r^\336\276\td\352\276\007\236@\276\023\324i\277\206\310\354\274\014t\223=+\354\t\277\216[\231>\212\016\036\277/\001\251\276/7v>\347\355\002>\334z\225\274\213b\005\277\036F0\2770\235\030\277\331V\020\2771}Z\277Y\310c\277M(\023\277\315{\245\276\300\316\234\276\252,\237\277j8\332\276\261G\016\277\"\004\342\276L\313J\277g@\030\277\370\276\367\276\026\331\344\2753<\001\277\003\362\312\276\2323\n\277r\211Z\277\351\263 \277\256\177g\276\311\251\025\276q_\373\276\253\366*\276\020\252\'\277MZ\232\277\313\213 \277.9(\276+\223\215\275\275\365+\277\335)\236\276\236/\230\276\3365\220>L\256\251\274\302\235&\275\217W6\277\2062\022\277\315q\342\276b3\344>5T\330>\365\270\013?\275\354\233\276\000O6\276gm\202\276~k\014\275J\231\217>\222\266m?\300\242#=~\250\353\275\304H\202\274U)\336\276r\351\267\276\302.9\277Rm\370\276\265\213\035>Z01=/+\323\276\356\214\213?}\240Z?\365\3625\277\331w\032\277\210\311\376\276-\005V\277~\301\317\276hN`\276\240\023Q\277\207\211R\277\017\350(\277\306x<\277+?\214\277I\014.\277=\2554\277\341\250:\277\302\266\\\277\23227\277K\247\r\277j\031}\277|v)\277\341\364\263\276j\312\036\276jY\214\275\\\317\223\277A3\353\276\255\254\240=\034V\367\276\356\370\216\277\220\240\267\276U\317M\277:Q+=t\302w\277\257@0\277\200\3536;8\230\306\275\261#8\277fi\322\276\376\365\275\276[\237\275\276.B\313\275\245\207\\\276z\203\007\277\206\221\003\277\317\000X\277{04?\320\023\245<\340%\031?c\361\272\276sN\325\276+\256\344\276\304g?\276\267\033\'\277\303\037F\277\001S\256\277y\005\246>\031\356<\277i\016\356\276B\361\336>\267\014^>F\247\270>Py\335\276\331 \243\276\n\375\211\276\305\005o\277\245\365\221\276:0d>\350\016\"?\215V1>\322C\001\277.z\202\277\352\027&\277\372\277\003\277\374\024)\277\004\016E\277\240=8\277\244\310\366\276!\345\225\277U;9>\362;q\275\203*\373\276\010\r\247\276\271B\034\277x\\\304\276)1\300\276\215\0258\277\251\253g\276\002@\256\275\252 \n\277\315Dt\276FL\006\277\245]\001\277\372^\266\276\256a\243\2768+\233\276\276\267\232\276\014B\213\276\276o\321\275\263\274r\277Q\247\025\2769q\006\277k\270\004>4\356\350>^\321\334\276\307)\004\277\202\214\344\276\212\037\"\277\215\233\002\277\302:\025\277T\317\204\277\r\206\257\276c\032v\277\275:\035\277G\226\360\276\210$\001\277\022\337\202\277J\372\030\277\303\357r\276*\3508\27566\245\276\312\262\335\276\362\354\034\2772\240\364=\352yh\277Rv3\276\257\232&=\214w#\277|\345\214>\023\227\\\277\351m\027\2773\"\200\277\314 \'\276K\355b\276\364\221\037\2775\305<\277Bq\017\277\366\375\312\2769\264\345\276n\017\022\277F!M\277|\034\326\276\252w]\277\221\273\021\276\302\257\266\276Tr\241=Q\346\372\276/\260\353\276\235\216\336\276\014\272\324\276~(*\277\265\250\376\276\340\310\267\276#\366\326\276\263\224\021\277.\037H\277\010<m\277B9&\2762\360E\276M\0314\277$g\346\276\364\251}\276\257\210\375\275(\252b\276\177Z\224\276u\310\334<\211\010f\277\001\253\252\276|#\203\276\247\234\365\276\025m\233\276\035R\363\275|S\370=\013r$\277\354M\r\277\007\035\242\276\346\3304\277\316\310\365\276\335\002\351\276S])=v\203\202\277\341\211M\277l\352\016\277\244\006\001\277\0003,\275n\207A\2774h\236=H&<;\242\032\220\276\327\005\244\276\201\0230\275\377=\374\275K\375\335\276:/\360\276\300\036J\277\000\357S>\335R:\277p\366\315\276n\204%\277\264\324(\277!\017\251>\2429\033\277d\255\304\276(\262$\277\305\2018?|wZ\277\323\203\026\277\234\264\025?\207/\035>\2318(\277\215a$\277\010\316Q\276\034q\023\2777\033\312\275\307b$\2774\365\030\276p\200??4U\r\277e\236\034\274\254\240)?#q\t=\240\005\032>\005\363\371>\032\0161\277\010\332K>\331\006\266\275 \276\253>\000\231c\276\271\372W>f\325\023\276\002\212+\276}\347y\277\200\370\361>\240\376\360\276\251\332[\277\256\345e\277\tS\020\277%\252\324\276\236\025\210\277HX\027\277Y#d=\264\3245\276\302\214)\276\035\246\262\276\242\373\370\275Y\365I>N\202-\277HZ\272\275\204\333\206\276\304\203S\277\327\351\030\277G\355\312\276\226\033\007\277\325\2558>\350\273\314\276\r\241\n\277\t\n\274\276\367\364\236\276\357r\231\275aU\327\276\321\240\221>@\007\003\276\300\347\246\276X2*\2771H?\277\023\226\222\276\022\277\026\2777\000\r\277\337\"\317\276 \244\r\277jJ\257\276#d\211\276\330\342/\276\337\016\213\277\270\232\266>\355\252\321\276F\265^\277rV\004\277\377\366I\277y\017y\277u~\\\277\271iv\277\rH4\277&\360\241;\344\023\223\276@\244\221\276x\370\r\277i{S\277+~8\277\207\016\274\276T+\266=TdG\2772\321T\277"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Reshape"
  input: "transformer/residual/residual6/conv1/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/residual/residual6/conv1/InstanceNorm/mul"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/residual/residual6/conv1/InstanceNorm/Sum"
  input: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims"
  input: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/residual/residual6/conv1/InstanceNorm/moments/normalize/mean"
  input: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/residual/residual6/conv1/InstanceNorm/ExpandDims_1"
  input: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/mul_1"
  input: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/Relu_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/Relu_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/Relu_eightbit_reshape_transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1"
  op: "Reshape"
  input: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/Relu_eightbit_min_transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1"
  op: "Min"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_reshape_transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/Relu_eightbit_max_transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1"
  op: "Max"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_reshape_transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/Relu_eightbit_quantize_transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1"
  op: "QuantizeV2"
  input: "transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_min_transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_max_transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/Relu_eightbit_quantized"
  op: "QuantizedRelu"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_quantize_transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_quantize_transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1:1"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_quantize_transformer/residual/residual6/conv1/InstanceNorm/batchnorm/add_1:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual6/conv1/Relu"
  op: "Dequantize"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_quantized"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_quantized:1"
  input: "transformer/residual/residual6/conv1/Relu_eightbit_quantized:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/MirrorPad_1/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/MirrorPad_1"
  op: "MirrorPad"
  input: "transformer/residual/residual6/conv1/Relu"
  input: "transformer/residual/residual6/MirrorPad_1/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "x\211\221\252\177z\220a\235l\\u\210\203\177{\210w\223\205kx\214Y\203\211\264l\217\214k\215\242\241~o1\212\205m\220\233\303\203\203\177\201\177\206P\206\232NU\244\223~\230m\250\216\263\201}\201\207\226\231\202m\216\206]Yi|\222_\211\217\201\207u\224\217\230\207t\226\217\200}\202v\201\201\215\233o\177z\205\177w\236\220\224\241\201\210\232~\204i\201j\216{re\177\224\210\215\212\212lwzr\217d\205\200\236\227\202\200vx\201yt~\224\214\241\235z\225\200\210\220\212z\205gZ\220\202\241{x\217\226\203s\224\220\206u\240m\230\226m\207\211\211\207\200\177q\230\177r|\215\202\211r\210\200t\263\202\214\243qx\220\204\177\211\233~\177Z~\224\255y\224\2051u\205\203yw\216k{\205\227\244o_\200\215|\206y\244\321\241\237y\213\246\216n\206\252u\222t\202\200\211u\263\234y\214{|\210g\211\201udrqtnv\236r\205\216qph\214~_\273\211i|z\222q\237v{qw\213\212\220\211m\211\200\204\212\235u\252\212\200\253\220ew\203\200\215\212\207mxr}\211z\240\204e|\202\234\217`\213\247|u\217}x\223\204w\202\213z\212sw\217\215|\212p\234\226\202\214\227xd\210\202|\241\211s\216\204\203\220\206\224\177\243\201\216\220\205\232\207\222\211\207|\224\234\206\203w\231q\216{\204\223\205\226\211\245\223\230\177dr{\233\224}\224y\201p\224\233\222oz|n\211\201\244\227|\205\201\204c|\203y\211\233\226|\226\200\206|\210\213\200b\202\204kM{\255j\210\210c\200\204\213k\207{\201z\213z\240\214\222\226\204\177}\223\215\222t\211n\177\220\217}\215\214\204\202\200~\222\213\274pp\213k\215Tp\212u\227\207\217\241u\224o~\202\213W\202\203\224{\201zd\203|\221\202y\200\201:\205\224\227z\221u{\231\206z}m\211\222|t\201\200[\222\205{vv\201\207\213\205\224\211\214\206\223\207tw\220\213\214s\222\207\215\210x\205zgu\217m\212t\213\177xy\224\204p\203\212_\223m~\205w|\200v\215\210y\204\203\232s\202\216\202y\202f\241\216c\200\201\177{\205}\221\205\177\225\233}j\213\223\213z\213\214\206pW\210\212\225\213\211|\210\200\211\207y\216\237}\177\216w\230hh\245{\210\223s\244x\223\257\207dd\214\236\215\211w\203\211\207w\233\220fs[|}\265\201\241\212|\207`uyy\237m\221\224\226\212\225\224\234\231s\223\232n\212p\202\200~y\227\204z\216\207}}p\207\230\215\223\213\220\214\226\223\213~\210\210p\202\201s\213\222\203\203\177d\233\204p\216{\212ruirw\213\216\215\213{~\206\206|\201\210\177js}\202t|n\222d\211\223\200\210h~f\244qbz\216\251y\211\216\212\230\212{~\266M\177\214\252{\212\211u\232\200s|\254\235\230pxeZ\230\216\242ut\216\203\215u\212\223\223xt}y\237\212\242\222\210\200v\177\216\226\255ld\220\221yjo\240l\201\215\202\242yj\311j_r\217\204\215u\224\212\215\236v\201\221z\224v\222\200\226\234nhz\225\217u\225\213\221\202\233}x\217\232\220vn\213[{\207m\211w~\212~\221x\232\212~f\207\206v\200\245\200\207\200\227}\213\206|\217\177\230\213\203\220\235|\254\210~\230ylp\226\217\202\256~\206\235rT\210g\217\201\231r\205tZ\220\202k}i~\216\214\221nu\206{\240\203\242~\213\216yb{\232\223\220k}\250\205\265\213\221q\250\211u\260\205x\222\204\207\224\212\221\202x\201\220b\252wk\206ek\217~pp\301\221\222\252\220\241j\247\224\207\200\213\215\231\205z\203y\221sf\177\212\177\216}\215n\217\224}|\203q\177\207\247v\211\217q\205\227\212\222tW|\205\201\216x\245\215\213\240r\207\207o\210\216rl\206\216\201\210r\225\240\245\216\220\234xrt\203l\256\240[\245ty\243\226m\227\177\202d\251\231\215\215\222\234\250j\222\261\205\251\205\202l\225\210\211\220b\203yq{\252}v\212ts\201\216\203\224~\202\201jG\210{t\245}\220~\211rww~|v\221n\214\217m\234\265mk\226i\210\227}}\211\233toz\267\225_\246\235r~\206\177\217\220~\241\261m\206^\206{o\234\210\232\216\217vy\230\206\216\221\205\300\203\214\215g\222h\177\234\205\207\201\207k\202\200\264}\222n\203d\200\231t\315B\211u\212t\202\254m\217\204\177zh\177\215\206\212\231\205\225\245\203\223\200\200\211\213wr\211i\230\234v\214\234\204\214\210\215\214\220~s\215y\200\204m}u\202s~\220\213v\234\224a\230\226\236q\223\231t\204}\234k\223\213q\202\243\205\210\204\227\201\203\216p\222\214u\206\212\221\200l\203}rx\211\221zio\215m}}z}qch\206X\234\244\246\230th\232\315\212\232s\232B\223\200\220\206\177\231\246\213\206\253\222w\313\214||\220\206\203\231\217|\206\177\207\217vx\214x\214U\200r\261\231\204|\203\200t\212n\205\223\202\275n}?\221_K\245\230\262qWw\223\206\2126\224\235ko\377\202u\220w\314m\217\225y\225y\247]\212\206\227\222z\225f\235w~Iq\214\226\216\203\217t\203\230s\202u\240\217\177y\203|\227v~r\226\223f\271R\230\177pq\244\226x\221\214\202\205\235lrmz\225\217\226oi_\220\235\211\234bz\213w\223r\207\225m\215\216\241\237d\201\230\177|\212\177\201\206\201\215\203\202|i\207i\262d\224{\235\253\202\244i}\225\222f~y\221qv\222\205\220\200\230\225u\202a{\217\227zy\177\226\213\216l\210\215tx\177\201\210\203ny\205\212\205v\201\230\204\206\205\210u\247\217\232\234\207\241\200\200\215\234\222c\232~y\232\212\220\205\177j\205\203n\213v\224svo\207\212|l\177w\203\203\200\240\233\203|h\226fo\207\201\212\241\206\210z\222\221\205\215\224\203wv\245uy\237by\207pp\210^\240z\216v\177\204\217u\216\212\212\213p\213e\227\212~\231u\214tp]\201\200}qw\225d\217\230\220\245\205\202g\231\221\202j\204\211\242p\234y\245\210\226\214\226wg\231g\244\241\217ldlsy\254\217w\252\221~\210\204\177\200~\210]b\220}x\222\234\254\\rv]\266\221f\232js\177|\246\204\226|b\205\227\215r\216h\224\222\216\207\214\213\204t\252|\214tfny\203\213\214n\220\177\205|\231\203|\217\226\202\222\206\\h\216\222\236\224\204u\225\177\200\204os\203t\210t\177\236\241\222h\200g}\223\212\225\234v\215vzx\227\210\206\235\177rp\232\215\222\222\217\203hai\257\212j\203\216b\224\200\200ho\201l\227s\212\211\241rp\177ju\177\200\227X}{zw\236s\203\205\227y\214\210x\216\220\215\212\210\222\221}\221\215uj\204x\211\206s\216h\214\212Uy\217\237\244\210{xU\217q\241xO\225Vkp~\254r\200`\2106pu\\v`J\240\222\207\227\200\232\213\202\177\231e\203\205\211ze\262\305\203\272\224i{\177\213\270\211\212\221\214\234n\222uqy\227\205|v}\212yr\203\207x\275t[|c\251z\226\216zw[\216{u_j\202\205\215pr\226\222\224\177{\232z^\236\200\237\231wk\227\211\210t\221y\202\212\234\214v\200\231\204~\212\204\234\215e\206c\237ydt\200\210\201{~k\214\222rr\233Tt\216\301o\212\236l\236\225\232s\205\205\201\177x\241{\274\225v\216\223\207\230{~u\210j\205\210\211\214t\226\204\233s\207\205x\221z\203}\235\213q\201^~\216w\231}\214\202\210\231\215\224~\201\210\214\204y\215\221\177\201\201\205\212\222\202\203zi\211w\210\212u\226^\204\225\201\231i\223xvmsq\213~\241\242\211~\200\253\201\205\246xu\221uur\234\220\225m\231xy\232\212\237l\232\203m\202\213\255`\220\215\206\220\177\237x\200s\201\207\225\204p{\222x\202a\205\222\215\231\205\201\200\214\230\211{|y~\217\205{\224\222r\202w\214m\235\206tt\201\234w\215\224\213\255m\220\204\204\220~\226\215\202\207\220\177\224}\204\212\212c\211\217y\202g\235\220\251\217\216\236\207t\207\235\\\211\230c\202\232\202\206{f\221\216\200\250\211\212rf\207|\200{m\215\233z\235z\212z\211\201\214\226\216{\177\210|\210\210\211v~\201\214q\200\217\205\217\210\225\201\203q\230\233p\177~t|\204\206}\263\206|\210c\221\220q\223\207\206\236\327~\216}\177{z\231\207\247\206v\217z\213w\323~\204\236joj^\227yB\236\220i\216\202\216\216\206\227{\213\217}\200\244\217\217\177\204\205\225oo|\201\177\212\205s\177gg\213{}\232\245\207`G\205\216\205oq\243y\237\202\225\305\221]usX\214\226\224w\202T\264\236\220\216\216u\200}w\202\224\233\216\210\203`s|s\246y\200\245~\211\177\210\215\205\247\246}ptzt\214{\206\221{\217\200\206\217\206b\232\212\214\201tw\200\212uq\221y|\201|iw\215W\207}\231z\203\216\253\214j\216W\214tt}f{\200r~\200\210\215\213z\235_\200\217\247wt\221i\205\222niv\223\230\237\206\202yr\225\227\221\236\203\211\223\232\237}\242\207{\214\204\221\214\251\214\217\177\206yr\220\204p\227\204ywui\177\216\220\213\215a\210\211zw\217|f\216\177u\226\203\236\200y\240\207\225\212\222\203ukX\202\203\216b\200\215\223r\241\223pz\214s\214\201}|r\215_qx\223x\203\232y\201\201\206~x\230\237\205~vu\215\206~\200\242|\202\226}\203\204\220|r\217zkntt\213|\203t\222\210\214q\233\211~\230~sz\244\214\216\211|\210{|c\205k\224|u|o\272x\177{\234\227\\n\201\206\212i\216\213\200\216\217u\226\223\206\202\213~\206\223m\200z\212\201{}\177\206t~\201\200\224\210\240\210\202|\231{\202z\201m\177\202\201nq\201\207w\204\204z\225o_n\227\252o\242Z{\253\225\213\217\230\230~\225t\241s\244\231\211ndtbj\205\225t\204t\221\211t\250\204\233\241\177\225yz\200z\211n\240\207\211\234\220\210}n\213~\216\227\222\201f\227\253\224|nvep\207\202\217\232\222\217wq\177\211\201\207\216dtm\250|\215q\221\207io\220\233\240v\260\226\223ixp\206\222\227\225c\177\234\210\230yh~x\224\244s\\]\207\216\215\204_\210Z\177\205dd\177\256\225]x\236\230\222[\234xo\223f\204jw\203vo\213\202u\206\206mO\177v}a\224\202y\222\220\260\217\224b\264s\202\225\200m\203\360\233\214{y\254\265Xiy\226o\214\202\216\224}\212zo\244\200\216bx\216\211\230\254\213\200\214\204\200z\201\226j\244~\210\231\211\217\213x\214\211\177rmt|\211u\210\210\217\217v\217\207{\203k\177\231\200Vw|}\204p\257\222\201{\214}\203\231\210\203\222\221\210\236\224|\225\207\225\223\216z\206m\223vuq\215\223\214\212\202\212\215\200\231f\232\207t}\206\200\205\204\202~\210u\202\204\225m\221\214\224\201\201\206|s\263\240j`)\215\232\200\202\261\272^md\206\227\225D\212\211M]\235\252\203\227i\227\241\256\225|z\226\222\233p\242h\206kpm\247\207}\224x\232\216\235oy\216X\203~g\204\205vmm\200\201\212mm\211\200\222~\215\247\215\202\211\214v\223\210\201\201w\215\234\230\201\232\251|\216~\232\227|\220o\215x{{\252\231\204\227{ri\200~\230\236\221\212\226~\226x\216\217\206x\221\225Odx\205|e\214\207va\206\\\220d\201\207\217\226\200ng>\206\234y\261\201o\215{\177Z\202\221\213v\235\235\225\207\253y3\256\206\202\216f\206\206x\177w}\221\240\222\207vs~\242\202ey\237h~\211\240{\227\207\200\214~\215\244\223\225{\212\234\227py\224j\220|\205\201~\202\223\210x~\212fg\214\221\231\262u\221~Z|\257\257\236\210]\202\203\214\212YZ\\\222n\200b\222\240\210z\266x}r\206j}\203\2537\204u\224\207Z\202\242z\201u\226a\205\233\243\223zUz\206X\211\213|\245\234\201\224wd\250\200\233x\232\205\225\207\233\215h\244\215s\217v\220{z~\225\211ky\227\213k\234\217u\204\213\233v{z\225\237\201\215z\216\240x\210e\250l\247\215\211{\201f\200\226\216\232u\207~\225\235\226\221`\212\221\232{\210}\222\253\217i{~\212f\177\222\225e\224{{\222z\244\225`\200l\213f\212\204\216\201\203~\221\254\233nv\211\220ll\217\211]U~\224\212\214\221\227\222\235ksw\202r^\236\211\217mtX\214u\207yfq\275\217\236q\211\225z|v\212taw\230z\245xj\227Y\206x|\202\216\243\212\205\214x\231g]\204\225Z\220\223\227\222\177woq\203\220[\177t\215I\223\204\227\203\241\227\216\202\220\205\201\204\202\222\201{\207\203t\201\230\205\206\211\215\222w\212\217\207\215q\230\203\213\202\240\216\210\220\204i\230\205\241x\206q\204\201_\206}\210\215z\212\207\221\223\202\215o}\216l\233|\205\214q\201\177\217\207\224\223|\207\204\201}u\211\232\222y\220\221i\230\200\242\224kxv\224mr\213\211\245\217\200\231v\215z\212|\212~y\177\243\203\201\233iv\177\205\202\234~ll\210\203\240\211_\233p\207v\210v\223\217kg\267txj\222\210\240\223l\234\203\212\220\203yu\222\202\211|\220\215v\203y\207\217\214\210r\205\215\221\240\201\217\212\177\231l\255|v\205\205\222\220[qq\202\211\213\202\247\203wzo}o\203\211\213\231p\205\203\213\222\204\240\221\200czx{\215||vt\211~r{\224\211\213m}\241\201\220z\210\217ff\212w|\210\202\206Iz\203\241\213C\205[\212m\\d\220\242\222\200\211{\231w7y\2417ro\310ur\206`\223\205ns\222\202\222utif\236\214\222~\177\222\214ir|t\222xw\214\207\204\225v\213\254\215\205\224\233s\227o\210\226\252|v\204\273\245r\250\244\213\227\201\222Uzt\224\247\221\224b\247\221\227}{~w\214wz\204\221\223sg\214\203xa\206\220qr\233\234\201\217\206\206tn\202\205rv\200\231k\204r\203\216\230\202\206\211\203\230\242\237\213Z\210y\215\251\200e\223I|\204\210\203\214\211y\215\202\231z\211~\225\213\247\213\207u\201\201h\227\261\212\222{\203\207\210\246\255\237z\207\225\222\211\177tn\207\200\210\210{\200\215ku\210\213p\217\215\212\201y|\227\245\237\245{\203\207\222\220\203\206\217\216yc}\221\210u\212\222\251\232i\227|~\206xqv~yy\253\221z\205\225\226\232\301\234\216\226\234\212u\212\205\216\177\213\205\212\223\213|\220\214\200}\203\206\205\216\207\206\215\217p\231\202\204~x\223\201\217zg\202\220\212x|\233t\205z{\221|o\212\200\203}y\215\204\201y\200\220\227\226\211z\277\204xw\241|\203\177us\240\220]\177\215\201\214\223d\201\211s\224rl|\216K{wXzk\205\222\213\226Y\204h\201z\247\224z\235ua\211\213\320y\243s\215hB\202}\210\226}isy{p|\204\216\232oP\205\244p\254\274td\233\226\207\242\220j\225\202urj\225\202^\340tqr\207\225\213w\215`qj\227d{\177\211sT\215\205\260p\216\224S~\200kT~v~\214\215[}\220v\215\203s\261r`XH\233\247e_\206\203\223\264\300\227u\205\213y.|\230\234v~d\200\224\213\211\211\203\201\224u\245\201k\207\204\201g{s\244\240\225\237\237\206}\212\213\241sy\254\215\232u\245`z\236s\232\250\227|w\\\177\200`\257bfu\236^w[\227\254vfM\200ko\177a\220\204\250P\214\177\230|z\215\256\236t\235q\201\212u\243\216ia}\257W\237\215\222\200\205\214\221|l\240\205\215\201\212\230\000hx\241\237\242R\201\245{z\220\206w\177jl|\037\202gt\226\214\230\206\202qw\211\225~xjtE\235}\213\202\225\217\230uz\177s\207\226\227\220n\302|\207o_s\205m}\263Y\220\202q\232\212R\205\211QT\270\237U\226w\266\236\246e\213\225p\277s\206\226z\205\222\213o\231ry@w\232\230\213t\215{|\224\202l\200\217\207~zf\205o\256o\206k\256\236]\245\211s{\223d}wrx@\305~\206\223\225\251Vu,\211\231\247\217\236c~\206_\230\206\206\226\230\214x\227\226\242}{\271\202\204\215\177t\223\211\213\242|~uy\213\222\233\225r\222]q\220\200\210\255\242o\200`\217\205q\235e\214pyfm\204\207\216rlM|}\236y}\230u\200\245ys~\203eL~q\202arx\224\257\215\207\241\200\203Y\242\245sv\270Y\224y\235\2047\253\203\216xi\211\210\211zl\226\215\201q\261wlz\253}\210\232\212\204`\210\245\274\236ZzkxUz\177\242\215\210aprx\221\203\220\220bst\241eh\212d\262^\213is\204\242wv\201\265\226g\325\220rmh^bco\207\241\211\235\230\212\177\224\214\246\205\224{>xU\212\242\210_|\211mTOm\263{lujd\224\234\206\211\253a\204nm\253\221h\315\224\236Pc\234y\202\200\230N\210}\206\255\227N\224\207?r\213hu\244\215\200~\230h\206k\203\223\226\200\220\215\210\215wz\227\236\212|~n\226\231f\214\222X\206\202\221{~\217g\213~i\215\202\201\225m\202\205\207j~\177\210\231\231\203\264\244\213\223\210\255ht\223\200\221z\211}\213h\221\233\230\223\177|mqo\206\255\211\216xpzkbm\240]{\245st\204\202\251\206\230\217\205m\225j\213y\244onw\201\224\262\201J|u\227m~\200+r\237\203us\201\227\203\214\202h\203\177}\226\211\220\200e\213w\214\226\213\211\245yg\200\201\222\251\230U\221\202x\177o\234\202\217\213wz\256\216\227\300sz\237i\205\261\225\205:\201\320\263\201v\232rQ\211\241{\213v\215\206\253\223\232~S^ve\221\211c\254\205l\245\240\251Y-\241xt\304\230V\227\252}{uj\200\216[q\210|w\212\206}\203r\217~q\233\246k\216vz\202}\201|\203\207\220\177s\243\214~\220\246\225\213}z\227\205y\221\236\256\177l\203\204\225\221\215xul\204zvwqz\232\206\250\204\207r\216\236\204\203\205l\217r\216\207\205\207\204\214{\204y\200\213\206t}\216d\220\230\211\223\213\210s\213\202\225w\217\210\202\204\203\207d\264\221\224\211\221\212\211|}o\201\177}\202\215\212w\211~\205y\211m\226{\200\200\205\202\201\212wX\205\203y}\217\205\212\211fxu\246\202~\200\216{c\203o\223\206v\242\213\214\215l\216z\206\206\202\213|dn\204\213s\206\225\205kyuz{v\200\223\217\207|\245\217\205\221\202a\231\224\202z\231\254\216P\202\214\217\205s}s\200\211z\203\206\246y\220\224O\202\232\222~\210|{\216gpl\217ti\227\220yW{w\231}\227vr\210n\177|p\212\215\211b\266~t\204t\233\211\235j\211s\247\237p\217\241x\202\212\225\207\246ts\220uo\221\201\234\222\206\217\205m\206\250\241a}\227{\234}\213\250vw\233\252\217\242v\204\177\231n\200\214[\232\223w\222\212\232\210t\201\204\205\205\212\230\204\206xj\177g\214\205{u\211\212\177\216a|\213gz\210~\232u\203`\205\210\223K\206\202\205\211o\205\213oq\214~\177\217\265\223}|W\234\217g\234\203eXWu\216j\221\243\271\226\204v[\305\231\204\216\227r\255{\210\222\233\213}\210\222\231\246z\233\200tt\211{\241h\206z\202\226\204xu\213\261\206e\206g]\220u\204gTyp\201\227\232\217nx{yRpb\204n\224\231X\225\200\236w\216f_\231\202{\212\204\203kt^\233\207\207zq{o\202\201{\241\214}\211qv}\200\246{~\241v\231|\213\224|\252\261\177r~z\203\226|}\200m\213\206\245\177\231\224uv\226\303\220v\231\205\200\202\235\201\205~\223\216j\200\220qs\210\177\205\212\234\224O\223d\201\221\211\203\202\251t{\207\214\224u}\223\210Y\234\213\241\215}~p\211\243p\214a\202\212\276\266\233\232q|\210\211\211z\216\227\200z\200\201\212\206\231\237t\213s\210\217\230\206\222l\216rg\242zijpfv{\252\235rde\264g\214\216p}\240yyh\223\206\227\215\260\226\236Z\247\214nd\215\236gya\235\220\216S\235uw}~Tra\203h\215~\204dp\207b\233\221mttp]z\227\220\217\202l\215\214\216z\200\264ya\216o\221}\202em\205gu\226j\201\221\202zz\220\216\215\245\204ww|rt\200jT\222\201\223\217\200}\216\211\224\227\222o\220o\226\206\205\232zms{\204|kuu\200fo|u\202\216\177\221q\224\223\230\237\300q\220\230\242|\177\177jsk\205\216\221\220\206w\242\216\234\177z\215UqX\\zr\177|nr\230\214~\246J\224\232\233kx\215\203\241j\213\256\250v^\212Y\253q\217\230\212\\}zm\215}\224\214\230e\210\210u\240\205\224\235\215\222\200}y\210\235\200\217\207\226\204\210\201\212|\213y\203\233\210\201~y\235\217sm\207V\177\230\202\223\177\211\205\216hs\204c\223\203dpt\223|\205\200\220\222\200\211\200\212\235\207\233\237y\204\233\205`\206y\207n\227\202v\210\207\206\205\234\243~\223\244r\234\201\210\226\206\303Wy\207mp\212\265jg^v\260\246)\227\215F]\241U`u\222\216\207\216{\202\241ssh\200j\211\210\241\213\213ypa\272\221t\221\272\253m\204t\205\301\213y\201y\222d\214i\221\234z\205\225c\216\225|\211\266zn{\244\237m\226\207\234\233\212\223:q\211\220\205xx\221{u\204\217or\225\236\217q\210t\226\241|\227\213\201\205x\217~h\205z\223\203\217\242k\225\207\230xv\214\205q~\206\230\234\203\202\214\223\207\231\221\177\207\214\210\207y\211\205k\206\203\236f\204q\216\211{\225\201\205\215d\242wnwz~\210\202\204w|ym{\244j\203\215\256~\203\226x~\305\253\222T!\205\222\211\223\317\310}S~\204\230\241f\210~o0{\257\214\223I\263\210\251nd{rt\217\177\254\201n{}_\211Zu\205\271\210{\210\213\263n\203\221\224\202x{\222X|\211\223\201\216\205\214\205\250\205\226\202\223V\203\205\220\222\220{\250\207\216\231\214\215\233\232{\213\177\205\211\217\202}\201s\203s\240\216\201{\203\203}r\201\212\200\233wv\204\214\204\203\206\220\203\226\226qZ\204{\246\215\216\202`\211\231\206ybe\314\235~\226jN|x-s\236\212\200\237q\254p\205u\257\200d\242\205t\222\200\243\213ml\216\215l\177\221n\207\202gw\207q\211{\212up\211m\250\244n\211\243\224\204k\211kiv\233\201\205\223\215\222\215m\205\221\222\202\177k\230\202\205|}e\211\214\242qzr\213\221\232\222\246\243g\202qw\225|\243\236\214\210\245\240\203\233\221\213un\215evkx\215\244\207i{\210\247Lo\204\246\245\214\200\226\214\226s\216j\225u\212\223sC\203xXqdx\202\206v\213t\206\241\226\236xs\214x\223s~t~\235\206{w\223\217\200\202\216\215\200\177{\222\203\203zu\211\206\211\216pyyu\202\242\206{\203\216w\220\177\210\221\213\212\215\202j\223\210\203\204x\203\207\231r\230\207\177\206\204y\205\212z\204~\232\201\202\203\177\203\177u\224\222\224\201\204iy\244\225\210}\203\226i\231\203\233\200\226\215\221\202\214\213\203ovuM\206\207sWt\257m\207\205\206\215z\211\201j\226n\230~\216\220\213|\212smj\242\260tcfj\241\200{n\242q\236\205\225\214~|\250p\200\231\200kgg\202\213~\201\221\202\211s{\241ud|\221\222~{\240\202r\221\207\214\214z\232\203t\203\221\223g~\226\231\212x\207y\204\230t\207\207\206\214\201~\217}\213y\216\207n\201\211\200\212\210\202\214\225\207\224\217\225\207\203\237\205\204\205\213~~|}t\217qz\177rz\200\241\202w\202\215zwoqz\206\220\200\226\201\213\217~\224\205\207zx\204\211\220\237\200ry\224v\226\211\234\207~rm\217r\203\234x\207\202\210\207{\205`\205{\177\203zz\212w{\207Thw\214\210\213{\203vt\205\203\203~t\227wS\212\227~}pl\217\177\221|\215t\207\231\221r\206\242\233n\212\210\210\177w\233\206\200\212\224\207t\217v\237b\204\177\207\235\220\221}\203\226x\203\200\207\211\227\224\177\206rk\203\205x\214\203\206\177u\202\201\206\212\205\211\223w\224z\204z\204w}}gy\222{\203\203n\201x\215y{\214\214\226\205\214\202m\212g\215\200\207qT\200m\214\200\212\216hg\217\251\202l\211tul{w\213v|^}\200u\234\246_k\\\200{\240gu\205\231\216\216p\207\230\177\225q\227]\203\233{\203h\204\217\220jpym\243`w\207~\226\227\177{\237w\240\222v\212\212_\236\246\217\214\202|\263s\233\206{\235{Z\224\211Qx\213\255\205\237\223\204\203^\202z\177t\211v\225q\213\202nj\211\177\202\203\204\237\226x\235\215v\201\202\207u~\200r\223x\242z\215\212\177\244\177\262\206\207\215\246x{\224\177\216\236j\205~pa\243jpm\223\207\224\204\177\211\202nvt}\203\202t\223\207\204\202\202\211\177\213\230\211v\237\233z\225\257\201\210x\205\211o\205\216\225\216r\212\\\222\200\245po\203\241~\210r{\234\211\245|~\222~\205\222\223\232\202\212gx\203v\202\212\203\231Y\221\202\217\240\240\202\201xrx\213\212\227l\200\217\210pn\225\223t\244\215\217\227\232\205|\201\205\217x\231yv\214~\202\216\215\206\206\201v~\207\221x\211\232\213\223\177\216t\201\227\223\210vl\203\206\202\201\201\272\206v\177tz|\201\211\177\205jz\216\212\203k\227\213\235y}qX\253\210\206\263p{\204{c\215`\230p\226[\204\213t\257c\213\230\202v\207}\214s\206\242\177g\226|\206\230\215\222\225}}\177\267\226y\234\201|iyt\263\200\217\234\203wn}r\227\233no\202g\203\230\212\231jg\201\217\202}\230\214\211|\177\200{\204\223\226g\214{j\177\224\216\253yi\204y\215\225y\224\240\212d\204\244\217k{\212Y\206z]qv\222\226\204\177\222j\205\213e\177\177\203\224htq\217\221dy\217\262\214|v\206\216c|X\206r\204\207\205s\212|t\223\213r{c\206\204\201q|kk\232}\244\202\206\215\200fy\201x\252\263os~\203qv\205\227r\224h\204dr\213\232\226\204\206\200}o\203\216\222m\223\235h\226\242\232\202\235\231ktnz\232\241qi\177zo\220r\237j\213\204\230x\200v\203\201\207p\203\210\211u\215\220g\\q\213Z\212~s\221\251}\206\221^t\233yv\246}\243\221\201wf\212\255z\223\225\201{v\211\226\201p\210\225\221\211\240\210t\207\200\200p\201\212l]\216s\232{|\226\216\220i\224\250~z\201\202\201\264\214\212\217p\236\224\226\227\207\207v\203\224\220\236}\227nz\221rm\177\265f\204_v\210\213x\177\241\203\216o\240x\215\222bz\226\221q\220ttUj\206\220n\223\200\216\206\215\255h{\210\221u{y\204\202}\222g\202e\221\201\222\206\207\251\242\203s\223\214w\304Eot\221miy\254\255\221{\215\241\213j\236gm\223\213w\203z\215iy\205\226\217\201\237\221\244na\220\216\207\203\204\231\213el|\201p\200\201\214Ow\235|\201\253\210\220\211y\206\177b\216\200\230\221z\205v|{\213t\202\226\202td{\200\231\213y\227\216v\214\177\210|xy\206\234V\215\233\216\214m\214\226o\213\222\207e~\261\213\206\202\212q|\212h\200y\210\260f\241\224\201\223\224lX\226\211~y\226\221\222\203g\234\207\207s\254\214yxwy\177\215\223\211z\204\224}y{\243|o\207\177\202|\202\177\207\200u\207s\235\213\203t\220y\205vk\203\206f\201\237m\202\212\211\230\222u^\205\205}\201gk\215\212\240\224\266a\227pi\250\202q\242\207a\206\210i\216\210a\211bbt\213\203\213\263o\231\246v\202q\223\203wxtq\237\223{\215\206v\204\220\207\236w\226qu\234\226c\220\236\222\205\202~\206\230\205|uu\237y\207ll\203oz\234\201yr\222\213\203~k\234\222i\222\257|d{\201n\224w||\200\242toyyjkq\177\213\211\205\216n\205\241\230\234}\200\177}\220\202g\221yl\221\200\211\220\234\215\204z|~w\217\210\212\205\210\200\207q\200xd\214us\200\214\240\215~\213\211\201nW\221xz\204z\237\223\177\211\212h\223pt\213\223v\223i_~\215\222q\214\223{\223\211\244\213x\217\211x\205n\210\221t\202\212\200w\206\234\210\207\201\224\200\212n\210\225|n}s\\\201\222~\205\203i\225\235vm\263\224z\216\217\206`\217i\243\202\202\214\201\213\224\332\212\210\231\225\223\216\213_s\230\211\212\223Yy\254u\215\277\221\212\225\230\201\177\201\206u\204\230\237fm\222\232r\227\207\221\217\206\203r\214\210l`\237{\201x|h\222p\224{\237\207\213y\223\202\202U\221\234\227\206vs\214|\217\200\225\207m\177\210\206\204\233\201\204\201\220\220\220\204\210\210zqp|q\222\216\200p\211|\220\235v\202\203j\227g\227|q\201w\224\211\200\201\205sx{}\217W\223\241\242\212\207\221g\224\203\224\207\200\203\220{z\216w\277\222|\207\201\202\211\211\207i}utx\214\213w\215\203\223p\205W_{\231\204\224qo\200pM\214z\221\221gv\210\223u\215l\244xus\226v\211x|\210\210x\204\227\201\237\214g\203rw\221|\204\222~\232\205e\220\202\232pt\216\220y~\177l\177\223{\215s\203\211uz\211z\211\200\217\207\221om~\212v\230\214\202\211\205\205\202g\242\207\200s\201\211\202i}\207\207\202\225\201\202q\223\227o\223\200uj\206rlt\216\207\224\217t\237\204\226}\215roy\203\201\227^\177\234}k\233\206\214p\200\212\226\206\207\201v\177\217\216\217\200~yw\227\217\261\230l}c\177\222\254[\226\266\212\260o~\255\177u]\236~\235\217\233\177\240W\224\235q\246~\211\200xc\200o\177\231\205\212\200p~\204\201g{\235\220\237\212\230\207\202\243\226\202v\231t}\212k\177\243\207_\223r\211jn\206\243\223y\211\210|p\201w|\210\202t\202rW\203xa\226\203\221vzk\231~u\251\212\205\204\214\221o\213\215\211\221\232c\202}\211\216y\203\202\236{\233\203\222\203um\237\210\235i\212n\200\223\202\205\204\201x\222|\220u\210nw|be\221l\243\250\207\205pv\177\265\223mm\211\177u\220\200\210|{ob\177~x\210\212s\206\213d\216mz{\201\227ru\177x\201{\237\232v\214_s|\177\245{~\254\214\177z\212\213\200\252\262\210t\204}\216\223}\207\204\207vk\200\212y\205\201\203|{\220\224\203\232\215\203\211\203\255\177no~\223\221\203\206p\201|\243\256\207W\221r\202ym{n\216mm\202\204\205\233\222~s_\221\212\262p\227\213Y\214\233o\201x\220\206\227\235\205\237v\231\203\212zt\204\227v}\201\200\206\215\214\243|\227~}}z\215\207\216\224\204t\247\207v\221ssk\232\245\225\204vsm\204\211pt\211\223\220\203\227\206}\214\227\230y\221v\243\220`\224\206\211y\203\224\206\227\234fl\214{U\227l\205\214\202\204\233\214z\\\202{\200\202\212|\204\205w\211\201\217\205\206{\201k\226\222\207|\204\202t\231\200x\205tus\204}\214\203zqx\200qy\200~\217}\224\201n\211\211\207\205\210\210zy\227\220\210x~\204\204}\243u\222v\232\206\245\225\222\213iw\220\200o\205\211|y_\210\201\202\224\202\237x\213\213\211\223{\211\200\222\210\203\215\240\200\236r\204\233\207\210\226\177p\220\216\212\213\255\213\201u\214y\200\204}\204\225\240\223{\242`u\222\240c\177\215\221\214\234\223\223\204l\216\205\216\216y\212\214\213m\212\227\211{\203\217\217\235r\200x}\215\203\227s\201\217}\200\247ztm\215xz\201\240\207\237{\177\237\210}}t\213k\267\247y}mrd\207\210\202\210\232{\225{\200vo\217\202Yy\201\275o|\203~\220i\204\221\203\246\177o{\210Z\220y\200|~\212\214\221\257\203\225\206y\211\216\224\205yl\227\211\214\213~|\220y\205\210y\220\204\234\241\206\227\205\202\202\200\225\217\215by\235\220\217y\235\177n\237t\216\215\202\211\216d\200r\200w~{\247\207\224\206\225\210\177\210n\256w]\242\206\205z{z|rlw\221y\231cws\217\230r\203\230\212}m~\233\227\225\212\203\221\233t\177\216\230\201\203x\212\233tk\205\216wv\222|\232\207\202\224\213\210z\177\201\200h\213\230\226\240\211\210x\223\224x\217\177\217\212\213\177{uk\224\205\223\243\222z\225\215\232\233\204\201\220z\205\206\213~i\211\215x\205\214\203"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.99062359333
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.85652399063
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/convolution_eightbit_reshape_transformer/residual/residual6/MirrorPad_1"
  op: "Reshape"
  input: "transformer/residual/residual6/MirrorPad_1"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/convolution_eightbit_min_transformer/residual/residual6/MirrorPad_1"
  op: "Min"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_reshape_transformer/residual/residual6/MirrorPad_1"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/convolution_eightbit_max_transformer/residual/residual6/MirrorPad_1"
  op: "Max"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_reshape_transformer/residual/residual6/MirrorPad_1"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/convolution_eightbit_quantize_transformer/residual/residual6/MirrorPad_1"
  op: "QuantizeV2"
  input: "transformer/residual/residual6/MirrorPad_1"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_min_transformer/residual/residual6/MirrorPad_1"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_max_transformer/residual/residual6/MirrorPad_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_quantize_transformer/residual/residual6/MirrorPad_1"
  input: "transformer/residual/residual6/conv2/weights_quint8_const"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_quantize_transformer/residual/residual6/MirrorPad_1:1"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_quantize_transformer/residual/residual6/MirrorPad_1:2"
  input: "transformer/residual/residual6/conv2/weights_min"
  input: "transformer/residual/residual6/conv2/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_quantized_conv"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_quantized_conv:1"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_quantized_conv:2"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_requant_range:0"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/convolution"
  op: "Dequantize"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_requantize"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_requantize:1"
  input: "transformer/residual/residual6/conv2/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/residual/residual6/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/residual/residual6/conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/residual/residual6/conv2/convolution"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/normalize/Mul"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/normalize/variance"
  input: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1/shape"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "O_\334?\307\211\214?|\245\317?f(\314?{\216\031>\345\377t<\177q\225?\361\030\215\276\234n&?\306\374\252?\002<\243?\316\242\252?-\002J?\233\017\205?\332G\244?\343\001Q?P\310a?\207\004\273>P}\354>\031\236C?\353.\030?\271\202m?\230\264B?F\375$?\214\234O?`>6?\363,\365?8Z\375>\335[\230?\251\035\337>\371\332_?\244d\355?c\370\246?2\026\354?2\330\373?<\213c@\267\235\373?wq\242\277\017\024\250?\227$\262?\375\206\010@\035CU@\031\300\267?T\241\223?\334\241\n\277\364\316\205?\007\212\010@\335\321\206>\255\236\206>cX\"@CG\272>\022H\207?:m)@\362\273B>\312\"\214?\222{\327?.v)@\367\367\235?/\212r?\345>\364>\014\331\367?1/\332>\247\021\313?.\276\036@L\017\246>WR\216?t[\210?1s\376?2\325;\277O\001\\>\267\332\253?\341\350\313?c\301E?\2065\005@#\314\252?\"\t\244>j\030G?\026\\\337?\363\247\303?\203\021\352>\007\001\000@t2 ?\374\301\332\276\026\372\361?\000\213\202?\307s\272?/\336)?\375\303\213?\302\364\323?\231\315\205?\353\002\000@\377j\006\277\271\320\375?\243!\242>\2248\311?\335,\243?\003;\323?\004\262\022@\222\300i?O\342\302?\020Lx?\212?\000@}\345\332?\331\263\212?ed\373?D+\211?7\241\306?\"\361\263?\277\216\035@Y\255\272?\213\273\343?\236<&@\234\225\275?A\321\002@\260\321\230?+X\337?\210\360\276?\025\277\331?\000\230\330?\274\335\254?){\351?\326k\354?\345.\255?\207[\r@\323\t\317?w\372s?H\347\000@\214\222\200?\2650\323>\t\027a?\207\204\007@\313\010\334?n\3035?T\221\262?\025\241\202?\332\rj?\022\211\350?Y\334\274?c\026\334?\210\205\250>\024O\000@C|?@\202\014o?j\241\372?\006\271\335?_;\273>\213\035W@_\310\224?-=\022?\031\010\314>\377\336W?G:k?\"\334\214?\224hL?y\000\343?}[\325?\260\230\005@\254\340&?)\325\253?=?\361?k\254\233?\002$\265>2W\217?gD\275?.v\234>\227\252\036>;\230\027?\235\364\326?\240X{?\372\225\326?\013w\207?\343\360\017@\223j\005@yy\334?\346Up?z\362\001@\341&\261?\000 \262?|\370\254?\206\373\\?Q\370>?\302\376\244?\323\335[?y\341\233?1\366*?\026\340M?\264s\226?\272\204\227=!#y?\240\213\017@?\226Y?\356\014??\275Z!>\252k\351?f~\343?!1\t\277\000\360\323?2\220\320?*\024\352?\346k*\277\235\217\231?J\211\252?\254\212J?\353E\r\277&\215\232\2751r\266?-L\273?\206H3\2769[\353?\317xh?\317\001u\276`\273\360?\004C\205?\357\014=?\247\261\253?\310\264\372>e3\252?\r\351E?4\244\256>h^l>|\310\025@u\265\\>?@\005@\264\030\347?dxG?1\017\026@\230\005\346>\227\255\212?\313\334C?\274\227\213?$#\205?q\034\002@\276\033\237\276\302<\331?W\000\360?\371B\024@\032\316\340?\2504\013@D\334\263?\021\330\334\275,Y\301?i\233\273?\273\210G?\300\340v?\227\273W?\347\005\246?\317c\207?\230n\372?\210\024\226?\365\301Q?\246\376\203?\033ey?\034\002\362?\264\304g?\000\303$@\311A\365?}\253\301\276~<I?\310\247I?\037\360,@\323\t\230?\025<\277> :\006?5\026\250>\253\262B@04-@K\237\237?\244S\253\276\030\215\350?H\210\000@\006s\244?A\236^?\352\226/@\245\211\003?\271\250\034@U\332\021@\rf\t?\315\352\226>v\362\204>\237j\000?\244!\230?M\225\321?\303]W?\032T\362>\267\300\'@\220U\326?\002\327\331?c\321 @\334\271\362\276\210\240\340?g\245\277?#\r\014\277\"\247\247?\335\177I@\324\262\247?DMJ>\277o\376?\364_\212?\010\355\033?qh\014?\031\n\002@u\305\240?\221\002\002@]\347\324?\2542\332>\213\233\261?E\211\307?\337_\031@\t\203\233?\235\233\272?\032\260\305?:\275)?t+o?\236\220\240?\331e\227?\n\221\027\277\357\372\335?\222;\206?/\311x?\003}\t@\000\007o?\315\322\212>O\311\350?\362vu\276\364J\307\275\013\234\222<\204\r\032?\3441\r\276`\333W>2\300\236?4P\252?r\362\264?\023)\371?\361z\255?y\254\202?\020Z\343?\210\331\002@%g8>\344\255\000@\206\330\324?\314j\024?\335\340\261?;\207K?\364\302\037?\016\223\177?$\005}?\n\356=?\377<\234?\230\231\317?\261\271\006?\377\177\257?\365R\334?\363J8?\321`S?\013<<@Zi\361?\262\350\252?v\213\351\276\353\225t?~\322\034?\337\271\357?\317\304@@\"\213r?\024\370\262>f\314\262>\2703\366?\260\014q?\265\035\237?\001\372\224?\260\217]?\317F\277?\360m\005?\370\321O?h\371\"?\027B\324>\210\001\376>\\[\223?\216\364H?W\004\227?j\322\001?\225\377\027@\033.\277>_0\245?\252\370\316?#<\326?\260H*?\221\262\270?\003\344\313?\\\334\'\276\375\210\021?\016\010P?\3371k?\337j\223?\245\366\010@k(b?\307\363y?\014\205\213?h\220B?\371\376\244?I\013\213?y<\263?\260S\306=\033\262\206\276K\320:\276\222\300\242\276\0343\212?\232\034+>v?\214?6\001\241>\212\233\025?N\007\312?\022\033\237?\263\216\201?h\034A?J\267\003@X1\255?\'\014\220?(\344\303>B\266\032@\016\207\317>\023\322N?\037S`?\2479\230?\322\232]?\031P\324?\274ty?\001v\241?\220\355L?\356\332\322?\303\231\023@7d\352?\276\360\020@\270\355\026@\245<\217?\025M\356?\21288>d\334\213?\307\242%?\261g\327?\344\350\201?\367\376J?I\204\303?\321@(?[\177\237?\213\002\027@\342\3365?\351K\274?h\237\240?(;\220?hpE?6q\355?\241?B?h?\034\277=\270\235?s\337d?i\334\235?44m\274\270~\035@I\345\002@\306s\217>\242\321N>y\002\276?t\"\265?VB\246>i\r\254?\250\203\214:\314\277\234?\353p\264?\264\257\300=\214n>?\363\220\252>UFZ?\324\360\214?\224Z\221?\206\021\035@\312?8?\275\305A@\360\375\227>\255\350\207?\036\004\275?^U\210?\377\253\313?\365\323\216?\353BE@:\307\215>\217\313\t?\304\'\'?s\362\204?\205\007f?F\240\367?|.\355?\025\020\361>(~\241?\251e @\\\t!@\353\371\034?p\026U@\344f\243?_\230\257?\324\205\t@e\177\300?`\377\307\275\321\327\226>g\025\213?\340i\376?H\231\365?\230\305\367?\016\235\235?\236\251\032@\300\221\307?\313\371#@\203\3221@\004\360\243?e\260\246?A\274\020@\2676e?\252\333\231>\363\333-?\315\332G?e_\352?\234H\302<\277\212\367?\372\022\\?f\006\007@\332\030=?n/W?\267/\307?\211\347^?\316\342:>tx\350=\357O9?\2310k?\022\025\213>\361\037\025@\347b\000?p \210?!\200\361>qle?\332\302`?\177fi?b\345\316?\250G\266?\340W\240?\027Y\250?;\357#@\260\3171?\377R\014@\356\377\231<\325\237\213@O`-@\327\n\335?\233Y\230?\002\1775@\241\2008?{\024z\275Y\377\347?\271J\014@\252RF@%\364\313?\026A @^v\005@\025(\261?\004fh@\225}\004@\345\335M@M\240<@)\240c@\332\243\032@r\211W?v<\263?\232\231\026@\262<\256?\270\322\025@\002\360\003@\n\206e?FU\376?|\374\266\276\370\026\322?[(\237?\257V\000@\nv\013?\250\265\201\276<0\266?\331l\025@\261\025\243>.N*@e\352\265?\177\362*?\n\340\265>\357\263\273?im%@\257\302\315>\205\247\323?a>\t@hh\201?\252\243\320?\246\221\222?\357\266\271?\342s\276>\\\217\236?)\305\016@I\020\300?\253x\277\276\217m\262\277a\372\357?/C7\276\027xd?v-\317?=\355\226\276\232?\213>\3055B@\037\240\'?\322\303\010@\310\2259=c\256T?(\031\274?\312\244\303?1\356\254?v\353\234?\010\304Y?\325\373\266>dSe>\253c\022@&\201$@[6\325?c\322\322>E@\351?\313\013#@\177\366\230?\376Ar>\005\300\251?\332\325\201?,\020\204?_\202~?I\336F?\375B\003\275!\356\016@\242\347\224?\221L^?[\214S?\035i\216?Q\231\226?\342\037\177?H\317\203?\247\351\303>\020\235\231?\206\rH?\017\257\336?\006B\010?\207\222\006@\322\371[?*\203\303?\2716\017@T\021\234?\335*U?t\034\002@s \232?\276A\372>\177\026\265?\205\257\217?\220\005c?\311\201\323?y\216\371?\346\263\013@h4W?qh\237>\240j\002@h\215Y?\275\204\365?\267\r\236\277L\352!@\265\256m?\251\021\242?\031\214\267?\266\017\343?\371V\246?-\365\363?\230\003H=\210~\226?O\001\254?\266A\346?\2132\346?$\215\246?\005?\360?\223\3621@%\364\270?\360\324\256?\025\022n?PgQ?\222i\004@Qs\254?\t\273\031@\010\337\005@\346\003\375?\2448\037?!\316\363?1\326\276?m\264\257?\024L\232?\3219+?[\203\014@\223\001#?4\214\300?L%\366?\311}\372=\214\010\263?M\376\331?>\030\000@\301\216B?\333\241\213\2776C\316?\330\244\266?\000\306R@\272 \324?n\302s?b)\037?}\254\037\277\306\025\223?0-\334?\352g\002@\342\306\367?\270\362Q?\315B\331?\034\375\005?\360\315\356?\344m\003?\301a\210?\032\227\025@6\274\344?D3\317?\256#\336?\225\346\244<\234\305\375?\211\265]?)\001\373?\001\354\306?\206$\267\275\343\014\251?\263s\177?\020\314\005@\270zI>\341\365\022\275ej\306?0\302\216?$\220\017?\375M\016@\340\361\337?\301\267\214?\257\311\315?\r\270\362?\357\021\034?3\374\n>T\230\243?X\276+>\317\261\313?@\003M?4wZ?\377\026\003?c\207?>G\227\340>I\326\277?,x)?\200#S@P\017\r=\345\356\311?\375v(?\356HZ?\002\350A?\354\331@\277x\326k?\332\024\213?2\343\024?\200\000\306?4\267\024@9\312\r?\320\330\273?\024\002\027@\257\345\302=\005\"d?\251\033\007@x?f?\357\r-@\303\033G?\312CA@M\367\202?\345jW?ey\036?\303\206\253?\256-\256?\370\013n?4\365\213?\317\265\201?\216\2258?\212\312\212>\016\220\234?\205o\316>\242\341\020@I\263)?\036o\371?X\310\230?\200\365$>\337\200g?%\220\366?\200v\355\275f\336\344>>=!@B1\210?\335\022\274>\236ei?\307d\233>\364\037l?cK\200?\\Z\322?\017\014\246?\215v\236?tp;@\321)\244?\020\333\002?\233\202,@\343\026\001@\000~U?\2104\360>s\222\270?\221\370\223=\373\376\212?\037\375\237?}\205\240?\326\037\326>\340\373\240?LH\272>\001\365\276?\201\273\237?"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_1"
  input: "transformer/residual/residual6/conv2/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/residual/residual6/conv2/InstanceNorm/mul_1"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Sum_1"
  input: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims_2"
  input: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/residual/residual6/conv2/convolution"
  input: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape/shape"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
        tensor_content: "7)J\276\370\216\327>\033\3607\276\n\332\325>~\260\362<\005\362\273>\256\377\227\2762\240\267\276zy\n\277r%\n\277\224X\035>v\261\352>I\213\223\274\nk\301\276\251\377\020\276B\027)\276\323_\214\276*z\303\276pgd\276L\301\317>\332\231\234\276\252q%\275\245\355\252\276l\323\003\277&\261 \276\255\356\272\276+\366\225\276\002\371\017>i\034(\276\321N\020\277\032\316\251\276\331\327*\270\256\322\025\276\013\200;>\034G\340<\271Y$>\315VK\275{\207b\274E\235\315\2752(B\276\235\035\303=\355\334\213\276\252\226\333\275q\274\313=\014\344\200\275\365A(=\t\276*>\273\010\355\275\310\315`<\225P\317\275\362\372\361\274\303P\360=\214&\312\275\250H\326=Z\326\270;\311F-\276z\036\266\275\177x\233\275^\3341>=\005u\275z\271\036\276\353\014\241\276s]\r\276\355B\226\2752~\224\2756=\266=2\267\253\275b\221f<\371\375A=\351e$\276=\301\004>hm\262\275E\224\030>L\t\253\2735\257d\276\234\n\022\276\363\007B\275\337\365\270<|\233\311\275\177\001_=\304\217\257=\010^\207\275i\312%>bS\320\275\224\370\n\274l\351\037\274\311\270G>\341\'\250\275R\005\240=o~)>Q\236Y>\016\031o\276\242g\317<n\3362=\"\3741<\204\266\306=\250\233\347<\276\257\024\276q\372\323=\305\252\217\275I@T>\277\246\252:\267\025\317=\014\025j\275g\233\275>`\261\264\274\022\312z\276\033\321G\276\247\251W\275\266\316\326=\027\273\223\275GZP\276#\014\032=\215.=>\230\364\305\275\255\317\217\275\303\020w>C\356\350=rU\217;\201\207N=\007=\370=\372\305\206=\004\263s=\211\340\'\2761\271.\274\027@\373=\340c\216\275\345j\202=\221\307\276<\337\377D=\001\270Y\276\302\005\246\272\264\323w\276\362\230\036>,nH\275f\rH\275\352\220\r\276\241.\374<\035\201=>\274\023\002\276\371\312>\276^`\267\275By+\276d1`>\251\210\361=8\334\220\276\260\030\031>E\324\'\276\346\nF\276\017\322\216\276F\206\353=-f==R\312|<\003P\030\275=H\243\275\223\233\001>\332\3372>\237L\205=\230\031\010>\241\372\275\276?\n\\>\007\027f\276\375\232\257\276\360^\220\276\321\373\3309\373m\245>y\004^>\211\214\037>\345jI\275W\004\256>l./>CFs\276\320\237G\276\275\177\217\276\241\241\230\276\022\234A>j]o\276\227ip\275\233.\027\276\031\024\267\276T,\003>WvC\276\241\2528\274Whg>\250e\024>\037\207\211>\245G \276\303Jy=\243\201\243>\324\360\203>\020N\256>F\001\242\275\222\317\222\275\351-\327\275\217\352\300=\204\t<\276(\006\200>\036\016\254\275\377\002d>\313D\250\274\310\375\312>\244-\266=j\263\275\276\333+T\276\2375m\276a#\315\275\333\347o>\330\3309\276\2506e\276\214a\023=\035\311\007\276l\350c>8ns>\203\300\350=3\021\210\275i\360\007\274\302\212\025>9\256a=\270\321\001>I\275\266\276\315\270\233\274p\370\262\275\370\016\250\275\325\377\262>\216\340\264>\030\r\262=X@\224\275>X\t\276\336\362\023\275\322\351\250\275\377\326\233=\270\242,>d\377\001\276\"^\002>t\2616>\220\214\324<}4F>\306(\205\276\251S8\276\3342\006>\203\264\275\275\314\247Y>\371\363\266\275Fp\203>\235\304W\275$\347x=\371\274R;\274\227\214>S@\272=\350W\276=\301_\267\276z\217\234>\204x\206\274\230\203\035\276\233Wd>v\320\t\276\020\016(=)\030\357=t\254\025>\373\022@\275\366\274\312=\016b!\276#c\277=\341\242\016\275\375J\024>\331.\033\275\2637\003\273}0\000>6\316&\276}\267\017>P\350\372=\217\275\010\276\312l\272<*\247\266<\235N^=#\372\262=b\203M=\021\307\262\275\242ek\275\331\206\022\276bA\312\275\332\243+\275AI~\2752\211\n\275\r\326\"\276a\312p\275\016\260g\276k\317\222=o\tb\276\313S)\276\267\301O>\210\333\221>\\P\267<h\314K>\220E\215\276B\200\036=\333th\276\001,f\276\302\321\307=\352[\370=\304\236`;U?\031\275\311\027\007>\255\016\275<\024\302\260\276V\362t=\202\344\334=\364\205A>\277y\325=\0220\310<dJ\244\276+\362\377\275tu\231\276#\"\245\2765\373\246=\301\212\372\275\020\303X\276\2136/\276\232\314\314\275\033qw=R\206:\276X\372L>\242\301\360<\351\0351>iD\342\274WZ\371=\251\307l=\316\360M\276\372\335\030\276\370\374O\2762\203o=9\346\004>O\233\200\275\302F\353=\375\006\312\275Y|\177\275\004|\277=\212gS\276n\247\306\272\014-\232\275\212\374\3379V \002\276\347\236\351\275G\275\'\276 \217\367<$Y+=HF\\\274`\373\034>,A\270<\034g\247\275\310\377.\276\314\354\260=\3572->S\363\246\274+\366 >j\206\264\275r\037G\275\023\0213\276\006(\275<\321\025C=\323\242b>h\305\321=\227Q\004>\367F\371=\305,\316\274\275\240+\275\310\031\242\275\234\260\027\276\204\3271=n\032\r=\217\267\213\275ZRD>9?\032\275!I\025\276\330\302\202\275\354}Y\274\304}\210\2756F\354=\004E\354\275JiM>\262\276M\275\376\246r>\355\035\030\276\355\315(\275.\243T<%G\214\275d\375\377=\346\243\t\276 \025\210>\235\001n\276\311\"\026\276\271\251\001>\n\024\005>M\035\326=\330&\300:\005m\025\275\274_\007>\224\"8\275]\032H>o5(\276\t\r\241\275\003Xc>\236g\267\274\016\210c>2\310\235=iE\007>\206\316\000:$\260\216=\302Av\275\304\211\254;\305 \261\275\000\313\211<\016\277\013\276\"i\000=\311\320\013<\271\rC>\024\273\322<k`\326\276 d1>e\221\247\2767w\320>PU\312=\346\035q>\003\362\355>\027,h\275\232\277\242\273\034]\244\276\277T\022>\331\230$>\021\343t=\005\334\226\2757d\363\276\r\262\371\275.l\021?\2204\334\276\004\203\201\275\021-\333>N\212\305>7\346\227\276\000\277\360>\2113\366>\306%}>\206\003\237\276\331\241a\276\246H\365=\271u(\276\374\214+>`\232\276>0\357\233\276k?\002>\376^\221>\304W\264>\303\243\003>\017\267j\275\032.\306\273\n\344I\276\255F\t<\260b\220\276t\343\241\275_Ll=%\005N\276\307sV>R\256\207=\355>~\276\225V\234\275J\267\233=(.\215\275\250|,\274\005\020M\275\021\233\037\276\201\2734\275\3103t\276cY\363\275R\223\240\275\035[\322\273\212c\036\276U\2603\275\222\340\336<pJ\323\276\227$\200\275\250\341]<H\267\017>\327\221V\276\373\207\030\276en\257\274\332]z\276\320\356\200>5\214\002=\t\260\365\274\331\301m=\007\215W<E#\341\276\216\311$>\212\347\200\275\177\372\014>\267f\336=\375%\210\274\2339J\276\023p|=M\006r>\032\"\030\276\356w.=\026\352\205>0\025\233\275BV\301=_\344\027>\316\344B\276\301\254!\276\257\362u>&&\031\275\316\224\200=7/\375=\205\'\001\276u\335\232>\t{\251=\003\257T=\315\"\210=\250[\214\276\313\202\031>#\377p\276\336\242\222>^\324\267\275\024F;\276\005\351\317\275z@\n\276\221<\222>Sr\251>\007_S\276na\371=\254J\007\276\030&&\274\n\226\013>SW$=\306\225U\276\032\034/>\021\261B\276\333\245+\275\027c=>>y\215>\362ue\2741V(\276IU\356\275\"\304r\276\302\210\t>,L\322\275\336\256\207>\323\037\257>\2460\323>\3405\232\275#\221I\276=\372\241\276\033\373\207\276B\224\257\275\205\372\234\276>=\245\274(\271\366>\226o\215>\273\006\314>\036\237\224>2\354\231\275\213\211\216>\237\216\'>\007\320\245>2\307\360>\300Y2\276\321\t$>6\222\250\276\360\334\210\276M5\247\276\300\270\321\276T\2432>\340\024o<f\271\312\276\352\212\240\276\341\250\254\276\220;!\276#\204\014>\226\221\263<\361\267\360<-\256\261=\364\000\024<D\213r=\302\031\366\273\024o&=\374qN\275\312\001\303<\t\254a\275\242\225\260=z\226\244\275&r\266\275\212\205L\274\377\357%=*\342\2229\264\003\264=\361\014U<\006\\z\274[w\t>Sv\242=A\3235\276\271\202\236=\0205\351<\215\237\323;\256\245Y\276\246lA>\246=\354\273~\303V\276\302k\006=\030-H=\"D\n\276u\320\313=\232=C\276\276\304\217=\230I\"=\300C\221>^\030\253\274D\213\"\276\263i<\275\330\030a\275\005\243\357\274\007\003\371<\002\225\266\276\326\362v\276X\215\244=\355\267\376\275fWy\276d\344<\276.GG\276\203$\225\275\351\201\r>\3044&\276\227\357o=y\372\204=\035\263\261\275\331\362\211=\226\257\202\275\277\316\222\274\264\317w=W\035\226=\253\023\322\275\345\261\007>j\350M>\017\324\352\275\022i\211\275\315\001\374\275=\360O=\177<\202>\233%\007>k\236u=\241\n\223\275\351\254\000=\253\035\240\275\205\0161\275\327\310\346=\262\013\276\275\352T\250\272\370\220c=w(#\2764\245\330\2743y\021;a\266@=\272\301s=\007\373\251=\341\007\201\276\342{h=\314\344Y=\306s:\275\376n\205\276?\376\022>#-\214=_\336\000\276*\302\304=:N\354\2758j\344=Z*\272=Icn\274\265q\003\276\033v\371\276\232-[\276\2001\216\274_\336\t>f&\200=\223`\241=KS,>^\265\224=<\312p>\304\372->B\372\270\275\336\265\222>~\313\210>X\273\023>K\037\271>\027n\024>\256\253F\276\3131\005=\236\273f>\177\373\020\274\240\246\210<m\353*\2750\321\253\274\331\253L>A\266\013<-\033\302=\\YU=pe\233\276\343\302\345>|j\220=an\234\276\367\246_\276\226@3\275$\274\032\276b\"\237>\2258@=\310G\034>\005\213\020>ct\210\275A\224\222\2765\355\246\276.\010T=\023\200\206=\033v\203\27423\022>\231\223\267\274\303\351K\274?1\225\276\264\364\023</~(\276D\220{=\017G\305=R9\253>\032s\253>\032\316\273\276\372\301_\274\002\355\223>\224<2\275u\002\202=B8\377=\rV\262\276\216\035E>c\337\\<\356\'\252>\371O\'\275(8]>e\346\263\276\302:\205\276\236\227\256\276\335\367\236\276\200t\333>^Q[>\023\001\271=\346\307\034\275\264)\036\276\021j\326=B\372\000\276\n3\234\276\216RM\275\326mJ\274\305\276\261\276\311\221n\276+\t\210>\023\213{\276aj\014\277\205(c\276\355\241~>\313fo>\tzJ\276\375\273\233>\355o\374\274\001\265\321\274\036:)\276\022\202F\276\034\340\212>4H\003>6s\205>\274c7>\335\214\267\276l\362\000>\324\250\244\275\036\222k\275\335\255\005>\302\336\357=\330E\214>\330\277\243\276W\317\000\276\027\272S\276\322\376\235\276_\334\243=e\337\260\276L\365\263>\234E\227<DX\214\274sy\330\275Ov\004>\243\310\224\276PS\203\276\207Nz>M\351\216=\016\2260\276\344B\213>\307\016q>\231|\352=,w\322\275\007\357p\275\021c\367\272J\216\325<w\001\014>6\221\017>\263\376V\275\373\354\305=4\202\353\275\350\346\316=r\3205\276l\326\361=\204\235\260>:\343\271\275Z\271\002\276\021\202Y\275D\236S\276\336t\244=\330^\345\275[2\023>\330\367\322=8\302;>m\345\007\276\327\363\\=_\212 =:mu\2769\333\212;\323\246\013\276\241(\246\275(\027\377\275\257\002\023>\006\222\'>"
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Reshape"
  input: "transformer/residual/residual6/conv2/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/residual/residual6/conv2/InstanceNorm/mul"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/residual/residual6/conv2/InstanceNorm/Sum"
  input: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims"
  input: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/residual/residual6/conv2/InstanceNorm/moments/normalize/mean"
  input: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/residual/residual6/conv2/InstanceNorm/ExpandDims_1"
  input: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/mul_1"
  input: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/residual/residual6/add"
  op: "Add"
  input: "transformer/residual/residual5/add"
  input: "transformer/residual/residual6/conv2/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/Shape"
  op: "Shape"
  input: "transformer/residual/residual6/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/strided_slice"
  op: "StridedSlice"
  input: "transformer/expand/conv1/Shape"
  input: "transformer/expand/conv1/strided_slice/stack"
  input: "transformer/expand/conv1/strided_slice/stack_1"
  input: "transformer/expand/conv1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transformer/expand/conv1/mul"
  op: "Mul"
  input: "transformer/expand/conv1/mul/x"
  input: "transformer/expand/conv1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/strided_slice_1"
  op: "StridedSlice"
  input: "transformer/expand/conv1/Shape"
  input: "transformer/expand/conv1/strided_slice_1/stack"
  input: "transformer/expand/conv1/strided_slice_1/stack_1"
  input: "transformer/expand/conv1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transformer/expand/conv1/mul_1"
  op: "Mul"
  input: "transformer/expand/conv1/mul_1/x"
  input: "transformer/expand/conv1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv1/ResizeNearestNeighbor/size"
  op: "Pack"
  input: "transformer/expand/conv1/mul"
  input: "transformer/expand/conv1/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "transformer/expand/conv1/ResizeNearestNeighbor"
  op: "ResizeNearestNeighbor"
  input: "transformer/residual/residual6/add"
  input: "transformer/expand/conv1/ResizeNearestNeighbor/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv1/MirrorPad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/MirrorPad"
  op: "MirrorPad"
  input: "transformer/expand/conv1/ResizeNearestNeighbor"
  input: "transformer/expand/conv1/MirrorPad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 8
          }
        }
        tensor_content: "qc\210m\215IxWt^G\200qN^ou[{h]\204\204uH{YnK~^Ug{wq[w~tz~\177]gKhsk$\207f`i~\212lZrsf_\177vZ\203tg\214^}q`qGq\201ij`g{A_\177KNgg\217\231k}`ao^~\"f\211yD(ZZko|t\\cd6}}Sa\216\201\225ppDHV@hlDqF\222bs`g\212\221Znvu\177\210i}amcVy_p|nSjnj`q\263nXy\177t\202W\276d`cr\206ngAdfUb\204\177s\214h}V\203kTr\225lono]_Aurz_rr\\z_ol\221g`f\223YuwD@thh^|c~QTbsLrsbsfmr[\204sxhZ\214Gve>q\202\245sUkd\214Ewp\177FE\200iqcbT\234c srKT\\\201[vb\240TaZqcuQg\220|s\232{=VBZwj2s\203Ujw{pUaVkZ{cM\214v7\233^~K~=a\203QRlgrkJe\204AJh\200\222\205g\215\\ClwlMUso^U0\203z\220\224\177dezeq[|TjXVaztpQROs\177c\227\215nK,wx\245v_|\222\203kLWsLo[\216R\227mc\251\245H2kK\254}^T\244\237\231o\232abQboH\206*\213[__caoYne>p\203^W\213\223hgz\200T@V\210ids{WphWX\220gk`jT_q=LnIrp\214{zljWj@oykr~q\217e`]Pma>\250zq\247\204pSlZ\203_\203C|s~RP`p\201lI\200Qp\206\202evoe`_kV\231pbZfpfcm\202f\200\210oz\\FhnhN~m_asuc\206cSwXe[u[j[wU\201\204n\204sm|Lulmm5^\214UBi\213\214js\210dBfyp1AopCZ\224ubXfj>Hn\211^duTNp.{\204sbZT[Ygr|mO\205\177my\235`mdy[z\206=n\232dPX{Mt\226CxhlhZ\225o^Vq\210\227b\222^nOmsXQd\212`moyMrkeIMhWnb\200RaN\200\200]JYjl`e{qpeZR\224o\202flKbbvU`_FYrF\213mfev;y\177dbRez[`fDT\214E\205av\205\205Q8}\\ud\241,sG_vi\207\214kXXA\217Gc~r-LOwvSuwaex\206s\224j\216\200kP\210t\217K^Ym\212\030\203`\\Q\217q\234tlq^^hY:\204K\211}kcjrDZ7\223G\205xh{GprKRu]\221\223\206_vR\227~\205opgk]TgVl\\jnb\205\201%{\035]\\\227wkoX\\;_K3;\215cw\236\251t>xpn|\205e`z7g~\177ormN\204W^zfYo{YV\231Rec|f\201oo\\^\203pSjj7Oz]ku\217z\216lsJmwxG\231qV\\i\200z[]psaq\177;wLYr\206nWt\206i\202zYCkhhUZmUWbUoR\177rSp`my_j=JR\\\315N_BW[z{}V_e\221:raoMar~r_PYNqVPb\\\215W\206f\177\200\226AMs\205Wyc\200\223x9\213\201w4QWg|3wkPY\213n\237eq[iZo\1777aG\202\221s~cpK`YXL{etiKntILi_|\220\213rjB\206\255W\227ZYb\201\224@B\201?Rh\236\317k\223p`\226\225[E[.LdUUiJH\202vzlaLR\200y\205eulw\207\034s}JTpf\033R\212>\203\243\232KAZq\215U`g\220\206\211\213bLknY6dU\027Vbv|wxvYckAal\204/\203oWY\177\251\204B<md`\205\2216g_>h\201q^lLg`xMdt9\261RW\234APOMaLavT|\234\221VvC \037t\225\213xb|MT\225|shcSxE\207qt]I\215~vS?\206Be\377:n\215{eeXd]\214MkhbYd{tufXdo\2300DbikI|>]U\201{Z\205\231SqUsyy@\\\211ny\200PLni=Ja\212ksk7fy\\Erjjg\212}e@m\202zclu[Pp9|\223_\233z:Ak\236lp\213z>DWgQQSWPWpFn>DUj\247|\204\202i\203df\177\177Wb-Dxrlc\242Zuq\226fJ\\pVgczXo\211phjvZcPrIVLg\177~ZR`\200BADpj\207Bx@dL\202\204|FY>iX|\203]i]_T\227uxqVaeh\202^MGzf#zY>a[hMm\201dnw\216jTNOOeu6\214hW\226wV]sYjZ\2353hZMo\204w]yZ\221bs~m\221k`p`rix\\ua_\207\224\201\201l\206\210]xacpc_c\\n;\210g]U\212Yh\207yfe\\`cdU\215m\226s\220\200\201tqd~X`phq>qoOM|g\214qbl{Ab\206lxa4\202tUsdsP\204kPeS2w\177Yf\201hpaXszccSwhOmdw_Ut_\226OZpx\226i~Y[}U`p\202Y\212[g@\210xuz\211b\204WiFq\\\211s6\235\211\213[\\#Z{mem\202g\210^rWgly>\227jR`jd_LtW^b\200oYu^^_\210kxy\211_ute@z\244H\205PQ_\212rMrM[lYfnm`]`@?qn6i{hpjpAxXW`\222AeaJUiM~rYuso\211\000\243mtGem`\225m\177@b\215\204sagm\232y[wvhNbvzx7\212\233MX\223hyepyV[m\230_Ohk\233\214\247sh}f\212rlWapdCbrPGcc\177\211NzrOr\253m\213O>s\204|\240T^rN{\207\237X\210t\213j\231ad\214(N&U\204\205w\212;q\034NM]\226zn\242EPo\215\250[d\207>\203QfT\200RZa\227U\\Z\177\213sly\\xuo{vXM\215scgF\005Uc\210ks\202mZa[Zhr\226H\202\215Td\220~\211.R\215Zb\241yDh[Iw\212l\203oJePu[gv\232?\210\260HS\241\275UiD5{Sq\220~JF`-:\216H\226Kp\246\037[\217\202ssX_eX{\200XqVlx^CRp~\203sHe\204\215vR_\177Z}Ox|_ti{b{rtumyaOtRcN~oaU\215l\203x\210aQi\205{wchK\234\206\206>f~_hq\204rgpk5lu_?oij\177j|lSg\201~e{XmZ{^njfzxXVF}lTfyFZx~UQS[KrmWl}@\177T\212nfw`gk{v\206d\201tH\210uj~Y\201?Xe\211|z\2064w}p@Snc}\\`wwmlc/LxpZDfdxdZR\202}\201asir`\211_\177@fcqX\204aGr]Is\220mVl\\dwk\205d^xWi|rc\212gUxIV\201eis_sJj\\}\203CheV\\`mx~"
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.32110095024
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.88251054287
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/convolution_eightbit_reshape_transformer/expand/conv1/MirrorPad"
  op: "Reshape"
  input: "transformer/expand/conv1/MirrorPad"
  input: "transformer/expand/conv1/conv/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/convolution_eightbit_min_transformer/expand/conv1/MirrorPad"
  op: "Min"
  input: "transformer/expand/conv1/conv/convolution_eightbit_reshape_transformer/expand/conv1/MirrorPad"
  input: "transformer/expand/conv1/conv/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/convolution_eightbit_max_transformer/expand/conv1/MirrorPad"
  op: "Max"
  input: "transformer/expand/conv1/conv/convolution_eightbit_reshape_transformer/expand/conv1/MirrorPad"
  input: "transformer/expand/conv1/conv/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/convolution_eightbit_quantize_transformer/expand/conv1/MirrorPad"
  op: "QuantizeV2"
  input: "transformer/expand/conv1/MirrorPad"
  input: "transformer/expand/conv1/conv/convolution_eightbit_min_transformer/expand/conv1/MirrorPad"
  input: "transformer/expand/conv1/conv/convolution_eightbit_max_transformer/expand/conv1/MirrorPad"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/expand/conv1/conv/convolution_eightbit_quantize_transformer/expand/conv1/MirrorPad"
  input: "transformer/expand/conv1/conv/weights_quint8_const"
  input: "transformer/expand/conv1/conv/convolution_eightbit_quantize_transformer/expand/conv1/MirrorPad:1"
  input: "transformer/expand/conv1/conv/convolution_eightbit_quantize_transformer/expand/conv1/MirrorPad:2"
  input: "transformer/expand/conv1/conv/weights_min"
  input: "transformer/expand/conv1/conv/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/expand/conv1/conv/convolution_eightbit_quantized_conv"
  input: "transformer/expand/conv1/conv/convolution_eightbit_quantized_conv:1"
  input: "transformer/expand/conv1/conv/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/expand/conv1/conv/convolution_eightbit_quantized_conv"
  input: "transformer/expand/conv1/conv/convolution_eightbit_quantized_conv:1"
  input: "transformer/expand/conv1/conv/convolution_eightbit_quantized_conv:2"
  input: "transformer/expand/conv1/conv/convolution_eightbit_requant_range:0"
  input: "transformer/expand/conv1/conv/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/convolution"
  op: "Dequantize"
  input: "transformer/expand/conv1/conv/convolution_eightbit_requantize"
  input: "transformer/expand/conv1/conv/convolution_eightbit_requantize:1"
  input: "transformer/expand/conv1/conv/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/expand/conv1/conv/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/expand/conv1/conv/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/expand/conv1/conv/convolution"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/normalize/Mul"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/normalize/variance"
  input: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1/shape"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\224\223\200?\214\333X?\351\345\241?\201c\220?\017\004\200?&\352*? \330\226?\023w\261?\232\235\350>\261\245\202?\026.\'?\354<P?\212|\335?\022ZF?\326\032\005?\262\315\237?\3609|?\033\322o?\004\025\\?\313\221\320?&+2?D\277\350>1\252;?\373i\237?\322\276\206?\004\316\244?\007\021#?\210\213#?\3217\314>\230<u?\366\022\266?mh\272?g\203\247?:\266x?\210\275C?\350X\216?\223\341j?\024ZH?!rA?\\*\266?)\356\213?!\363\223?LD@?\347qx?\227\004\031?\216\355m?5\365\246?\362\336\210?7\326;?h\364~?P\006J?\rd\262?=\244\222?\025~u>O\276\360>\350s\333?d+\230?GfP?\237\006\232?\220\201\020?@\271\001?\310j\004?<(<?L\220P?\223\277m?\214\211o?P[\260>\001\337\360?\372\220b?\306\022P?\230mS?\271z\301?\3201`?^\022\260?\353\030\202>\357\320\242?\225K\236?\344\365>?H`d?\271\377\\?\302\362/?\345|\026?\316\344\032?\234\206\344?\332\032\341>\316\257\013>\013\025\227?\014\243\227?~5`?\310\354`?\345J\247>\tP\357?\374\361+?+\025>?]\365\344>n\310\266?\260\252\202?m\224V?d\234\331?\177t=?<\244\264?\177\266\333>$\374Z?\010\203(?\300\327\244?\210\334\210?\351\311\022?S\"\207?\333\010D?/\346S?\271=l?\323L\327?\244\334q?\303s\256?1{/?\243\342\235?\256\361S?V\271\204>[\3266?\232\t\270?E\272\260?\375$8?\320\356\240>\270O\276?\277\356R?,%\264?\\x\221>o\306\321?\210\'X?X\232\210?\370\3011?n\375\302?yU>?\'^i?JIl?\255g\241?\300\347t?\305\232\243?<\251\214?>\336\241?n\'*?3\354\242?\245T ?(<\221?\370\232\014?\277>\271?k\\\034?\325R\351?\233)\215?\366\277\264>_a\312>\235w\260? \013Y?_\020\365>Yz\260>J/\000@I\347\316>\354\344\361>\373)\277>\001\217\274?\n\326\n?\237Yj?\357\224&?\322.G?\361o!?\3304*?\000\344\207?\3461\257?\351t\224?t;\210?)\346~?\230\320V?\231\010\t?\237\003\203?D\227{?&\206\277?\027\'l?r.\217?`w\317>@&\254?\023\352\355>\3656\207>Y\333\234?F\n\235?u\025r?\002\361\302?\010\365\231?\321\302\353>u\252\360>Kp\020?\024\252??&\376r?\211[~?\274\2339?\032\344\370>\341}\313?\361\276{?gCO?\341\033[?\355\254\306?\277\262\240?\210\247\\?\267\365\365>X\246\320?[\020\022?!d.?\226\237U?cL\243?"
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_1"
  input: "transformer/expand/conv1/conv/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/expand/conv1/conv/InstanceNorm/mul_1"
  input: "transformer/expand/conv1/conv/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/expand/conv1/conv/InstanceNorm/Sum_1"
  input: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims_2"
  input: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/expand/conv1/conv/convolution"
  input: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape/shape"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\226(\007\277\r0\237=\260\277\236>:\237\357>F\246\007\276H\203\021>\214\371y\274#\036G\275\026a\313\276T\031\274=s\343\231>\035`\250>(\223\206?\264\001)\276\210\302\276\275<Rn\276\352\352Y\277\032\035\006?}\306\261?`\034F?\216=%\2753ip>T\354\220?X\205\223>\t\371\007>\257E\366\276\347\034x>}a\372<\025x\311>\030\224\005\277i\211\205\276\240\275\257\276\363|n\275]N\324\275j\220s?\344e\206>\305\262/?\2136\335\276\277@\267\276\335\351i>G\217\225=\345\264P\276B\021:?\223\350`\276]\262\360>s\033\035\2776)\210\275Q\321\257\275\243-6\2771S\250\276\300] =d\340\007?\335\306\233\277@\245\335\274\221\276\230>l\022,\277\002\337\t\276\313\225\351\276.e\020?\227\301\336\276\253\263\353\275W.\253>\200A\002@\307\020\001\274gX\345\276A\307K\275<\302\262>\374\254L?\351$\311>\355\235o>\211\353\262><UI\276\024\017\202\274I\315\027\277\241r\217?H\307\206>\327\t>\277O\341\'\277J\352\277>\200C\222?\212k\312\274VR\001\275\320\362\206?id=?\034\\\277\276\360\363\275>\331\216\312<\215\254\252\276\260\225y\277--\261>\002\"\333>w\004\216\276\307KK?*\303\320\276\330a\205\275\271p\253\276\307\210\267\2760\261\304=\n\261\351>(\313\220>VO+?\220\364i>\2444\177?\375w+?\242\330]\276\216\226\331\273\236\264\034?\215\242\243>\314\325t>SX7\277\273A0>B\270\247>\030\tX\276\344\313\214\276\306\016=?;\007z?\314t\262\276H\027\025?m%p=\262\253\264=\027\363\230\276\373?\274<\267\313\314>\374\232\266\276 \325U=\304o\340\276\317\273\337>\202\036\007\277\305\034\034?\335\324\215\276\221\253\313\276\333\373\354>`\003\225>\2713.\276\214\017\274>Cw\300\276\022j\271>\036\315,\275\365\314B?-5\230\276\002\242l\274w\366\031\277\007c\235>\\\325\256\276\344\272\313=o\226\300>)\206\204?\217)\351\276G=\306>\340\343\";\361\031\353=[\306\204?k\247\322\2768\315,\276eu\300>\330&)?\030X4\277\002U6\276z&\346>\327\3317\277\304\243%?^A\010\276\353\307W?n\250\236\276\035/<?\246OF\277\331^\216\276\355XY\277d\024\216\276[\224\325\2762\224\331>\362t9>C\261\025\276\363;\365\276g\271}\275\264\337\"\277\353\366\213\277-\014M>eY\022?\036\244\243?\311\220%>\211\325\214?\202\013\274\276\362\277+\276{B\351\2765.\006\276g\343\216?\037\336\353>\264\336\271\276\325[\006\275\013\351\030@\037/\230?\031M\243\276\025\032;\277\207\203\000?\317\345\236\277+\342&\277\323\306\363\276A\327\003=\204\334\033\277\332\204\013\277\204\361B\275k\366v?>\\\'\276)\220\316\273\370\201<\277\322\242\207\276\027\313h\276"
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/expand/conv1/conv/InstanceNorm/Reshape"
  input: "transformer/expand/conv1/conv/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/expand/conv1/conv/InstanceNorm/mul"
  input: "transformer/expand/conv1/conv/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/expand/conv1/conv/InstanceNorm/Sum"
  input: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims"
  input: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/expand/conv1/conv/InstanceNorm/moments/normalize/mean"
  input: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/expand/conv1/conv/InstanceNorm/ExpandDims_1"
  input: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/mul_1"
  input: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/Relu_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/Relu_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/Relu_eightbit_reshape_transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1"
  op: "Reshape"
  input: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1"
  input: "transformer/expand/conv1/conv/Relu_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/Relu_eightbit_min_transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1"
  op: "Min"
  input: "transformer/expand/conv1/conv/Relu_eightbit_reshape_transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1"
  input: "transformer/expand/conv1/conv/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/Relu_eightbit_max_transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1"
  op: "Max"
  input: "transformer/expand/conv1/conv/Relu_eightbit_reshape_transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1"
  input: "transformer/expand/conv1/conv/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/Relu_eightbit_quantize_transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1"
  op: "QuantizeV2"
  input: "transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1"
  input: "transformer/expand/conv1/conv/Relu_eightbit_min_transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1"
  input: "transformer/expand/conv1/conv/Relu_eightbit_max_transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/Relu_eightbit_quantized"
  op: "QuantizedRelu"
  input: "transformer/expand/conv1/conv/Relu_eightbit_quantize_transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1"
  input: "transformer/expand/conv1/conv/Relu_eightbit_quantize_transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1:1"
  input: "transformer/expand/conv1/conv/Relu_eightbit_quantize_transformer/expand/conv1/conv/InstanceNorm/batchnorm/add_1:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/expand/conv1/conv/Relu"
  op: "Dequantize"
  input: "transformer/expand/conv1/conv/Relu_eightbit_quantized"
  input: "transformer/expand/conv1/conv/Relu_eightbit_quantized:1"
  input: "transformer/expand/conv1/conv/Relu_eightbit_quantized:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv2/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/Shape"
  op: "Shape"
  input: "transformer/expand/conv1/conv/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/strided_slice"
  op: "StridedSlice"
  input: "transformer/expand/conv2/Shape"
  input: "transformer/expand/conv2/strided_slice/stack"
  input: "transformer/expand/conv2/strided_slice/stack_1"
  input: "transformer/expand/conv2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transformer/expand/conv2/mul"
  op: "Mul"
  input: "transformer/expand/conv2/mul/x"
  input: "transformer/expand/conv2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv2/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/strided_slice_1"
  op: "StridedSlice"
  input: "transformer/expand/conv2/Shape"
  input: "transformer/expand/conv2/strided_slice_1/stack"
  input: "transformer/expand/conv2/strided_slice_1/stack_1"
  input: "transformer/expand/conv2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transformer/expand/conv2/mul_1"
  op: "Mul"
  input: "transformer/expand/conv2/mul_1/x"
  input: "transformer/expand/conv2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv2/ResizeNearestNeighbor/size"
  op: "Pack"
  input: "transformer/expand/conv2/mul"
  input: "transformer/expand/conv2/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "transformer/expand/conv2/ResizeNearestNeighbor"
  op: "ResizeNearestNeighbor"
  input: "transformer/expand/conv1/conv/Relu"
  input: "transformer/expand/conv2/ResizeNearestNeighbor/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv2/MirrorPad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/MirrorPad"
  op: "MirrorPad"
  input: "transformer/expand/conv2/ResizeNearestNeighbor"
  input: "transformer/expand/conv2/MirrorPad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
        tensor_content: "o\216R\225g&\255\213\241\277\216\204L\207\212\351\317g\204\246\241i\250|\264\231~\201\377\201\222\214[\311U\236\215(\262\207\230\317\224\240K\233\243\210\223\232\215\225\217\204\244T\250\236w\217\316\206\233\323\230\212h\221\221\236\257\230\221\247\212\254\245\227\262\310k\244\233\271\224\207\234r\243\207z\216\267\216\277\335[\2147\237w0\270\224\232\342\244\210q\255x\226\332\232t\252\223\203\223\204\250\264r\202V\324\211\264>\2750\232\213D\312\212\221\356\257\230b\226\201(\257\210}\233\206\206\2164\236\271ic\026\255\202\227n\212?}z\227\314\222\216\275\247\224\333\223\215ly\244\216\302\227m\2143\241\227n;\305z\276=beP\224ps\260\247\243\303\253\230\250{\265\267\350\234~\261\222k\207\236\273\211R\257]\232}\300^\203@\247\204y\311\230\236\313\271\240\221\232\233l\322\\\207\242\213f\211F\253\230Q\207#rj\222g\236P\230`\306\320\232\224\250\264\223\355\230\214\276\235\223\227\313\234\211\211:\252\207c?\236\220\274\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.39194226265
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.975256979465
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/convolution_eightbit_reshape_transformer/expand/conv2/MirrorPad"
  op: "Reshape"
  input: "transformer/expand/conv2/MirrorPad"
  input: "transformer/expand/conv2/conv/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/convolution_eightbit_min_transformer/expand/conv2/MirrorPad"
  op: "Min"
  input: "transformer/expand/conv2/conv/convolution_eightbit_reshape_transformer/expand/conv2/MirrorPad"
  input: "transformer/expand/conv2/conv/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/convolution_eightbit_max_transformer/expand/conv2/MirrorPad"
  op: "Max"
  input: "transformer/expand/conv2/conv/convolution_eightbit_reshape_transformer/expand/conv2/MirrorPad"
  input: "transformer/expand/conv2/conv/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/convolution_eightbit_quantize_transformer/expand/conv2/MirrorPad"
  op: "QuantizeV2"
  input: "transformer/expand/conv2/MirrorPad"
  input: "transformer/expand/conv2/conv/convolution_eightbit_min_transformer/expand/conv2/MirrorPad"
  input: "transformer/expand/conv2/conv/convolution_eightbit_max_transformer/expand/conv2/MirrorPad"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/expand/conv2/conv/convolution_eightbit_quantize_transformer/expand/conv2/MirrorPad"
  input: "transformer/expand/conv2/conv/weights_quint8_const"
  input: "transformer/expand/conv2/conv/convolution_eightbit_quantize_transformer/expand/conv2/MirrorPad:1"
  input: "transformer/expand/conv2/conv/convolution_eightbit_quantize_transformer/expand/conv2/MirrorPad:2"
  input: "transformer/expand/conv2/conv/weights_min"
  input: "transformer/expand/conv2/conv/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/expand/conv2/conv/convolution_eightbit_quantized_conv"
  input: "transformer/expand/conv2/conv/convolution_eightbit_quantized_conv:1"
  input: "transformer/expand/conv2/conv/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/expand/conv2/conv/convolution_eightbit_quantized_conv"
  input: "transformer/expand/conv2/conv/convolution_eightbit_quantized_conv:1"
  input: "transformer/expand/conv2/conv/convolution_eightbit_quantized_conv:2"
  input: "transformer/expand/conv2/conv/convolution_eightbit_requant_range:0"
  input: "transformer/expand/conv2/conv/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/convolution"
  op: "Dequantize"
  input: "transformer/expand/conv2/conv/convolution_eightbit_requantize"
  input: "transformer/expand/conv2/conv/convolution_eightbit_requantize:1"
  input: "transformer/expand/conv2/conv/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/expand/conv2/conv/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/expand/conv2/conv/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/expand/conv2/conv/convolution"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/normalize/Mul"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/normalize/variance"
  input: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1/shape"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 4
          }
        }
        tensor_content: "gxZ?\2227\217?\206\2001?\250nb?\277[*?\371&\337?#\261\023>\234\0259?\311=\002?\2665\006@\303\030\305>\000b\301>\024O\217?x\263\217?\000\225\\?\336\210\241?\275$D?\277\365\250?\307\t\327>0\251N?0\360\221?\370\205\220?\016\213a? \230\215?G\2252?\223\035\240?\222C\251>o<_?R\2503?\251\010\233?\037\216\355>\023>[?\021\036\262?g\211\264?1\210\322>d\233\200?\326\016\330>\036/\362?~\266\243>nh\250>GZ\201?\232\212\202?\223\2212?bc^?J\177\016?D\232\324?\351\014k>\233zE?\242?y?\255\233\216?\014m\030?\320(q?\006\000\262?H\002\214?\032\362\273>c&\201?k\n\'?\350\022\354?\3500\313>\003_\t?\302\366\223?t\370\306?\004\377\257>|g:?2\351\233?s1\r?\344\335j?;\351\221?\211\342\246>r\017\234?1a\275>&So?r\002\372>\2245\004@g;\223>\354\334\222>\336\306\214?\230\250V?\216i\365>\364\034\311?\236|\035?~\2212?\377\3547?\302\tq?\223\002\336>\347\250\277?n\266\341>N\016[?\360|.?U\022\321?{\212\337>\306\352!?\216m\303>\016\372\000@\312\216\211>\002\340\211>\213GH?\242\235\301?\217\304\356>\005?\210?\341\212^?J\244\226?\016\270\331>\325\241h?"
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_1"
  input: "transformer/expand/conv2/conv/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/expand/conv2/conv/InstanceNorm/mul_1"
  input: "transformer/expand/conv2/conv/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/expand/conv2/conv/InstanceNorm/Sum_1"
  input: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims_2"
  input: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/expand/conv2/conv/convolution"
  input: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape/shape"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 4
          }
        }
        tensor_content: "\034M\370>\343\343\214>\373\245;>L@C?pJ\231>\363\214\330\276\276w\027>\220\273\320=qg\247>\025\355\225:\000\022\211>h\020\274>\377g\037=\236`\230>\333\366^\276\202Q\202>\225[\225=\r\324\025?\036\024\225>\214\321\031?\307\332\251>\255\224\347>>\372`\275\311\303\243>\246\202\343?=\"D?(\311\251=g\271\374>v\327\340;\031 1?\017\263\010>\205$U?\031\342x>\366\363\234<\331\'\024?\273N\232\276\340H\207?~C\272?\212ov\276MM\200=^\207$\277o=\226?\023S\207\276\234\377\264>\014\350\216>%\010\330\276\tR\'>\230\2435>/D\346>x;\037>)>\320=\177\013U?\r7F?\000t\t?\201\251\333=\372L\367>\353B\254>,\232\224>\202\352\362\274\230\2401>\257\250\273\276\216\307\333\276\323K\265\274\264\315\216\275:,\001?c\272\310\276\211\021K\275\342k\206?\371\277\310>/\373\246>\377\357\260>\356\206a?L\241m?\003\307\325>\266\235\035\276gw\002?\375\302\232>L\346\271>\340\3323\276\266\256f\275\210w\261?\276\335b?!\013\214\276\342b\254?\007\322\374=k\211|>\254\035\026>\303K\230\275\260\3506?\357\374\343>\325Q\303>to\312>\033O\n?\0068_?\233\223\215>\014\324\334>,\270\365\275\377A\346>\336\335o;\355\004[\276$\354\222>\ri\201?\267K\267\275\240\352\243>"
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/expand/conv2/conv/InstanceNorm/Reshape"
  input: "transformer/expand/conv2/conv/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/expand/conv2/conv/InstanceNorm/mul"
  input: "transformer/expand/conv2/conv/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/expand/conv2/conv/InstanceNorm/Sum"
  input: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims"
  input: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/expand/conv2/conv/InstanceNorm/moments/normalize/mean"
  input: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/expand/conv2/conv/InstanceNorm/ExpandDims_1"
  input: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/mul_1"
  input: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/Relu_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/Relu_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/Relu_eightbit_reshape_transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1"
  op: "Reshape"
  input: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1"
  input: "transformer/expand/conv2/conv/Relu_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/Relu_eightbit_min_transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1"
  op: "Min"
  input: "transformer/expand/conv2/conv/Relu_eightbit_reshape_transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1"
  input: "transformer/expand/conv2/conv/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/Relu_eightbit_max_transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1"
  op: "Max"
  input: "transformer/expand/conv2/conv/Relu_eightbit_reshape_transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1"
  input: "transformer/expand/conv2/conv/Relu_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/Relu_eightbit_quantize_transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1"
  op: "QuantizeV2"
  input: "transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1"
  input: "transformer/expand/conv2/conv/Relu_eightbit_min_transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1"
  input: "transformer/expand/conv2/conv/Relu_eightbit_max_transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/Relu_eightbit_quantized"
  op: "QuantizedRelu"
  input: "transformer/expand/conv2/conv/Relu_eightbit_quantize_transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1"
  input: "transformer/expand/conv2/conv/Relu_eightbit_quantize_transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1:1"
  input: "transformer/expand/conv2/conv/Relu_eightbit_quantize_transformer/expand/conv2/conv/InstanceNorm/batchnorm/add_1:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/expand/conv2/conv/Relu"
  op: "Dequantize"
  input: "transformer/expand/conv2/conv/Relu_eightbit_quantized"
  input: "transformer/expand/conv2/conv/Relu_eightbit_quantized:1"
  input: "transformer/expand/conv2/conv/Relu_eightbit_quantized:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv3/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/Shape"
  op: "Shape"
  input: "transformer/expand/conv2/conv/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/strided_slice"
  op: "StridedSlice"
  input: "transformer/expand/conv3/Shape"
  input: "transformer/expand/conv3/strided_slice/stack"
  input: "transformer/expand/conv3/strided_slice/stack_1"
  input: "transformer/expand/conv3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transformer/expand/conv3/mul"
  op: "Mul"
  input: "transformer/expand/conv3/mul/x"
  input: "transformer/expand/conv3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv3/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/strided_slice_1"
  op: "StridedSlice"
  input: "transformer/expand/conv3/Shape"
  input: "transformer/expand/conv3/strided_slice_1/stack"
  input: "transformer/expand/conv3/strided_slice_1/stack_1"
  input: "transformer/expand/conv3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transformer/expand/conv3/mul_1"
  op: "Mul"
  input: "transformer/expand/conv3/mul_1/x"
  input: "transformer/expand/conv3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv3/ResizeNearestNeighbor/size"
  op: "Pack"
  input: "transformer/expand/conv3/mul"
  input: "transformer/expand/conv3/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "transformer/expand/conv3/ResizeNearestNeighbor"
  op: "ResizeNearestNeighbor"
  input: "transformer/expand/conv2/conv/Relu"
  input: "transformer/expand/conv3/ResizeNearestNeighbor/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv3/MirrorPad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\004\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/MirrorPad"
  op: "MirrorPad"
  input: "transformer/expand/conv3/ResizeNearestNeighbor"
  input: "transformer/expand/conv3/MirrorPad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/weights_quint8_const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_QUINT8
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 9
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\227\257\276\236\251\234\243\257\257\262\245\207\213\240\231\241\246\244\232\241\247\247\235\206\227\236\216\234\235\243\227\256\252\303\252\225\225\253\216\245\242\252\235\315\256\235\227\211\240\251\204\233\237\244\235\345\263\246\237\224\236\262\220\223\232\243\222\326\260\261\243\230\214\243~v\262\224\246\275\255\241\227\213\240rdc\251\217\244\240\240\225\230\236\235\250\274\227\252\246\246\226\240\222\223\260\230\261\300\255\246\256\240\253\250\246\223\241\231\244\241\251\243\256\236\236\247\257\257\262\265\225\227\226\246\255\236\257\241\224\206\233\217\223\231\232\246\235\242\233\225\212\220\231\216\236\252\233\256\245\253\360\322\263\253\276\257\231\234\207\267\257\255\355\320\263\301\273\270T(=\263\230\250\265\254\240\254\245\2678\000*\251\204\243\252\246\231\214\233\231\216\230z\245\222\245\240\250\226\224\256\231\251\300\244\242\244\243\251\250\243\241\261\235\230\230\235\240\254\240\232\244\252\251\247\250\241\237\240\245\264\241\270\244\221\230\255\227\237\240\242\240\236\241\210\211\177\227\242\215\242\251\237\245\246\247\252\240\223\226\260\243\251\256\225\261\302\260\230\232\216\256\254\266\201ob\263\272\257\214\223\212\236\237\271pUY\246\230\251\260\244\224\211\234\242\244\255\214\242\222\251\254\250\222\227\261\242\252\267\246\241\245\247\250\241\225\240\256\237\237\235\242\240\270\250\242\241\236\233\220\231\251\242\253\243\261\250\311\255\233\251\267\243\247\243\252\232\244\242\246\232\213\252\257\226\240\241\241\232\251\244\261\241\223{\214\210\264\273\253\243\305\254\227\226\214ul\206\265\276\242\246\302\257\241\234\222\217~
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/weights_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -2.99798178673
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/weights_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.72047507763
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/convolution_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/convolution_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/convolution_eightbit_reshape_transformer/expand/conv3/MirrorPad"
  op: "Reshape"
  input: "transformer/expand/conv3/MirrorPad"
  input: "transformer/expand/conv3/conv/convolution_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/convolution_eightbit_min_transformer/expand/conv3/MirrorPad"
  op: "Min"
  input: "transformer/expand/conv3/conv/convolution_eightbit_reshape_transformer/expand/conv3/MirrorPad"
  input: "transformer/expand/conv3/conv/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/convolution_eightbit_max_transformer/expand/conv3/MirrorPad"
  op: "Max"
  input: "transformer/expand/conv3/conv/convolution_eightbit_reshape_transformer/expand/conv3/MirrorPad"
  input: "transformer/expand/conv3/conv/convolution_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/convolution_eightbit_quantize_transformer/expand/conv3/MirrorPad"
  op: "QuantizeV2"
  input: "transformer/expand/conv3/MirrorPad"
  input: "transformer/expand/conv3/conv/convolution_eightbit_min_transformer/expand/conv3/MirrorPad"
  input: "transformer/expand/conv3/conv/convolution_eightbit_max_transformer/expand/conv3/MirrorPad"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/convolution_eightbit_quantized_conv"
  op: "QuantizedConv2D"
  input: "transformer/expand/conv3/conv/convolution_eightbit_quantize_transformer/expand/conv3/MirrorPad"
  input: "transformer/expand/conv3/conv/weights_quint8_const"
  input: "transformer/expand/conv3/conv/convolution_eightbit_quantize_transformer/expand/conv3/MirrorPad:1"
  input: "transformer/expand/conv3/conv/convolution_eightbit_quantize_transformer/expand/conv3/MirrorPad:2"
  input: "transformer/expand/conv3/conv/weights_min"
  input: "transformer/expand/conv3/conv/weights_max"
  attr {
    key: "Tfilter"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "Tinput"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/convolution_eightbit_requant_range"
  op: "RequantizationRange"
  input: "transformer/expand/conv3/conv/convolution_eightbit_quantized_conv"
  input: "transformer/expand/conv3/conv/convolution_eightbit_quantized_conv:1"
  input: "transformer/expand/conv3/conv/convolution_eightbit_quantized_conv:2"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/convolution_eightbit_requantize"
  op: "Requantize"
  input: "transformer/expand/conv3/conv/convolution_eightbit_quantized_conv"
  input: "transformer/expand/conv3/conv/convolution_eightbit_quantized_conv:1"
  input: "transformer/expand/conv3/conv/convolution_eightbit_quantized_conv:2"
  input: "transformer/expand/conv3/conv/convolution_eightbit_requant_range:0"
  input: "transformer/expand/conv3/conv/convolution_eightbit_requant_range:1"
  attr {
    key: "Tinput"
    value {
      type: DT_QINT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/convolution"
  op: "Dequantize"
  input: "transformer/expand/conv3/conv/convolution_eightbit_requantize"
  input: "transformer/expand/conv3/conv/convolution_eightbit_requantize:1"
  input: "transformer/expand/conv3/conv/convolution_eightbit_requantize:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/Square"
  op: "Square"
  input: "transformer/expand/conv3/conv/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/var_ss"
  op: "Sum"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/Square"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/var_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/Shape"
  op: "Shape"
  input: "transformer/expand/conv3/conv/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/Cast"
  op: "Cast"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/Gather"
  op: "Gather"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/Cast"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/Gather/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/count"
  op: "Prod"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/Gather"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/mean_ss"
  op: "Sum"
  input: "transformer/expand/conv3/conv/convolution"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/mean_ss/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/normalize/divisor"
  op: "Reciprocal"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/count"
  input: "^transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "^transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/var_ss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/normalize/Mul"
  op: "Mul"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/var_ss"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/normalize/mean"
  op: "Mul"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/sufficient_statistics/mean_ss"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/normalize/divisor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/normalize/Square"
  op: "Square"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/normalize/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/moments/normalize/variance"
  op: "Sub"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/normalize/Mul"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/normalize/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/add"
  op: "Add"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/normalize/variance"
  input: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_min_style_num"
  op: "Min"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_max_style_num"
  op: "Max"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_reshape_style_num"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_min_style_num"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_quantize_style_num"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1/shape"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_quantize_style_num:1"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1"
  op: "Dequantize"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_quantized_reshape"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_quantized_reshape:1"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\333\025|?\366r;?\'0a?t\313\260?\222\243\256?\270\207\316?S\013\260?]\355\264?y\367\246?\275\001\353?B\372\000@E\322\033@o\006\235?3y\270?\254\240\266?\235\322k?K}c?\341vx?\301]\032?\326H)?\301\340\034?\260 \360?\327\364\306?\3477\240?\276\324\260?\321\336\240?\200\205\237?\245Q\221?\346\360n?\353{G?\262\021\201?X4\037?\023\013\266>7Rp?\252\251\\?\305\254m?J\027c?L\014(?:\300??\322\256\235?\025\315\207?\223]s?\021\300>?\375N\374>\354x\335>\275\203\233?J\225\222?\230)\213?%\375)?\227\253\265>n\333M?\367\030\340?l\252\246?\2449t?\340m(?S\217K?\357\372C?\206\305\311?^\377\253?\225*e?\326\221{?\216\376=?\320\256\002?vh\314?\370\256\252?y\261\245?\254\342\210?\243P~?\013\026\214?FD\225?/l\216?\217\377\214?EA\233?\t\016r?1]\001?\002=\210?/\342l?\226\036e?"
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/mul_1"
  op: "Mul"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_1"
  input: "transformer/expand/conv3/conv/InstanceNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Sum_1"
  op: "Sum"
  input: "transformer/expand/conv3/conv/InstanceNorm/mul_1"
  input: "transformer/expand/conv3/conv/InstanceNorm/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims_2"
  op: "ExpandDims"
  input: "transformer/expand/conv3/conv/InstanceNorm/Sum_1"
  input: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims_3"
  op: "ExpandDims"
  input: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims_2"
  input: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/mul"
  op: "Mul"
  input: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/Rsqrt"
  input: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/mul_1"
  op: "Mul"
  input: "transformer/expand/conv3/conv/convolution"
  input: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\032\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_reshape_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_reduction_dims"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_reshape_style_num"
  op: "Reshape"
  input: "style_num"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_reshape_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_min_style_num"
  op: "Min"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_max_style_num"
  op: "Max"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_reshape_style_num"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_reduction_dims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_quantize_style_num"
  op: "QuantizeV2"
  input: "style_num"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_min_style_num"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_max_style_num"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_quantized_reshape"
  op: "QuantizedReshape"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_quantize_style_num"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape/shape"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_quantize_style_num:1"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_quantize_style_num:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Reshape"
  op: "Dequantize"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_quantized_reshape"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_quantized_reshape:1"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape_eightbit_quantized_reshape:2"
  attr {
    key: "T"
    value {
      type: DT_QUINT8
    }
  }
  attr {
    key: "mode"
    value {
      s: "MIN_FIRST"
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 26
          }
          dim {
            size: 3
          }
        }
        tensor_content: "v\272\027?\376K\323>\025w\201\275\373\364]?\250\354\014?\241\206\321\276A\230\260>k\243\207>s,\341=J\004\226\277\203<\321\277\257\206\271\277xA\204?\242\026\200=\210\035K\276\036\365j>3\357\310\276\270\306,\277\300s\261\277\254`\256\277R\320\036\277Y\211\207\277\357F\301\277}\331\324\277\267\335\363?\t+\354?\275\307\333?\343E\371\275 ?\320\274\275\373$=\256\233t\276\240\311t\277\n\246\214\277\373\306\232?\364\352*?\232\262P\276Q\307Z?\375\'\366>iq\237>\340\351\345\276\367N\240\276\371\226y\277\'-\035?\037<~?\200\177\220?/\372\215?)eU?ahB?\036\256\036\277\017\350\372\276\303\307\274\275\317\300\026?mG\260\277u{\302\277\241Z\201?\207\330\023?h\026Z\276\031\204F\277Wf;\276?7R=(f\000\277\334\353\024\300\320\235\005\300X\013!?\017%\254>\235t\231>\324[\226\276p\032{\276P\356z\276\2173\377\276n\263\361\276\205\365\366\276\211\266\316>\005\004\n?\215E\216>;\323\311\276\037\235\375\276\021\361\000\277"
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/mul"
  op: "Mul"
  input: "transformer/expand/conv3/conv/InstanceNorm/Reshape"
  input: "transformer/expand/conv3/conv/InstanceNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/Sum"
  op: "Sum"
  input: "transformer/expand/conv3/conv/InstanceNorm/mul"
  input: "transformer/expand/conv3/conv/InstanceNorm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims"
  op: "ExpandDims"
  input: "transformer/expand/conv3/conv/InstanceNorm/Sum"
  input: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims"
  input: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/mul_2"
  op: "Mul"
  input: "transformer/expand/conv3/conv/InstanceNorm/moments/normalize/mean"
  input: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/sub"
  op: "Sub"
  input: "transformer/expand/conv3/conv/InstanceNorm/ExpandDims_1"
  input: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/add_1"
  op: "Add"
  input: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/mul_1"
  input: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transformer/expand/conv3/conv/Sigmoid"
  op: "Sigmoid"
  input: "transformer/expand/conv3/conv/InstanceNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.0
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "transformer/expand/conv3/conv/Sigmoid"
  input: "mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Squeeze"
  op: "Squeeze"
  input: "mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Squeeze"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 7
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 7
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "output"
  op: "Cast"
  input: "strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
